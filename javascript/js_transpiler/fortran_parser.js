/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var fortran_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,10],$V2=[1,9],$V3=[1,14],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,17],$V8=[1,18],$V9=[5,18,22,28,36,41,94,95],$Va=[15,17,19,20,24,27,30,45,86],$Vb=[5,15,17,18,19,20,22,24,27,28,30,36,41,45,86,94,95],$Vc=[1,40],$Vd=[1,34],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,31],$Vk=[1,38],$Vl=[1,39],$Vm=[1,41],$Vn=[42,43],$Vo=[2,81],$Vp=[1,47],$Vq=[1,48],$Vr=[1,50],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[5,15,17,18,19,20,22,23,24,25,27,28,30,32,36,41,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,75,78,82,86,94,95],$VI=[5,15,17,18,19,20,22,23,24,25,27,28,30,32,36,41,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,71,75,78,82,86,94,95],$VJ=[1,80],$VK=[5,15,17,18,19,20,22,23,24,25,27,28,30,31,32,36,41,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,71,74,75,78,82,86,94,95],$VL=[2,74],$VM=[1,87],$VN=[1,96],$VO=[5,15,17,18,19,20,22,23,24,25,27,28,30,32,36,41,45,48,49,50,51,52,54,56,58,75,78,82,86,94,95],$VP=[1,130],$VQ=[1,134],$VR=[2,98],$VS=[5,15,17,18,19,20,22,24,27,28,30,32,36,41,45,78,86,94,95],$VT=[5,15,17,18,19,20,22,23,24,25,27,28,30,32,36,41,45,48,49,50,51,52,54,56,58,60,61,62,75,78,82,86,94,95],$VU=[5,15,17,18,19,20,22,23,24,25,27,28,30,32,36,41,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,75,78,82,86,94,95],$VV=[32,78],$VW=[1,142],$VX=[1,148],$VY=[1,149],$VZ=[22,41],$V_=[1,175],$V$=[1,183],$V01=[1,184];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statements_without_vars":6,"initialize_vars":7,"statement":8,"initialize_var":9,"statements":10,"top_level_statement":11,"initialize_var1":12,"top_level_statements":13,"statement_with_semicolon":14,"while":15,"e":16,"do":17,"enddo":18,"type":19,"IDENTIFIER":20,"struct_statements":21,"end":22,"bracket_statements":23,"if":24,"then":25,"elif":26,"select":27,"case":28,"case_statements":29,"subroutine":30,"(":31,")":32,"identifiers":33,"parameters":34,"function":35,"return":36,"struct_statement":37,"var_type":38,"case_statement":39,"case_statements_":40,"default":41,"::":42,"identifier":43,"=":44,"call":45,"function_call":46,"initialize_var_":47,".or.":48,".and.":49,">":50,"<":51,"<=":52,".le.":53,">=":54,".ge.":55,"==":56,".eq.":57,"/=":58,".neq.":59,"+":60,"-":61,"..":62,"*":63,"/":64,"%":65,"**":66,"not_expr":67,".not.":68,"dot_expr":69,"parentheses_expr":70,".":71,"access_array":72,"parentheses_expr_":73,"[":74,"]":75,"function_call_exprs":76,"named_parameters":77,",":78,"named_parameter":79,"function_call_expr":80,"(/":81,"/)":82,"exprs":83,"NUMBER":84,"STRING_LITERAL":85,"double":86,"precision":87,"parameter":88,"intent":89,"in":90,"out":91,"inout":92,"types":93,"elseif":94,"else":95,"key_values":96,"key_value":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"while",17:"do",18:"enddo",19:"type",20:"IDENTIFIER",22:"end",23:"bracket_statements",24:"if",25:"then",27:"select",28:"case",30:"subroutine",31:"(",32:")",35:"function",36:"return",41:"default",42:"::",43:"identifier",44:"=",45:"call",48:".or.",49:".and.",50:">",51:"<",52:"<=",53:".le.",54:">=",55:".ge.",56:"==",57:".eq.",58:"/=",59:".neq.",60:"+",61:"-",62:"..",63:"*",64:"/",65:"%",66:"**",68:".not.",71:".",74:"[",75:"]",78:",",81:"(/",82:"/)",84:"NUMBER",85:"STRING_LITERAL",86:"double",87:"precision",89:"intent",90:"in",91:"out",92:"inout",94:"elseif",95:"else"},
productions_: [0,[3,2],[4,1],[4,2],[6,2],[6,1],[7,2],[7,1],[10,1],[11,1],[11,1],[13,2],[13,1],[8,1],[8,5],[8,6],[8,5],[8,7],[8,6],[8,6],[8,8],[8,10],[8,8],[8,10],[21,2],[21,1],[37,2],[39,3],[40,2],[40,1],[29,3],[29,1],[14,3],[14,2],[14,3],[14,2],[12,1],[9,1],[47,5],[16,3],[16,3],[16,3],[16,3],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,1],[67,2],[67,1],[69,3],[69,1],[72,4],[46,3],[46,4],[46,4],[77,3],[77,1],[79,3],[73,2],[73,3],[73,1],[73,1],[73,1],[70,3],[70,1],[70,1],[70,1],[38,2],[38,1],[88,8],[88,8],[88,8],[34,2],[34,1],[83,3],[83,1],[76,3],[76,1],[80,1],[93,3],[93,1],[26,5],[26,4],[26,2],[33,3],[33,1],[96,3],[96,1],[97,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 3:
this.$ = [["lexically_scoped_vars",$$[$0-1],["statements",$$[$0]]]]
break;
case 4: case 24: case 28:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 5: case 7: case 12: case 25: case 29: case 63: case 86:
this.$ =
 [$$[$0]];
break;
case 6: case 11: case 85:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 8:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = ["semicolon",$$[$0]]
break;
case 13:
this.$ = ["semicolon",$$[$0]];
break;
case 14:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-3]]]
break;
case 16:
this.$ = ["do_while",$$[$0-2],$$[$0-1]];
break;
case 17:
this.$ = ["if",$$[$0-5],$$[$0-3],$$[$0-2]];
break;
case 18:
this.$ = ["if",$$[$0-4],$$[$0-2]];
break;
case 19:
this.$ = ["switch",$$[$0-3],$$[$0-2]];
break;
case 20:
this.$ = ["function","public","void",$$[$0-6],[],$$[$0-3]];
break;
case 21:
this.$ = ["function","public","void",$$[$0-8],$$[$0-4],$$[$0-3]];
break;
case 22:
this.$ = ["function","public",$$[$0-7],$$[$0-5],[],$$[$0-2]];
break;
case 23:
this.$ = ["function","public",$$[$0-9],$$[$0-7],$$[$0-3],$$[$0-2]];
break;
case 26:
this.$ = ["struct_statement",$$[$0-1],[$$[$0]]];
break;
case 27:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 30:
this.$ = $$[$0-2].concat([["default",$$[$01]]])
break;
case 32:
this.$ = ["initialize_empty_vars",$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["initialize_empty_vars",$$[$0-1],[$$[$0]]];
break;
case 34:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 35:
this.$ = $$[$0];
break;
case 36:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 37:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 38:
this.$ = [$$[$0-4],$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 41: case 42: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 44: case 46: case 48:
this.$ = [$$[$0],$$[$0-1],$$[$01]];
break;
case 50:
this.$ = ["!=",$$[$0-1],$$[$01]];
break;
case 58:
this.$ = ["-",$$[$0]];
break;
case 60:
this.$ = ["!", [".",$$[$0]]];
break;
case 61:
this.$ = [".", $$[$0]];
break;
case 62: case 87: case 89: case 92:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 64:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 65:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 66: case 67:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 68: case 97: case 99:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 69: case 88: case 90: case 93: case 98: case 100:
this.$ = [$$[$0]];
break;
case 70:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 71:
this.$ = ["initializer_list","Object",[]];
break;
case 72:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 73: case 74: case 75:
this.$ = yytext;
break;
case 76:
this.$ = ["parentheses",$$[$0-1]];
break;
case 82: case 83:
this.$ = ["in_parameter",$$[$0-7], $$[$0]];
break;
case 84:
this.$ = ["ref_parameter",$$[$0-7], $$[$0]];
break;
case 91:
this.$ = ["function_call_ref",$$[$0]];
break;
case 94:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 95:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 96:
this.$ = ["else",$$[$0]];
break;
case 101:
this.$ = [$$[$0-2],$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},{1:[3]},{5:[1,19]},o($V9,[2,2]),{6:20,8:5,9:21,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},o($V9,[2,5],{8:5,14:7,6:22,38:23,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,45:$V7,86:$V8}),o($Va,[2,7]),o($Vb,[2,13]),{16:24,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{20:[1,42]},{15:[1,43]},{16:44,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{28:[1,45]},{20:[1,46]},o($Vn,$Vo,{35:$Vp,44:$Vq}),o($Va,[2,37]),{42:[1,49],43:$Vr},{20:$Vc,46:51,73:52,81:$Vk,84:$Vl,85:$Vm},{87:[1,53]},{1:[2,1]},o($V9,[2,3]),o($Va,[2,6]),o($V9,[2,4]),{42:[1,54],43:$Vr},{17:[1,55],48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG},{16:71,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:72,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:73,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:74,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:75,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},o($VH,[2,59]),{20:$Vc,31:$Vd,46:36,69:76,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},o($VH,[2,61]),o($VH,[2,63],{71:[1,77]}),{16:78,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},o($VI,[2,77]),o($VI,[2,78]),o($VI,[2,79],{31:$VJ,74:[1,79]}),{16:83,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,82:[1,81],83:82,84:$Vl,85:$Vm},o($VK,[2,73]),o($VK,$VL),o($VK,[2,75]),{20:$VM,21:84,37:85,38:86,86:$V8},{16:88,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{25:[1,89],48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG},{16:90,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{31:[1,91]},{20:[1,92]},{16:93,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{20:[1,95],33:94},o($Vb,[2,33]),o($Vb,[2,35]),{31:$VJ},o([20,42,43],[2,80]),{20:$VN,33:94},{4:98,6:3,7:4,8:5,9:6,10:97,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},{16:99,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:100,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:101,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:102,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},o($VH,[2,43]),o($VH,[2,45]),o($VH,[2,47]),o($VH,[2,49]),{16:103,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:104,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:105,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:106,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:107,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:108,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:109,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},o($VO,[2,44],{60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VO,[2,46],{60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VO,[2,48],{60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VO,[2,50],{60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VH,[2,58]),o($VH,[2,60]),{20:$Vc,31:$Vd,46:36,69:110,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{32:[1,111],48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG},{16:112,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{16:118,20:[1,119],31:$Vd,32:[1,113],46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,76:114,77:115,79:117,80:116,81:$Vk,84:$Vl,85:$Vm},o($VK,[2,71]),{82:[1,120]},{48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,78:[1,121],82:[2,88]},{22:[1,122]},{20:$VM,21:123,22:[2,25],37:85,38:86,86:$V8},{20:[1,124]},{20:$Vo},{23:[1,125],48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG},{4:98,6:3,7:4,8:5,9:6,10:126,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},{28:$VP,29:127,39:129,40:128,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG},{20:$VN,32:[1,131],33:132},{31:[1,133]},o($Vb,[2,34],{48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($Vb,[2,32],{78:$VQ}),o([5,15,17,18,19,20,22,24,27,28,30,36,41,45,78,86,94,95],$VR,{44:[1,135]}),o($VS,$VR),{18:[1,136]},o([18,22,28,36,41,94,95],[2,8]),o([5,15,17,18,19,20,22,23,24,25,27,28,30,32,36,41,45,48,75,78,82,86,94,95],[2,39],{49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o([5,15,17,18,19,20,22,23,24,25,27,28,30,32,36,41,45,48,49,75,78,82,86,94,95],[2,40],{50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VO,[2,41],{60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VO,[2,42],{60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VT,[2,51],{63:$VD,64:$VE,65:$VF,66:$VG}),o($VT,[2,52],{63:$VD,64:$VE,65:$VF,66:$VG}),o($VT,[2,53],{63:$VD,64:$VE,65:$VF,66:$VG}),o($VU,[2,54],{66:$VG}),o($VU,[2,55],{66:$VG}),o($VU,[2,56],{66:$VG}),o($VH,[2,57]),o($VH,[2,62]),o($VI,[2,76]),{48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,75:[1,137]},o($VI,[2,65]),{32:[1,138]},{32:[1,139],78:[1,140]},{32:[2,90],78:[1,141]},o($VV,[2,69]),o($VV,[2,91],{48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o([31,32,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,71,74,78],$VL,{44:$VW}),o($VK,[2,72]),{16:83,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,83:143,84:$Vl,85:$Vm},{19:[1,144]},{22:[2,24]},o([20,22,86],[2,26]),{18:[1,145]},{22:[1,147],26:146,94:$VX,95:$VY},{22:[1,150]},{22:[2,31],41:[1,151]},o($VZ,[2,29],{39:129,40:152,28:$VP}),{16:153,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{4:98,6:3,7:4,8:5,9:6,10:154,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},{32:[1,155],78:$VQ},{20:$VN,32:[1,156],33:157},{20:[1,158]},{16:159,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},o($Vb,[2,14]),o($VI,[2,64]),o($VI,[2,66]),o($VI,[2,67]),{20:[1,161],79:160},{16:118,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,76:162,80:116,81:$Vk,84:$Vl,85:$Vm},{16:118,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,80:163,81:$Vk,84:$Vl,85:$Vm},{82:[2,87]},{20:[1,164]},o($Vb,[2,16]),{22:[1,165]},{24:[1,166]},{16:167,20:$Vc,31:$Vd,46:36,53:$Ve,55:$Vf,57:$Vg,59:$Vh,61:$Vi,67:30,68:$Vj,69:32,70:33,72:35,73:37,81:$Vk,84:$Vl,85:$Vm},{4:98,6:3,7:4,8:5,9:6,10:168,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},{27:[1,169]},{4:98,6:3,7:4,8:5,9:6,10:170,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},o($VZ,[2,28]),{4:98,6:3,7:4,8:5,9:6,10:171,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,86:$V8},{22:[1,172]},{20:$V_,34:173,88:174},{4:98,6:3,7:4,8:5,9:6,10:176,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},{32:[1,177],78:$VQ},o($VS,[2,97]),o($Va,[2,38],{48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG}),o($VV,[2,68]),{44:$VW},{32:[2,89]},o($VV,[2,70]),o($Vb,[2,15]),{24:[1,178]},o($Vb,[2,18]),{25:[1,179],48:$Vs,49:$Vt,50:$Vu,51:$Vv,52:$Vw,54:$Vx,56:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG},{22:[2,96]},o($Vb,[2,19]),{22:[2,30]},o([22,28,41],[2,27]),{30:[1,180]},{4:98,6:3,7:4,8:5,9:6,10:181,14:7,15:$V0,17:$V1,19:$V2,20:$V$,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8,88:182},o($Va,[2,86]),{78:$V01},{36:[1,185]},{20:$V_,34:186,88:174},o($Vb,[2,17]),{4:98,6:3,7:4,8:5,9:6,10:187,14:7,15:$V0,17:$V1,19:$V2,20:$V3,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8},{20:[1,188]},{22:[1,189]},o($Va,[2,85]),o($Vn,$Vo,{35:$Vp,44:$Vq,78:$V01}),{89:[1,190]},{22:[1,191]},{4:98,6:3,7:4,8:5,9:6,10:192,14:7,15:$V0,17:$V1,19:$V2,20:$V$,24:$V4,27:$V5,30:$V6,38:16,45:$V7,47:15,86:$V8,88:182},{22:[2,95],26:193,94:$VX,95:$VY},o($Vb,[2,20]),{30:[1,194]},{31:[1,195]},o($Vb,[2,22]),{36:[1,196]},{22:[2,94]},{20:[1,197]},{90:[1,198],91:[1,199],92:[1,200]},{22:[1,201]},o($Vb,[2,21]),{32:[1,202]},{32:[1,203]},{32:[1,204]},o($Vb,[2,23]),{42:[1,205]},{42:[1,206]},{42:[1,207]},{20:[1,208]},{20:[1,209]},{20:[1,210]},o($Va,[2,82]),o($Va,[2,83]),o($Va,[2,84])],
defaultActions: {19:[2,1],87:[2,81],123:[2,24],143:[2,87],162:[2,89],168:[2,96],170:[2,30],193:[2,94]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 84
break;
case 2:return 85
break;
case 3:return "$"
break;
case 4:return 'double precision'
break;
case 5:return "subroutine"
break;
case 6:return "function"
break;
case 7:return 92
break;
case 8:return "enddo"
break;
case 9:return 89
break;
case 10:return "end"
break;
case 11:return 91
break;
case 12:return '.true.'
break;
case 13:return '.false.'
break;
case 14:return 49
break;
case 15:return 48
break;
case 16:return 57
break;
case 17:return 59
break;
case 18:return '.ne.'
break;
case 19:return '.gt.'
break;
case 20:return '.lt.'
break;
case 21:return 55
break;
case 22:return 53
break;
case 23:return 25
break;
case 24:return 19
break;
case 25:return 'struct'
break;
case 26:return 94
break;
case 27:return 27
break;
case 28:return 24
break;
case 29:return 95
break;
case 30:return 28
break;
case 31:return 45
break;
case 32:return 36
break;
case 33:return 15
break;
case 34:return 'for'
break;
case 35:return 'repeat'
break;
case 36:return 'until'
break;
case 37:return 'of'
break;
case 38:return 68
break;
case 39:return 78
break;
case 40:return 62
break;
case 41:return 71
break;
case 42:return 42
break;
case 43:return ':'
break;
case 44:return 54
break;
case 45:return 50
break;
case 46:return 52
break;
case 47:return 51
break;
case 48:return 58
break;
case 49:return 56
break;
case 50:return 44
break;
case 51:return '*='
break;
case 52:return 66
break;
case 53:return 64
break;
case 54:return 65
break;
case 55:return 61
break;
case 56:return 60
break;
case 57:return 63
break;
case 58:return 81
break;
case 59:return 82
break;
case 60:return 74
break;
case 61:return 75
break;
case 62:return 31
break;
case 63:return 32
break;
case 64:return '_'
break;
case 65:return 'pairs'
break;
case 66:return 90
break;
case 67:return 17
break;
case 68:return 20
break;
case 69:return 5
break;
case 70:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|!+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:double precision\b)/,/^(?:subroutine\b)/,/^(?:function\b)/,/^(?:inout\b)/,/^(?:enddo\b)/,/^(?:intent\b)/,/^(?:end\b)/,/^(?:out\b)/,/^(?:\.true\.)/,/^(?:\.false\.)/,/^(?:\.and\.)/,/^(?:\.or\.)/,/^(?:\.eq\.)/,/^(?:\.neq\.)/,/^(?:\.ne\.)/,/^(?:\.gt\.)/,/^(?:\.lt\.)/,/^(?:\.ge\.)/,/^(?:\.le\.)/,/^(?:then\b)/,/^(?:type\b)/,/^(?:struct\b)/,/^(?:elseif\b)/,/^(?:select\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:call\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:\.not\.)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:\/=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\(\/)/,/^(?:\\\))/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = fortran_parser;
exports.Parser = fortran_parser.Parser;
exports.parse = function () { return fortran_parser.parse.apply(fortran_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}