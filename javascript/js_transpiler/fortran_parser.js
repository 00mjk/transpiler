/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var fortran_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,11],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,18],$V7=[1,17],$V8=[1,7],$V9=[5,22,23,25,29,32,35,45,87,88],$Va=[1,22],$Vb=[14,16,87],$Vc=[2,85],$Vd=[5,22,23,24,25,27,29,32,33,35,44,45,87,88,95,96],$Ve=[1,38],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,35],$Vl=[1,42],$Vm=[1,43],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,60],$Vr=[5,14,22,23,24,25,27,29,32,33,35,37,44,45,87,88,95,96],$Vs=[2,102],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[5,14,22,23,24,25,27,28,29,30,32,33,35,37,44,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,75,81,87,88,95,96],$VJ=[5,14,22,23,24,25,27,28,29,30,32,33,35,37,44,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,71,75,81,87,88,95,96],$VK=[1,88],$VL=[5,14,22,23,24,25,27,28,29,30,32,33,35,36,37,44,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,71,74,75,81,87,88,95,96],$VM=[2,75],$VN=[1,100],$VO=[5,14,22,23,24,25,27,28,29,30,32,33,35,37,44,45,48,49,50,51,52,54,56,58,75,81,87,88,95,96],$VP=[1,143],$VQ=[24,27,33,44,95,96],$VR=[22,23,25,29,32,35,45,87,88],$VS=[5,14,22,23,24,25,27,28,29,30,32,33,35,37,44,45,48,49,50,51,52,54,56,58,60,61,62,75,81,87,88,95,96],$VT=[5,14,22,23,24,25,27,28,29,30,32,33,35,37,44,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,75,81,87,88,95,96],$VU=[14,37],$VV=[1,161],$VW=[1,167],$VX=[1,168],$VY=[27,44],$VZ=[16,22,23,25,29,32,35,45,87,88];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"statements_":6,"statements_without_vars":7,"initialize_vars":8,"statement":9,"initialize_var":10,"statements":11,"top_level_statement":12,"var_type":13,",":14,"parameter":15,"::":16,"IDENTIFIER":17,"=":18,"e":19,"initialize_var1":20,"statement_with_semicolon":21,"while":22,"do":23,"enddo":24,"type":25,"struct_statements":26,"end":27,"bracket_statements":28,"if":29,"then":30,"elif":31,"select":32,"case":33,"case_statements":34,"subroutine":35,"(":36,")":37,"identifiers":38,"parameters":39,"function":40,"struct_statement":41,"case_statement":42,"case_statements_":43,"default":44,"call":45,"function_call":46,"initialize_var_":47,".or.":48,".and.":49,">":50,"<":51,"<=":52,".le.":53,">=":54,".ge.":55,"==":56,".eq.":57,"/=":58,".neq.":59,"+":60,"-":61,"..":62,"*":63,"/":64,"%":65,"**":66,"not_expr":67,".not.":68,"dot_expr":69,"parentheses_expr":70,".":71,"access_array":72,"parentheses_expr_":73,"[":74,"]":75,"function_call_exprs":76,"named_parameters":77,"named_parameter":78,"function_call_expr":79,"(/":80,"/)":81,"exprs":82,"NUMBER":83,".true.":84,".false.":85,"STRING_LITERAL":86,"identifier":87,"double":88,"precision":89,"intent":90,"in":91,"out":92,"inout":93,"types":94,"elseif":95,"else":96,"key_values":97,"key_value":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:",",16:"::",18:"=",22:"while",23:"do",24:"enddo",25:"type",27:"end",28:"bracket_statements",29:"if",30:"then",32:"select",33:"case",35:"subroutine",36:"(",37:")",40:"function",44:"default",45:"call",48:".or.",49:".and.",50:">",51:"<",52:"<=",53:".le.",54:">=",55:".ge.",56:"==",57:".eq.",58:"/=",59:".neq.",60:"+",61:"-",62:"..",63:"*",64:"/",65:"%",66:"**",68:".not.",71:".",74:"[",75:"]",80:"(/",81:"/)",83:"NUMBER",84:".true.",85:".false.",86:"STRING_LITERAL",87:"identifier",88:"double",89:"precision",90:"intent",91:"in",92:"out",93:"inout",95:"elseif",96:"else"},
productions_: [0,[3,2],[6,1],[6,2],[7,2],[7,1],[8,2],[8,1],[11,1],[12,7],[12,1],[12,1],[4,2],[4,1],[9,1],[9,5],[9,6],[9,5],[9,7],[9,6],[9,6],[9,8],[9,10],[9,9],[9,11],[26,2],[26,1],[41,2],[42,3],[43,2],[43,1],[34,3],[34,1],[21,3],[21,2],[21,3],[21,2],[20,1],[10,1],[47,5],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[67,2],[67,1],[69,3],[69,1],[72,4],[46,3],[46,4],[46,4],[77,3],[77,1],[78,3],[73,2],[73,3],[73,1],[73,1],[73,1],[73,1],[73,1],[17,1],[70,3],[70,1],[70,1],[70,1],[13,2],[13,1],[15,8],[15,8],[15,8],[39,2],[39,1],[82,3],[82,1],[76,3],[76,1],[79,1],[94,3],[94,1],[31,5],[31,4],[31,2],[38,3],[38,1],[97,3],[97,1],[98,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 3:
this.$ = [["lexically_scoped_vars",$$[$0-1],["statements",$$[$0]]]]
break;
case 4: case 25: case 29:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 5: case 7: case 13: case 26: case 30: case 64: case 90:
this.$ =
 [$$[$0]];
break;
case 6: case 12: case 89:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 8:
this.$ = ["statements",$$[$0]]
break;
case 9:
this.$ = ["semicolon",["initialize_constant",$$[$0-6],$$[$0-2],$$[$0]]];
break;
case 11:
this.$ = ["semicolon",$$[$0]]
break;
case 14:
this.$ = ["semicolon",$$[$0]];
break;
case 15:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-3]]]
break;
case 17:
this.$ = ["do_while",$$[$0-2],$$[$0-1]];
break;
case 18:
this.$ = ["if",$$[$0-5],$$[$0-3],$$[$0-2]];
break;
case 19:
this.$ = ["if",$$[$0-4],$$[$0-2]];
break;
case 20:
this.$ = ["switch",$$[$0-3],$$[$0-2]];
break;
case 21:
this.$ = ["function","public","void",$$[$0-6],[],$$[$0-3]];
break;
case 22:
this.$ = ["function","public","void",$$[$0-8],$$[$0-4],$$[$0-3]];
break;
case 23:
this.$ = ["function","public",$$[$0-8],$$[$0-6],[],$$[$0-3]];
break;
case 24:
this.$ = ["function","public",$$[$0-10],$$[$0-8],$$[$0-4],$$[$0-3]];
break;
case 27:
this.$ = ["struct_statement",$$[$0-1],[$$[$0]]];
break;
case 28:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 31:
this.$ = $$[$0-2].concat([["default",$$[$01]]])
break;
case 33:
this.$ = ["initialize_empty_vars",$$[$0-2],$$[$0]];
break;
case 34:
this.$ = ["initialize_empty_vars",$$[$0-1],[$$[$0]]];
break;
case 35:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 36:
this.$ = $$[$0];
break;
case 37:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 38:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 39:
this.$ = [$$[$0-4],$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 42: case 43: case 52: case 53: case 54: case 55: case 56: case 57: case 58:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 45: case 47: case 49:
this.$ = [$$[$0],$$[$0-1],$$[$01]];
break;
case 51:
this.$ = ["!=",$$[$0-1],$$[$01]];
break;
case 59:
this.$ = ["-",$$[$0]];
break;
case 61:
this.$ = ["!", [".",$$[$0]]];
break;
case 62:
this.$ = [".", $$[$0]];
break;
case 63: case 91: case 93: case 96:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 65:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 66:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 67: case 68:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 69: case 101: case 103:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 70: case 92: case 94: case 97: case 102: case 104:
this.$ = [$$[$0]];
break;
case 71:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 72:
this.$ = ["initializer_list","Object",[]];
break;
case 73:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 74: case 78:
this.$ = yytext;
break;
case 75: case 79:
this.$ = yytext.toLowerCase();
break;
case 76:
this.$ = ['.',['true']];
break;
case 77:
this.$ = ['.',['false']];
break;
case 80:
this.$ = ["parentheses",$$[$0-1]];
break;
case 86:
this.$ = ["in_parameter",$$[$0-7], $$[$0]];
break;
case 87:
this.$ = ["out_parameter",$$[$0-7], $$[$0]];
break;
case 88:
this.$ = ["ref_parameter",$$[$0-7], $$[$0]];
break;
case 95:
this.$ = ["function_call_ref",$$[$0]];
break;
case 98:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 99:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 100:
this.$ = ["else",$$[$0]];
break;
case 105:
this.$ = [$$[$0-2],$$[$0]]
break;
}
},
table: [{3:1,4:2,9:5,12:3,13:4,17:8,20:6,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:16,87:$V7,88:$V8},{1:[3]},{5:[1,19],9:5,12:20,13:4,17:8,20:6,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:16,87:$V7,88:$V8},o($V9,[2,13]),{14:[1,21],16:$Va,17:24,38:23,87:$V7},o($V9,[2,10]),o($V9,[2,11]),{89:[1,25]},o($Vb,$Vc,{18:[1,27],40:[1,26]}),o($Vd,[2,14]),{17:44,19:28,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:48,87:$V7},{22:[1,49]},{17:44,19:50,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{33:[1,51]},{17:52,87:$V7},o($V9,[2,37]),o([5,14,16,18,22,23,24,25,27,28,29,30,32,33,35,36,37,40,44,45,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,71,74,75,81,87,88,95,96],[2,79]),{17:44,46:53,73:54,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{1:[2,1]},o($V9,[2,12]),{13:56,15:55,17:57,87:$V7,88:$V8},{17:59,38:58,87:$V7},o($Vd,[2,34],{14:$Vq}),o($Vr,$Vs),o($Vb,[2,84]),{17:61,87:$V7},{17:44,19:62,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{23:[1,63],48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{17:44,19:79,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:80,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:81,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:82,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:83,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($VI,[2,60]),{17:44,36:$Ve,46:40,69:84,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($VI,[2,62]),o($VI,[2,64],{71:[1,85]}),{17:44,19:86,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,83],{36:$VK,74:[1,87]}),{17:44,19:91,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,81:[1,89],82:90,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($VL,[2,74]),o($VL,$VM),o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),{13:94,17:57,26:92,41:93,87:$V7,88:$V8},{17:44,19:95,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{30:[1,96],48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{17:44,19:97,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{36:[1,98]},o($Vd,[2,36]),{36:$VK},{16:[1,99]},{14:$VN},o([14,87],$Vc),o($Vd,[2,33],{14:$Vq}),o([5,14,22,23,24,25,27,29,32,33,35,44,45,87,88,95,96],$Vs,{18:[1,101]}),{17:102,87:$V7},{36:[1,103]},o($Vd,[2,35],{48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),{6:105,7:106,8:107,9:108,10:109,11:104,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},{17:44,19:112,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:113,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:114,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:115,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($VI,[2,44]),o($VI,[2,46]),o($VI,[2,48]),o($VI,[2,50]),{17:44,19:116,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:117,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:118,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:119,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:120,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:121,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:122,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($VO,[2,45],{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VO,[2,47],{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VO,[2,49],{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VO,[2,51],{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VI,[2,59]),o($VI,[2,61]),{17:44,36:$Ve,46:40,69:123,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{37:[1,124],48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{17:44,19:125,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:132,19:131,36:$Ve,37:[1,126],46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,76:127,77:128,78:130,79:129,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($VL,[2,72]),{81:[1,133]},{14:[1,134],48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,81:[2,92]},{27:[1,135]},{13:94,17:57,26:136,27:[2,26],41:93,87:$V7,88:$V8},{17:137,87:$V7},{28:[1,138],48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{6:105,7:106,8:107,9:108,10:109,11:139,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},{33:$VP,34:140,42:142,43:141,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{17:24,37:[1,144],38:145,87:$V7},{17:146,87:$V7},{90:[1,147]},{17:44,19:148,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},o($Vr,[2,101]),{17:24,37:[1,149],38:150,87:$V7},{24:[1,151]},o($VQ,[2,8]),o($VQ,[2,2]),{7:152,9:108,10:153,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},o($VQ,[2,5],{17:8,21:9,9:108,7:154,13:155,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,87:$V7,88:$V8}),o($VR,[2,7]),o($VR,[2,38]),{16:$Va,17:24,38:23,87:$V7},o([5,14,22,23,24,25,27,28,29,30,32,33,35,37,44,45,48,75,81,87,88,95,96],[2,40],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o([5,14,22,23,24,25,27,28,29,30,32,33,35,37,44,45,48,49,75,81,87,88,95,96],[2,41],{50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VO,[2,42],{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VO,[2,43],{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VS,[2,52],{63:$VE,64:$VF,65:$VG,66:$VH}),o($VS,[2,53],{63:$VE,64:$VF,65:$VG,66:$VH}),o($VS,[2,54],{63:$VE,64:$VF,65:$VG,66:$VH}),o($VT,[2,55],{66:$VH}),o($VT,[2,56],{66:$VH}),o($VT,[2,57],{66:$VH}),o($VI,[2,58]),o($VI,[2,63]),o($VJ,[2,80]),{48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,75:[1,156]},o($VJ,[2,66]),{37:[1,157]},{14:[1,159],37:[1,158]},{14:[1,160],37:[2,94]},o($VU,[2,70]),o($VU,[2,95],{48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o([14,36,37,48,49,50,51,52,54,56,58,60,61,62,63,64,65,66,71,74],$VM,{18:$VV}),o($VL,[2,73]),{17:44,19:91,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,82:162,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{25:[1,163]},{27:[2,25]},o([27,87,88],[2,27]),{24:[1,164]},{27:[1,166],31:165,95:$VW,96:$VX},{27:[1,169]},{27:[2,32],44:[1,170]},o($VY,[2,30],{42:142,43:171,33:$VP}),{17:44,19:172,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{6:105,7:106,8:107,9:108,10:109,11:173,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},{14:$Vq,37:[1,174]},{18:[1,175]},{36:[1,176]},o($V9,[2,39],{48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),{6:105,7:106,8:107,9:108,10:109,11:177,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},{14:$Vq,37:[1,178]},o($Vd,[2,15]),o($VQ,[2,3]),o($VR,[2,6]),o($VQ,[2,4]),{16:[1,179],17:24,38:23,87:$V7},o($VJ,[2,65]),o($VJ,[2,67]),o($VJ,[2,68]),{17:181,78:180,87:$V7},{17:44,19:131,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,76:182,79:129,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{17:44,19:131,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,79:183,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{81:[2,91]},{17:184,87:$V7},o($Vd,[2,17]),{27:[1,185]},{29:[1,186]},{17:44,19:187,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{6:105,7:106,8:107,9:108,10:109,11:188,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},{32:[1,189]},{6:105,7:106,8:107,9:108,10:109,11:190,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},o($VY,[2,29]),{6:105,7:106,8:107,9:108,10:109,11:191,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,87:$V7,88:$V8},{27:[1,192]},{13:56,15:194,17:57,39:193,87:$V7,88:$V8},{17:44,19:195,36:$Ve,46:40,53:$Vf,55:$Vg,57:$Vh,59:$Vi,61:$Vj,67:34,68:$Vk,69:36,70:37,72:39,73:41,80:$Vl,83:$Vm,84:$Vn,85:$Vo,86:$Vp,87:$V7},{91:[1,196],92:[1,197],93:[1,198]},{27:[1,199]},{13:56,15:194,17:57,39:200,87:$V7,88:$V8},{17:24,38:58,87:$V7},o($VU,[2,69]),{18:$VV},{37:[2,93]},o($VU,[2,71]),o($Vd,[2,16]),{29:[1,201]},o($Vd,[2,19]),{30:[1,202],48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{27:[2,100]},o($Vd,[2,20]),{27:[2,31]},o([27,33,44],[2,28]),{35:[1,203]},{6:105,7:106,8:107,9:108,10:109,11:204,13:206,15:205,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},o($VR,[2,90]),o($V9,[2,9],{48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,54:$Vy,56:$Vz,58:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),{37:[1,207]},{37:[1,208]},{37:[1,209]},{40:[1,210]},{6:105,7:106,8:107,9:108,10:109,11:211,13:206,15:205,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},o($Vd,[2,18]),{6:105,7:106,8:107,9:108,10:109,11:212,13:111,17:8,21:9,22:$V0,23:$V1,25:$V2,29:$V3,32:$V4,35:$V5,45:$V6,47:110,87:$V7,88:$V8},{17:213,87:$V7},{27:[1,214]},o($VR,[2,89]),{14:$VN,16:$Va,17:24,38:23,87:$V7},{16:[1,215]},{16:[1,216]},{16:[1,217]},{17:218,87:$V7},{27:[1,219]},{27:[2,99],31:220,95:$VW,96:$VX},o($Vd,[2,21]),{35:[1,221]},{17:222,87:$V7},{17:223,87:$V7},{17:224,87:$V7},o($Vd,[2,23]),{40:[1,225]},{27:[2,98]},{17:226,87:$V7},o($VZ,[2,86]),o($VZ,[2,87]),o($VZ,[2,88]),{17:227,87:$V7},o($Vd,[2,22]),o($Vd,[2,24])],
defaultActions: {19:[2,1],136:[2,25],162:[2,91],182:[2,93],188:[2,100],190:[2,31],220:[2,98]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 83
break;
case 2:return 86
break;
case 3:return "$"
break;
case 4:return 'double precision'
break;
case 5:return "subroutine"
break;
case 6:return "function"
break;
case 7:return 'parameter'
break;
case 8:return 93
break;
case 9:return "enddo"
break;
case 10:return 90
break;
case 11:return "end"
break;
case 12:return 92
break;
case 13:return 84
break;
case 14:return 85
break;
case 15:return 49
break;
case 16:return 48
break;
case 17:return 57
break;
case 18:return 59
break;
case 19:return '.ne.'
break;
case 20:return '.gt.'
break;
case 21:return '.lt.'
break;
case 22:return 55
break;
case 23:return 53
break;
case 24:return 30
break;
case 25:return 25
break;
case 26:return 'struct'
break;
case 27:return 95
break;
case 28:return 32
break;
case 29:return 29
break;
case 30:return 96
break;
case 31:return 33
break;
case 32:return 45
break;
case 33:return 'return'
break;
case 34:return 22
break;
case 35:return 'for'
break;
case 36:return 'repeat'
break;
case 37:return 'until'
break;
case 38:return 'of'
break;
case 39:return 68
break;
case 40:return 14
break;
case 41:return 62
break;
case 42:return 71
break;
case 43:return 16
break;
case 44:return ':'
break;
case 45:return 54
break;
case 46:return 50
break;
case 47:return 52
break;
case 48:return 51
break;
case 49:return 58
break;
case 50:return 56
break;
case 51:return 18
break;
case 52:return '*='
break;
case 53:return 66
break;
case 54:return 64
break;
case 55:return 65
break;
case 56:return 61
break;
case 57:return 60
break;
case 58:return 63
break;
case 59:return 80
break;
case 60:return 81
break;
case 61:return 74
break;
case 62:return 75
break;
case 63:return 36
break;
case 64:return 37
break;
case 65:return '_'
break;
case 66:return 'pairs'
break;
case 67:return 91
break;
case 68:return 23
break;
case 69:return 87
break;
case 70:return 5
break;
case 71:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|!+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:double precision\b)/,/^(?:subroutine\b)/,/^(?:function\b)/,/^(?:parameter\b)/,/^(?:inout\b)/,/^(?:enddo\b)/,/^(?:intent\b)/,/^(?:end\b)/,/^(?:out\b)/,/^(?:\.true\.)/,/^(?:\.false\.)/,/^(?:\.and\.)/,/^(?:\.or\.)/,/^(?:\.eq\.)/,/^(?:\.neq\.)/,/^(?:\.ne\.)/,/^(?:\.gt\.)/,/^(?:\.lt\.)/,/^(?:\.ge\.)/,/^(?:\.le\.)/,/^(?:then\b)/,/^(?:type\b)/,/^(?:struct\b)/,/^(?:elseif\b)/,/^(?:select\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:call\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:\.not\.)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:\/=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\(\/)/,/^(?:\\\))/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = fortran_parser;
exports.Parser = fortran_parser.Parser;
exports.parse = function () { return fortran_parser.parse.apply(fortran_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}