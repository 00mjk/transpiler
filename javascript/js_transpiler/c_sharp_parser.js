/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_sharp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,24],$V2=[1,19],$V3=[1,4],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,23],$Vd=[1,22],$Ve=[1,21],$Vf=[5,18,46],$Vg=[5,12,13,16,18,25,28,33,35,36,46,50,51,52,53,91,95,101],$Vh=[2,8],$Vi=[1,47],$Vj=[1,44],$Vk=[1,48],$Vl=[1,37],$Vm=[1,40],$Vn=[1,41],$Vo=[1,39],$Vp=[1,46],$Vq=[1,51],$Vr=[2,100],$Vs=[1,64],$Vt=[16,17,29,65,77,97],$Vu=[2,99],$Vv=[27,31],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[18,27,31,45,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89],$VM=[1,92],$VN=[18,27,29,31,45,62,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89],$VO=[2,94],$VP=[1,102],$VQ=[2,120],$VR=[1,107],$VS=[1,115],$VT=[1,161],$VU=[18,31,89],$VV=[1,174],$VW=[18,27,31,45,65,68,69,70,71,89],$VX=[18,27,31,45,65,68,69,70,71,72,73,74,75,76,77,89],$VY=[18,27,31,45,65,68,69,70,71,72,73,74,75,76,77,78,79,89],$VZ=[31,65],$V_=[1,190],$V$=[18,27,31],$V01=[1,199],$V11=[1,212],$V21=[2,106],$V31=[18,27,31,45,62,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89],$V41=[1,237],$V51=[5,12,13,16,18,25,28,33,35,36,46,50,51,52,53,91,95,100,101],$V61=[18,48],$V71=[12,13,18],$V81=[1,292],$V91=[18,65];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"import":25,"statement_with_semicolon":26,";":27,"while":28,"(":29,"e":30,")":31,"bracket_statements":32,"switch":33,"case_statements":34,"for":35,"foreach":36,"type":37,"in":38,"if_statement":39,"static":40,"parameters":41,"async":42,"case_statement":43,"case":44,":":45,"break":46,"case_statements_":47,"default":48,"=":49,"yield":50,"return":51,"throw":52,"final":53,"exprs":54,"access_array":55,"++":56,"--":57,"+=":58,"-=":59,"*=":60,"/=":61,".":62,"dot_expr":63,"key_values":64,",":65,"key_value":66,"STRING_LITERAL":67,"?":68,"is":69,"||":70,"&&":71,"==":72,"!=":73,"<=":74,"<":75,">=":76,">":77,"+":78,"-":79,"*":80,"/":81,"%":82,"initializer_list":83,"not_expr":84,"!":85,"await":86,"parentheses_expr":87,"[":88,"]":89,"new":90,"Dictionary":91,"named_parameters":92,"NUMBER":93,"types":94,"Object":95,"parameter":96,"...":97,"named_parameter":98,"elif":99,"else":100,"if":101,"add":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",25:"import",27:";",28:"while",29:"(",31:")",33:"switch",35:"for",36:"foreach",38:"in",40:"static",42:"async",44:"case",45:":",46:"break",48:"default",49:"=",50:"yield",51:"return",52:"throw",53:"final",56:"++",57:"--",58:"+=",59:"-=",60:"*=",61:"/=",62:".",65:",",67:"STRING_LITERAL",68:"?",69:"is",70:"||",71:"&&",72:"==",73:"!=",74:"<=",75:"<",76:">=",77:">",78:"+",79:"-",80:"*",81:"/",82:"%",85:"!",86:"await",88:"[",89:"]",90:"new",91:"Dictionary",93:"NUMBER",95:"Object",97:"...",100:"else",101:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[6,2],[6,2],[6,1],[6,5],[6,7],[6,9],[6,8],[6,1],[6,10],[6,11],[43,6],[47,2],[47,1],[34,4],[34,1],[10,6],[10,4],[10,7],[10,8],[10,7],[10,10],[10,9],[26,3],[26,2],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[64,3],[64,1],[66,5],[30,5],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,2],[30,1],[84,2],[84,2],[84,1],[63,3],[63,3],[63,1],[55,4],[83,4],[83,5],[83,4],[83,5],[87,3],[87,10],[87,1],[87,3],[87,4],[87,4],[87,1],[87,1],[87,1],[37,3],[37,4],[37,1],[37,1],[37,1],[96,3],[96,4],[96,2],[41,3],[41,1],[41,0],[54,3],[54,1],[92,3],[92,1],[98,3],[94,3],[94,1],[99,7],[99,6],[99,2],[39,6],[39,5],[22,3],[22,1],[102,3],[102,1],[32,3],[32,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 27:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 28: case 81: case 105:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["import",$$[$0]];
break;
case 17: case 124:
this.$ = ["semicolon",$$[$0-1]];
break;
case 19:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 29:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 31:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 33:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 34:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 35:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 36:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 37:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 38:
this.$ = ["yield",$$[$0]];
break;
case 39:
this.$ = ["return",$$[$0]];
break;
case 40:
this.$ = ["throw",$$[$0]];
break;
case 41:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 43:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 44:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 46: case 47:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = [$$[$0],$$[$0-1]];
break;
case 50: case 51: case 52: case 53: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 54:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 55: case 109:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 56: case 108: case 110: case 113: case 120: case 122:
this.$ = [$$[$0]];
break;
case 57: case 97:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 58:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 74:
this.$ = ["-",$$[$0]];
break;
case 76:
this.$ = ["!", [".",$$[$0]]];
break;
case 77:
this.$ = ["await", [".",$$[$0]]]
break;
case 78:
this.$ = [".", $$[$0]];
break;
case 79: case 80: case 104: case 107: case 112: case 119: case 121:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 82:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 83:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 84:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 85:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 86:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 87:
this.$= ["parentheses",$$[$0-1]];
break;
case 88:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 90:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 91: case 92:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 93: case 94: case 95:
this.$ = yytext;
break;
case 96:
this.$ = [$$[$0-2],"[]"];
break;
case 101:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 102:
this.$ = ["default_parameter",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 103:
this.$ = [$$[$0-1],$$[$0]];
break;
case 106:
this.$= []
break;
case 111:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 114:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 115:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 116:
this.$ = ["else",$$[$0]];
break;
case 117:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 118:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 123:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},{1:[3]},{5:[1,25]},o($Vf,[2,3],{6:3,26:5,14:6,39:11,37:17,55:18,11:20,4:26,12:$V0,13:$V1,16:$V2,25:$V3,28:$V4,33:$V5,35:$V6,36:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,91:$Vc,95:$Vd,101:$Ve}),{16:[1,27]},{27:[1,28]},o($Vg,[2,18]),{29:[1,29]},{29:[1,30]},{29:[1,31]},{29:[1,32]},o($Vg,[2,23]),o([15,19,20,21],$Vh,{40:[1,33]}),{51:[1,34]},{16:$Vi,29:$Vj,30:35,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:49,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vq,37:50,91:$Vc,95:$Vd},{16:[1,52],22:53},{49:[1,54]},{16:$Vr,49:[1,55],56:[1,56],57:[1,57],58:[1,58],59:[1,59],60:[1,60],61:[1,61],62:[1,62],75:$Vs,88:[1,63]},{15:[1,65],19:[1,66],20:[1,67],21:[1,68]},{29:[1,69]},o($Vt,[2,98]),o([16,65,77,97],$Vu),o([15,16,19,20,21,40,91,95],[2,9]),{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,16]),o($Vg,[2,17]),{16:$Vi,29:$Vj,30:70,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:71,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$V2,26:72,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd},{16:$Vq,37:73,91:$Vc,95:$Vd},{16:$Vq,37:74,42:[1,75],91:$Vc,95:$Vd},{16:$Vi,29:$Vj,30:76,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($Vv,[2,39],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VL,[2,73],{62:$VM}),{16:$Vi,29:$Vj,30:93,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($VL,[2,75]),{16:$Vq,37:94,91:[1,95],95:$Vd},{16:$Vi,29:$Vj,55:45,63:96,67:$Vk,83:97,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,55:45,63:98,67:$Vk,83:97,87:43,90:$Vo,93:$Vp},o($VL,[2,78]),o($VL,[2,81],{29:[1,100],62:[1,99]}),{16:$Vi,29:$Vj,30:101,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($VN,[2,89]),o($VN,[2,93]),o($VN,$VO,{88:$VP}),o($VN,[2,95]),o($Vv,[2,40],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),{16:[1,103],22:104},o($Vt,$Vr,{75:$Vs,88:[1,105]}),o($Vv,$VQ,{49:[1,106],65:$VR}),o($Vv,[2,45]),{16:$Vi,29:$Vj,30:108,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:109,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($Vv,[2,48]),o($Vv,[2,49]),{16:$Vi,29:$Vj,30:110,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:111,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:112,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:113,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,55:45,63:114,67:$Vk,83:97,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:117,54:116,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,89:$VS,90:$Vo,93:$Vp},{16:$Vq,37:119,91:$Vc,94:118,95:$Vd},{16:[1,120]},{15:[1,121]},{16:[1,122]},{16:[1,123]},{16:$Vi,29:$Vj,30:124,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{31:[1,125],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{31:[1,126],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{27:[1,127]},{16:[1,128]},{16:[1,129]},{16:$Vq,37:130,91:$Vc,95:$Vd},o($Vv,[2,38],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),{16:$Vi,29:$Vj,30:131,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:132,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:133,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:134,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:135,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:136,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:137,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:138,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:139,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:140,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:141,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:142,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:143,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:144,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:145,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,55:45,63:146,67:$Vk,83:97,87:43,90:$Vo,93:$Vp},o($VL,[2,74]),{17:[1,147],29:[1,148]},o([17,29],$Vu,{75:[1,149]}),o($VL,[2,76]),{62:$VM},o($VL,[2,77]),{16:$Vi,29:$Vj,55:45,63:150,67:$Vk,83:97,87:43,90:$Vo,93:$Vp},{16:[1,155],29:$Vj,30:117,31:[1,151],54:153,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,92:152,93:$Vp,98:154},{31:[1,156],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{16:$Vi,29:$Vj,30:117,54:116,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($Vv,$VQ,{49:[1,157],65:$VR}),o($Vv,[2,42]),{89:$VS},{16:$Vi,17:[1,158],29:$Vj,30:159,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$VT,22:160},o($Vv,[2,46],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($Vv,[2,47],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($Vv,[2,50],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($Vv,[2,51],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($Vv,[2,52],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($Vv,[2,53],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($Vv,[2,54]),o($Vt,[2,96]),{89:[1,162]},o($VU,[2,108],{65:[1,163],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),{77:[1,164]},{65:[1,165],77:[2,113]},{17:[1,166],23:[1,167],24:[1,168]},{16:[1,169]},{17:[1,170]},{17:[1,171]},{31:[1,172],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{16:$V2,17:$VV,26:175,32:173,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd},{17:[1,176]},{16:$Vi,29:$Vj,30:177,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{38:[1,178]},{29:[1,179]},{16:[1,180]},{45:[1,181],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},o($VW,[2,59],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VW,[2,60],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VW,[2,61],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VX,[2,62],{78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VX,[2,63],{78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VX,[2,64],{78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VX,[2,65],{78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VX,[2,66],{78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VX,[2,67],{78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($VY,[2,68],{80:$VI,81:$VJ,82:$VK}),o($VY,[2,69],{80:$VI,81:$VJ,82:$VK}),o($VL,[2,70]),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,79]),{16:$Vi,18:[1,182],29:$Vj,30:117,54:183,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:117,31:[1,184],54:185,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vq,37:186,91:$Vc,95:$Vd},o($VL,[2,80]),o($VN,[2,90]),{31:[1,187],65:[1,188]},{31:[1,189]},o($VZ,[2,110]),o([29,31,62,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$VO,{45:$V_,88:$VP}),o($VN,[2,87]),{16:$Vi,29:$Vj,30:191,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vi,29:$Vj,30:117,54:192,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($Vv,[2,44],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($V$,[2,119]),o($V$,$VQ,{65:$VR}),o([18,27,29,31,45,49,62,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89],[2,82]),{16:$Vi,29:$Vj,30:117,54:193,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($Vt,[2,97]),{16:$Vq,37:119,91:$Vc,94:194,95:$Vd},{7:195,8:196,10:197,11:198,12:$V01,13:$V1},{16:[1,200]},{16:[1,201]},{17:[1,202]},{7:203,8:196,10:197,11:198,12:$V01,13:$V1},{16:$VT,22:204},{16:$V2,17:$VV,26:175,32:205,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd},o($Vg,[2,19]),{4:207,6:3,9:206,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},{27:[1,208]},{34:209,43:211,44:$V11,47:210},{27:[1,213],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{16:[1,214]},{16:$Vq,31:$V21,37:217,41:215,91:$Vc,95:$Vd,96:216},{29:[1,218]},{16:$Vi,29:$Vj,30:219,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($V31,[2,83]),{18:[1,220]},o($V31,[2,85]),{31:[1,221]},{65:[1,222]},o($VN,[2,91]),{16:[1,224],98:223},o($VN,[2,92]),{16:$Vi,29:$Vj,30:225,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($Vv,[2,41],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),{18:[1,226]},o($VU,[2,107]),{77:[2,112]},{18:[1,227]},{18:[2,4]},{8:228,10:197,11:198,12:$V01,13:$V1,18:[2,7]},{16:$Vq,37:229,40:[1,230],91:$Vc,95:$Vd},o([16,40,91,95],$Vh),{17:[1,231]},{17:[1,232]},{7:233,8:196,10:197,11:198,12:$V01,13:$V1},{18:[1,234]},{18:[1,235]},o($Vg,[2,118],{99:236,100:$V41}),{18:[1,238]},o([18,46],[2,5]),o($V51,[2,124]),{18:[1,239]},{18:[2,30],48:[1,240]},o($V61,[2,28],{43:211,47:241,44:$V11}),{16:$Vi,29:$Vj,30:242,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$V2,26:243,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd},{31:[1,244]},{31:[1,245]},{31:[2,105],65:[1,246]},{16:[1,248],97:[1,247]},{16:$Vq,31:$V21,37:217,41:249,91:$Vc,95:$Vd,96:216},o([18,27,31,45,65,89],[2,58],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($V31,[2,84]),o($V31,[2,86]),{16:$Vq,37:250,91:$Vc,95:$Vd},o($VZ,[2,109]),{45:$V_},o($VZ,[2,111],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($Vv,[2,43]),o($Vg,[2,10]),{18:[2,6]},{16:[1,251]},{16:$Vq,37:252,91:$Vc,95:$Vd},{7:253,8:196,10:197,11:198,12:$V01,13:$V1},{7:254,8:196,10:197,11:198,12:$V01,13:$V1},{18:[1,255]},o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,117]),{16:$V2,17:$VV,26:175,32:257,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:[1,256]},o($V51,[2,123]),o($Vg,[2,20]),{45:[1,258]},o($V61,[2,27]),{45:[1,259],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{31:[1,260]},{16:$V2,17:$VV,26:175,32:261,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd},{17:[1,262]},{16:$Vq,31:$V21,37:217,41:263,91:$Vc,95:$Vd,96:216},{16:[1,264]},o($VZ,[2,103],{49:[1,265]}),{31:[1,266]},{77:[1,267]},{27:[1,269],29:[1,270],49:[1,268]},{16:[1,271]},{18:[1,272]},{18:[1,273]},o($Vg,[2,11]),{29:[1,274]},o($Vg,[2,116]),{4:207,6:3,9:275,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},{4:207,6:3,9:276,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},{16:$V2,17:$VV,26:175,32:277,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd},o($Vg,[2,22]),{4:207,6:3,9:278,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},{31:[2,104]},o($VZ,[2,101]),{16:$Vi,29:$Vj,30:279,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{17:[1,280]},{17:[1,281]},{16:$Vi,29:$Vj,30:282,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},o($V71,[2,32]),{16:$Vq,31:$V21,37:217,41:283,91:$Vc,95:$Vd,96:216},{29:[1,285],49:[1,284]},o($Vg,[2,14]),o($Vg,[2,15]),{16:$Vi,29:$Vj,30:286,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{18:[2,29]},{46:[1,287]},o($Vg,[2,21]),{18:[1,288]},o($VZ,[2,102],{68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),{4:207,6:3,9:289,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},{17:$V81,64:290,66:291},{27:[1,293],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{31:[1,294]},{16:$Vi,29:$Vj,30:295,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{16:$Vq,31:$V21,37:217,41:296,91:$Vc,95:$Vd,96:216},{31:[1,297],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{27:[1,298]},o($Vg,[2,24]),{18:[1,299]},{18:[1,300],65:[1,301]},o($V91,[2,56]),{67:[1,302]},o($V71,[2,31]),{17:[1,304],27:[1,303]},{27:[1,305],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},{31:[1,306]},{16:$V2,17:$VV,26:175,32:307,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd},o([18,44,48],[2,26]),o($Vg,[2,25]),o($VN,[2,88]),{17:$V81,66:308},{65:[1,309]},o($V71,[2,35]),{4:207,6:3,9:310,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},o($V71,[2,33]),{17:[1,312],27:[1,311]},o($Vg,[2,115],{99:313,100:$V41}),o($V91,[2,55]),{16:$Vi,29:$Vj,30:314,55:45,63:42,67:$Vk,79:$Vl,83:36,84:38,85:$Vm,86:$Vn,87:43,90:$Vo,93:$Vp},{18:[1,315]},o($V71,[2,34]),{4:207,6:3,9:316,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,91:$Vc,95:$Vd,101:$Ve},o($Vg,[2,114]),{18:[1,317],68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK},o($V71,[2,37]),{18:[1,318]},o($V91,[2,57]),o($V71,[2,36])],
defaultActions: {25:[2,1],194:[2,112],196:[2,4],228:[2,6],263:[2,104],275:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 93
break;
case 2:return 67
break;
case 3:return "class"
break;
case 4:return "yield"
break;
case 5:return "await"
break;
case 6:return "public"
break;
case 7:return "extends"
break;
case 8:return "default"
break;
case 9:return "import"
break;
case 10:return "implements"
break;
case 11:return "Dictionary"
break;
case 12:return "private"
break;
case 13:return "static"
break;
case 14:return "if"
break;
case 15:return "in"
break;
case 16:return "else"
break;
case 17:return "return"
break;
case 18:return "throw"
break;
case 19:return "while"
break;
case 20:return "switch"
break;
case 21:return "async"
break;
case 22:return "foreach"
break;
case 23:return "for"
break;
case 24:return "new"
break;
case 25:return 73
break;
case 26:return 85
break;
case 27:return 65
break;
case 28:return 27
break;
case 29:return 62
break;
case 30:return 45
break;
case 31:return 71
break;
case 32:return 70
break;
case 33:return 76
break;
case 34:return 77
break;
case 35:return 74
break;
case 36:return 75
break;
case 37:return 72
break;
case 38:return 49
break;
case 39:return 82
break;
case 40:return 60
break;
case 41:return 80
break;
case 42:return 61
break;
case 43:return 81
break;
case 44:return 59
break;
case 45:return 57
break;
case 46:return 79
break;
case 47:return 56
break;
case 48:return 58
break;
case 49:return 78
break;
case 50:return '^'
break;
case 51:return 68
break;
case 52:return 17
break;
case 53:return 18
break;
case 54:return 88
break;
case 55:return 89
break;
case 56:return 29
break;
case 57:return 31
break;
case 58:return 16
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:yield\b)/,/^(?:await\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:default\b)/,/^(?:import\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:throw\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:async\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_sharp_parser;
exports.Parser = c_sharp_parser.Parser;
exports.parse = function () { return c_sharp_parser.parse.apply(c_sharp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}