/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_sharp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,23],$V2=[1,18],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,22],$Vc=[1,21],$Vd=[1,20],$Ve=[5,18,45],$Vf=[5,12,13,16,18,27,32,34,35,45,49,50,51,52,91,95,101],$Vg=[2,8],$Vh=[1,45],$Vi=[1,42],$Vj=[1,46],$Vk=[1,35],$Vl=[1,38],$Vm=[1,39],$Vn=[1,37],$Vo=[1,44],$Vp=[1,49],$Vq=[2,99],$Vr=[1,62],$Vs=[16,17,28,64,76,97],$Vt=[2,98],$Vu=[26,30],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,89],$VK=[18,26,30,44,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VL=[1,90],$VM=[1,98],$VN=[18,26,28,30,44,61,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,89],$VO=[2,93],$VP=[1,100],$VQ=[2,121],$VR=[1,105],$VS=[1,113],$VT=[1,116],$VU=[1,148],$VV=[1,161],$VW=[1,175],$VX=[18,26,30,44,64,67,68,69,70],$VY=[18,26,30,44,64,67,68,69,70,71,72,73,74,75,76],$VZ=[18,26,30,44,64,67,68,69,70,71,72,73,74,75,76,77,78],$V_=[30,64],$V$=[18,30],$V01=[1,192],$V11=[18,26,30],$V21=[1,201],$V31=[1,214],$V41=[2,105],$V51=[18,26,30,44,61,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$V61=[1,240],$V71=[5,12,13,16,18,27,32,34,35,45,49,50,51,52,91,95,100,101],$V81=[18,47],$V91=[12,13,18],$Va1=[1,295],$Vb1=[18,64];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"statement_with_semicolon":25,";":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"switch":32,"case_statements":33,"for":34,"foreach":35,"type":36,"in":37,"if_statement":38,"static":39,"parameters":40,"async":41,"case_statement":42,"case":43,":":44,"break":45,"case_statements_":46,"default":47,"=":48,"yield":49,"return":50,"throw":51,"final":52,"exprs":53,"access_array":54,"++":55,"--":56,"+=":57,"-=":58,"*=":59,"/=":60,".":61,"dot_expr":62,"key_values":63,",":64,"key_value":65,"STRING_LITERAL":66,"?":67,"is":68,"||":69,"&&":70,"==":71,"!=":72,"<=":73,"<":74,">=":75,">":76,"+":77,"-":78,"*":79,"/":80,"%":81,"initializer_list":82,"not_expr":83,"!":84,"await":85,"parentheses_expr":86,"[":87,"access_arr":88,"]":89,"new":90,"Dictionary":91,"named_parameters":92,"NUMBER":93,"types":94,"Object":95,"parameter":96,"...":97,"named_parameter":98,"elif":99,"else":100,"if":101,"add":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",26:";",27:"while",28:"(",30:")",32:"switch",34:"for",35:"foreach",37:"in",39:"static",41:"async",43:"case",44:":",45:"break",47:"default",48:"=",49:"yield",50:"return",51:"throw",52:"final",55:"++",56:"--",57:"+=",58:"-=",59:"*=",60:"/=",61:".",64:",",66:"STRING_LITERAL",67:"?",68:"is",69:"||",70:"&&",71:"==",72:"!=",73:"<=",74:"<",75:">=",76:">",77:"+",78:"-",79:"*",80:"/",81:"%",84:"!",85:"await",87:"[",89:"]",90:"new",91:"Dictionary",93:"NUMBER",95:"Object",97:"...",100:"else",101:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[6,2],[6,1],[6,5],[6,7],[6,9],[6,8],[6,1],[6,10],[6,11],[42,6],[46,2],[46,1],[33,4],[33,1],[10,6],[10,4],[10,7],[10,8],[10,7],[10,10],[10,9],[25,3],[25,2],[25,2],[25,5],[25,3],[25,6],[25,4],[25,2],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[63,3],[63,1],[65,5],[29,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[83,2],[83,2],[83,1],[62,3],[62,3],[62,1],[54,4],[82,4],[82,5],[82,4],[82,5],[86,3],[86,10],[86,1],[86,3],[86,4],[86,4],[86,1],[86,1],[86,1],[36,3],[36,4],[36,1],[36,1],[36,1],[96,3],[96,4],[96,2],[40,3],[40,1],[40,0],[88,3],[88,1],[53,3],[53,1],[92,3],[92,1],[98,3],[94,3],[94,1],[99,7],[99,6],[99,2],[38,6],[38,5],[22,3],[22,1],[102,3],[102,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 26:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 27: case 80: case 104: case 107:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 125:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 28:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 30:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 31:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 32:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 33:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 34:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 35:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 36:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 37:
this.$ = ["yield",$$[$0]];
break;
case 38:
this.$ = ["return",$$[$0]];
break;
case 39:
this.$ = ["throw",$$[$0]];
break;
case 40:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 42:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 43:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 45: case 46:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 47: case 48:
this.$ = [$$[$0],$$[$0-1]];
break;
case 49: case 50: case 51: case 52: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 53:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 54: case 110:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 55: case 109: case 111: case 114: case 121: case 123:
this.$ = [$$[$0]];
break;
case 56: case 96:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 57:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 73:
this.$ = ["-",$$[$0]];
break;
case 75:
this.$ = ["!", [".",$$[$0]]];
break;
case 76:
this.$ = ["await", [".",$$[$0]]]
break;
case 77:
this.$ = [".", $$[$0]];
break;
case 78: case 79: case 103: case 106: case 108: case 113: case 120: case 122:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 81:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 82:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 83:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 84:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 85:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 86:
this.$= ["parentheses",$$[$0-1]];
break;
case 87:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 89:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 90: case 91:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 92: case 93: case 94:
this.$ = yytext;
break;
case 95:
this.$ = [$$[$0-2],"[]"];
break;
case 100:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 101:
this.$ = ["default_parameter",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 102:
this.$ = [$$[$0-1],$$[$0]];
break;
case 105:
this.$= []
break;
case 112:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 115:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 116:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 117:
this.$ = ["else",$$[$0]];
break;
case 118:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 119:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 124:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},{1:[3]},{5:[1,24]},o($Ve,[2,3],{6:3,25:4,14:5,38:10,36:16,54:17,11:19,4:25,12:$V0,13:$V1,16:$V2,27:$V3,32:$V4,34:$V5,35:$V6,49:$V7,50:$V8,51:$V9,52:$Va,91:$Vb,95:$Vc,101:$Vd}),{26:[1,26]},o($Vf,[2,17]),{28:[1,27]},{28:[1,28]},{28:[1,29]},{28:[1,30]},o($Vf,[2,22]),o([15,19,20,21],$Vg,{39:[1,31]}),{50:[1,32]},{16:$Vh,28:$Vi,29:33,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:47,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vp,36:48,91:$Vb,95:$Vc},{16:[1,50],22:51},{48:[1,52]},{16:$Vq,48:[1,53],55:[1,54],56:[1,55],57:[1,56],58:[1,57],59:[1,58],60:[1,59],61:[1,60],74:$Vr,87:[1,61]},{15:[1,63],19:[1,64],20:[1,65],21:[1,66]},{28:[1,67]},o($Vs,[2,97]),o([16,64,76,97],$Vt),o([15,16,19,20,21,39,91,95],[2,9]),{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,16]),{16:$Vh,28:$Vi,29:68,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:69,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$V2,25:70,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc},{16:$Vp,36:71,91:$Vb,95:$Vc},{16:$Vp,36:72,41:[1,73],91:$Vb,95:$Vc},{16:$Vh,28:$Vi,29:74,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($Vu,[2,38],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VK,[2,72],{61:$VL}),{16:$Vh,28:$Vi,29:91,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($VK,[2,74]),{16:$Vp,36:92,91:[1,93],95:$Vc},{16:$Vh,28:$Vi,54:43,62:94,66:$Vj,82:95,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,54:43,62:96,66:$Vj,82:95,86:41,90:$Vn,93:$Vo},o($VK,[2,77]),o($VK,[2,80],{28:$VM,61:[1,97]}),{16:$Vh,28:$Vi,29:99,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($VN,[2,88]),o($VN,[2,92]),o($VN,$VO,{87:$VP}),o($VN,[2,94]),o($Vu,[2,39],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),{16:[1,101],22:102},o($Vs,$Vq,{74:$Vr,87:[1,103]}),o($Vu,$VQ,{48:[1,104],64:$VR}),o($Vu,[2,44]),{16:$Vh,28:$Vi,29:106,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:107,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($Vu,[2,47]),o($Vu,[2,48]),{16:$Vh,28:$Vi,29:108,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:109,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:110,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:111,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,54:43,62:112,66:$Vj,82:95,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,54:43,66:$Vj,86:115,88:114,89:$VS,90:$VT,93:$Vo},{16:$Vp,36:118,91:$Vb,94:117,95:$Vc},{16:[1,119]},{15:[1,120]},{16:[1,121]},{16:[1,122]},{16:$Vh,28:$Vi,29:123,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{30:[1,124],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{30:[1,125],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{26:[1,126]},{16:[1,127]},{16:[1,128]},{16:$Vp,36:129,91:$Vb,95:$Vc},o($Vu,[2,37],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),{16:$Vh,28:$Vi,29:130,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:131,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:132,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:133,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:134,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:135,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:136,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:137,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:138,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:139,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:140,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:141,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:142,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:143,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:144,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,54:43,62:145,66:$Vj,82:95,86:41,90:$Vn,93:$Vo},o($VK,[2,73]),{17:[1,146],28:[1,147]},o([17,28],$Vt,{74:$VU}),o($VK,[2,75]),{61:$VL},o($VK,[2,76]),{16:$Vh,28:$Vi,54:43,62:149,66:$Vj,82:95,86:41,90:$Vn,93:$Vo},{16:[1,155],28:$Vi,29:154,30:[1,150],53:152,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,92:151,93:$Vo,98:153},{30:[1,156],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{16:$Vh,28:$Vi,54:43,66:$Vj,86:115,88:114,90:$VT,93:$Vo},o($Vu,$VQ,{48:[1,157],64:$VR}),o($Vu,[2,41]),{89:$VS},{16:$Vh,17:[1,158],28:$Vi,29:159,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$VV,22:160},o($Vu,[2,45],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vu,[2,46],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vu,[2,49],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vu,[2,50],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vu,[2,51],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vu,[2,52],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vu,[2,53]),o($Vs,[2,95]),{89:[1,162]},{28:$VM,64:[1,163],89:[2,107]},{91:[1,164]},{76:[1,165]},{64:[1,166],76:[2,114]},{17:[1,167],23:[1,168],24:[1,169]},{16:[1,170]},{17:[1,171]},{17:[1,172]},{30:[1,173],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{16:$V2,17:$VW,25:176,31:174,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc},{17:[1,177]},{16:$Vh,28:$Vi,29:178,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{37:[1,179]},{28:[1,180]},{16:[1,181]},{44:[1,182],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},o($VX,[2,58],{71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VX,[2,59],{71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VX,[2,60],{71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VY,[2,61],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VY,[2,62],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VY,[2,63],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VY,[2,64],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VY,[2,65],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VY,[2,66],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($VZ,[2,67],{79:$VH,80:$VI,81:$VJ}),o($VZ,[2,68],{79:$VH,80:$VI,81:$VJ}),o($VK,[2,69]),o($VK,[2,70]),o($VK,[2,71]),o($VK,[2,78]),{16:$Vh,18:[1,183],28:$Vi,29:154,53:184,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:154,30:[1,185],53:186,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vp,36:187,91:$Vb,95:$Vc},o($VK,[2,79]),o($VN,[2,89]),{30:[1,188],64:[1,189]},{30:[1,190]},o($V_,[2,111]),o($V$,[2,109],{64:[1,191],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o([28,30,61,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VO,{44:$V01,87:$VP}),o($VN,[2,86]),{16:$Vh,28:$Vi,29:193,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:154,53:194,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($Vu,[2,43],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($V11,[2,120]),o($V11,$VQ,{64:$VR}),o([18,26,28,30,44,48,61,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,89],[2,81]),{16:$Vh,28:$Vi,54:43,66:$Vj,86:115,88:195,90:$VT,93:$Vo},{74:$VU},o($Vs,[2,96]),{16:$Vp,36:118,91:$Vb,94:196,95:$Vc},{7:197,8:198,10:199,11:200,12:$V21,13:$V1},{16:[1,202]},{16:[1,203]},{17:[1,204]},{7:205,8:198,10:199,11:200,12:$V21,13:$V1},{16:$VV,22:206},{16:$V2,17:$VW,25:176,31:207,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc},o($Vf,[2,18]),{4:209,6:3,9:208,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},{26:[1,210]},{33:211,42:213,43:$V31,46:212},{26:[1,215],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{16:[1,216]},{16:$Vp,30:$V41,36:219,40:217,91:$Vb,95:$Vc,96:218},{28:[1,220]},{16:$Vh,28:$Vi,29:221,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($V51,[2,82]),{18:[1,222]},o($V51,[2,84]),{30:[1,223]},{64:[1,224]},o($VN,[2,90]),{16:[1,226],98:225},o($VN,[2,91]),{16:$Vh,28:$Vi,29:154,53:227,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vh,28:$Vi,29:228,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($Vu,[2,40],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),{18:[1,229]},{89:[2,106]},{76:[2,113]},{18:[1,230]},{18:[2,4]},{8:231,10:199,11:200,12:$V21,13:$V1,18:[2,7]},{16:$Vp,36:232,39:[1,233],91:$Vb,95:$Vc},o([16,39,91,95],$Vg),{17:[1,234]},{17:[1,235]},{7:236,8:198,10:199,11:200,12:$V21,13:$V1},{18:[1,237]},{18:[1,238]},o($Vf,[2,119],{99:239,100:$V61}),{18:[1,241]},o([18,45],[2,5]),o($V71,[2,125]),{18:[1,242]},{18:[2,29],47:[1,243]},o($V81,[2,27],{42:213,46:244,43:$V31}),{16:$Vh,28:$Vi,29:245,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$V2,25:246,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc},{30:[1,247]},{30:[1,248]},{30:[2,104],64:[1,249]},{16:[1,251],97:[1,250]},{16:$Vp,30:$V41,36:219,40:252,91:$Vb,95:$Vc,96:218},o([18,26,30,44,64],[2,57],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($V51,[2,83]),o($V51,[2,85]),{16:$Vp,36:253,91:$Vb,95:$Vc},o($V_,[2,110]),{44:$V01},o($V$,[2,108]),o($V_,[2,112],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o($Vu,[2,42]),o($Vf,[2,10]),{18:[2,6]},{16:[1,254]},{16:$Vp,36:255,91:$Vb,95:$Vc},{7:256,8:198,10:199,11:200,12:$V21,13:$V1},{7:257,8:198,10:199,11:200,12:$V21,13:$V1},{18:[1,258]},o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,118]),{16:$V2,17:$VW,25:176,31:260,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:[1,259]},o($V71,[2,124]),o($Vf,[2,19]),{44:[1,261]},o($V81,[2,26]),{44:[1,262],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{30:[1,263]},{16:$V2,17:$VW,25:176,31:264,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc},{17:[1,265]},{16:$Vp,30:$V41,36:219,40:266,91:$Vb,95:$Vc,96:218},{16:[1,267]},o($V_,[2,102],{48:[1,268]}),{30:[1,269]},{76:[1,270]},{26:[1,272],28:[1,273],48:[1,271]},{16:[1,274]},{18:[1,275]},{18:[1,276]},o($Vf,[2,11]),{28:[1,277]},o($Vf,[2,117]),{4:209,6:3,9:278,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},{4:209,6:3,9:279,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},{16:$V2,17:$VW,25:176,31:280,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc},o($Vf,[2,21]),{4:209,6:3,9:281,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},{30:[2,103]},o($V_,[2,100]),{16:$Vh,28:$Vi,29:282,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{17:[1,283]},{17:[1,284]},{16:$Vh,28:$Vi,29:285,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},o($V91,[2,31]),{16:$Vp,30:$V41,36:219,40:286,91:$Vb,95:$Vc,96:218},{28:[1,288],48:[1,287]},o($Vf,[2,14]),o($Vf,[2,15]),{16:$Vh,28:$Vi,29:289,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{18:[2,28]},{45:[1,290]},o($Vf,[2,20]),{18:[1,291]},o($V_,[2,101],{67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),{4:209,6:3,9:292,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},{17:$Va1,63:293,65:294},{26:[1,296],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{30:[1,297]},{16:$Vh,28:$Vi,29:298,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{16:$Vp,30:$V41,36:219,40:299,91:$Vb,95:$Vc,96:218},{30:[1,300],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{26:[1,301]},o($Vf,[2,23]),{18:[1,302]},{18:[1,303],64:[1,304]},o($Vb1,[2,55]),{66:[1,305]},o($V91,[2,30]),{17:[1,307],26:[1,306]},{26:[1,308],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},{30:[1,309]},{16:$V2,17:$VW,25:176,31:310,36:16,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc},o([18,43,47],[2,25]),o($Vf,[2,24]),o($VN,[2,87]),{17:$Va1,65:311},{64:[1,312]},o($V91,[2,34]),{4:209,6:3,9:313,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},o($V91,[2,32]),{17:[1,315],26:[1,314]},o($Vf,[2,116],{99:316,100:$V61}),o($Vb1,[2,54]),{16:$Vh,28:$Vi,29:317,54:43,62:40,66:$Vj,78:$Vk,82:34,83:36,84:$Vl,85:$Vm,86:41,90:$Vn,93:$Vo},{18:[1,318]},o($V91,[2,33]),{4:209,6:3,9:319,11:19,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:16,38:10,49:$V7,50:$V8,51:$V9,52:$Va,54:17,91:$Vb,95:$Vc,101:$Vd},o($Vf,[2,115]),{18:[1,320],67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ},o($V91,[2,36]),{18:[1,321]},o($Vb1,[2,56]),o($V91,[2,35])],
defaultActions: {24:[2,1],195:[2,106],196:[2,113],198:[2,4],231:[2,6],266:[2,103],278:[2,28]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 93
break;
case 2:return 66
break;
case 3:return "class"
break;
case 4:return "yield"
break;
case 5:return "await"
break;
case 6:return "public"
break;
case 7:return "extends"
break;
case 8:return "implements"
break;
case 9:return "Dictionary"
break;
case 10:return "private"
break;
case 11:return "static"
break;
case 12:return "if"
break;
case 13:return "in"
break;
case 14:return "else"
break;
case 15:return "return"
break;
case 16:return "throw"
break;
case 17:return "while"
break;
case 18:return "switch"
break;
case 19:return "async"
break;
case 20:return "foreach"
break;
case 21:return "for"
break;
case 22:return "new"
break;
case 23:return 72
break;
case 24:return 84
break;
case 25:return 64
break;
case 26:return 26
break;
case 27:return 61
break;
case 28:return 44
break;
case 29:return 70
break;
case 30:return 69
break;
case 31:return 75
break;
case 32:return 76
break;
case 33:return 73
break;
case 34:return 74
break;
case 35:return 71
break;
case 36:return 48
break;
case 37:return 59
break;
case 38:return 79
break;
case 39:return 60
break;
case 40:return 80
break;
case 41:return 81
break;
case 42:return 58
break;
case 43:return 56
break;
case 44:return 78
break;
case 45:return 55
break;
case 46:return 57
break;
case 47:return 77
break;
case 48:return '^'
break;
case 49:return 67
break;
case 50:return 17
break;
case 51:return 18
break;
case 52:return 87
break;
case 53:return 89
break;
case 54:return 28
break;
case 55:return 30
break;
case 56:return 16
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:yield\b)/,/^(?:await\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:throw\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:async\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_sharp_parser;
exports.Parser = c_sharp_parser.Parser;
exports.parse = function () { return c_sharp_parser.parse.apply(c_sharp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}