/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_sharp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,20],$V2=[1,15],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,11],$V7=[1,12],$V8=[1,19],$V9=[1,18],$Va=[1,17],$Vb=[5,18],$Vc=[5,12,13,16,18,27,32,33,40,41,78,82,89],$Vd=[2,8],$Ve=[1,39],$Vf=[1,36],$Vg=[1,40],$Vh=[1,30],$Vi=[1,33],$Vj=[1,32],$Vk=[1,38],$Vl=[1,42],$Vm=[2,88],$Vn=[1,55],$Vo=[16,17,28,53,64,84],$Vp=[2,87],$Vq=[26,30],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[18,26,30,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69],$VG=[1,79],$VH=[1,86],$VI=[18,26,28,30,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,76],$VJ=[2,82],$VK=[1,88],$VL=[2,111],$VM=[1,93],$VN=[1,101],$VO=[1,104],$VP=[1,133],$VQ=[1,146],$VR=[1,160],$VS=[18,26,30,53,56,57,58],$VT=[18,26,30,53,56,57,58,59,60,61,62,63,64],$VU=[18,26,30,53,56,57,58,59,60,61,62,63,64,65,66],$VV=[30,53],$VW=[18,30],$VX=[1,174],$VY=[18,26,30],$VZ=[1,183],$V_=[2,94],$V$=[18,26,30,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69],$V01=[1,216],$V11=[5,12,13,16,18,27,32,33,40,41,78,82,88,89],$V21=[12,13,18],$V31=[1,259],$V41=[18,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"statement_with_semicolon":25,";":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"for":32,"foreach":33,"type":34,"in":35,"if_statement":36,"static":37,"parameters":38,"=":39,"return":40,"final":41,"exprs":42,"access_array":43,"++":44,"--":45,"+=":46,"-=":47,"*=":48,"/=":49,".":50,"dot_expr":51,"key_values":52,",":53,"key_value":54,"STRING_LITERAL":55,"is":56,"||":57,"&&":58,"==":59,"!=":60,"<=":61,"<":62,">=":63,">":64,"+":65,"-":66,"*":67,"/":68,"%":69,"initializer_list":70,"not_expr":71,"!":72,"parentheses_expr":73,"[":74,"access_arr":75,"]":76,"new":77,"Dictionary":78,"named_parameters":79,"NUMBER":80,"types":81,"Object":82,"parameter":83,"...":84,"named_parameter":85,":":86,"elif":87,"else":88,"if":89,"else_statement":90,"add":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",26:";",27:"while",28:"(",30:")",32:"for",33:"foreach",35:"in",37:"static",39:"=",40:"return",41:"final",44:"++",45:"--",46:"+=",47:"-=",48:"*=",49:"/=",50:".",53:",",55:"STRING_LITERAL",56:"is",57:"||",58:"&&",59:"==",60:"!=",61:"<=",62:"<",63:">=",64:">",65:"+",66:"-",67:"*",68:"/",69:"%",72:"!",74:"[",76:"]",77:"new",78:"Dictionary",80:"NUMBER",82:"Object",84:"...",86:":",88:"else",89:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[6,2],[6,1],[6,5],[6,9],[6,8],[6,1],[6,10],[10,6],[10,4],[10,7],[10,8],[10,7],[10,10],[10,9],[25,2],[25,5],[25,3],[25,6],[25,4],[25,2],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[52,3],[52,1],[54,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[71,2],[71,1],[51,3],[51,3],[51,1],[43,4],[70,4],[70,5],[70,4],[70,5],[73,3],[73,10],[73,1],[73,3],[73,4],[73,4],[73,1],[73,1],[73,1],[34,3],[34,4],[34,1],[34,1],[34,1],[83,3],[83,4],[83,2],[38,3],[38,1],[38,0],[75,3],[75,1],[42,3],[42,1],[79,3],[79,1],[85,3],[81,3],[81,1],[87,7],[87,6],[87,1],[90,2],[36,6],[36,5],[22,3],[22,1],[91,3],[91,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 69: case 93: case 96:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 115:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 25:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 26:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 27:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 28:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 29:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 30:
this.$ = ["return",$$[$0]];
break;
case 31:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 33:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 34:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 35:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 36: case 37:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 38: case 39:
this.$ = [$$[$0],$$[$0-1]];
break;
case 40: case 41: case 42: case 43: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 45: case 99:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 46: case 98: case 100: case 103: case 111: case 113:
this.$ = [$$[$0]];
break;
case 47: case 85:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 63:
this.$ = ["-",$$[$0]];
break;
case 65:
this.$ = ["!", [".",$$[$0]]];
break;
case 66:
this.$ = [".", $$[$0]];
break;
case 67: case 68: case 92: case 95: case 97: case 102: case 110: case 112:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 70:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 71:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 72:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 73:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 74:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 75:
this.$= ["parentheses",$$[$0-1]];
break;
case 76:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 78:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 79: case 80:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 81: case 82: case 83:
this.$ = yytext;
break;
case 84:
this.$ = [$$[$0-2],"[]"];
break;
case 89:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 90:
this.$ = ["default_parameter",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 91:
this.$ = [$$[$0-1],$$[$0]];
break;
case 94:
this.$= []
break;
case 101:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 104:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 105:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 107:
this.$ = ["else",$$[$0]];
break;
case 108:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 109:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 114:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:16,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:13,36:9,40:$V6,41:$V7,43:14,78:$V8,82:$V9,89:$Va},{1:[3]},{5:[1,21]},o($Vb,[2,3],{6:3,25:4,14:5,36:9,34:13,43:14,11:16,4:22,12:$V0,13:$V1,16:$V2,27:$V3,32:$V4,33:$V5,40:$V6,41:$V7,78:$V8,82:$V9,89:$Va}),{26:[1,23]},o($Vc,[2,17]),{28:[1,24]},{28:[1,25]},{28:[1,26]},o($Vc,[2,21]),o([15,19,20,21],$Vd,{37:[1,27]}),{16:$Ve,28:$Vf,29:28,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Vl,34:41,78:$V8,82:$V9},{16:[1,43],22:44},{39:[1,45]},{16:$Vm,39:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51],49:[1,52],50:[1,53],62:$Vn,74:[1,54]},{15:[1,56],19:[1,57],20:[1,58],21:[1,59]},{28:[1,60]},o($Vo,[2,86]),o([16,53,64,84],$Vp),o([15,16,19,20,21,37,78,82],[2,9]),{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,16]),{16:$Ve,28:$Vf,29:61,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$V2,25:62,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9},{16:$Vl,34:63,78:$V8,82:$V9},{16:$Vl,34:64,78:$V8,82:$V9},o($Vq,[2,30],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VF,[2,62],{50:$VG}),{16:$Ve,28:$Vf,29:80,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},o($VF,[2,64]),{16:$Vl,34:81,78:[1,82],82:$V9},{16:$Ve,28:$Vf,43:37,51:83,55:$Vg,70:84,73:35,77:$Vj,80:$Vk},o($VF,[2,66]),o($VF,[2,69],{28:$VH,50:[1,85]}),{16:$Ve,28:$Vf,29:87,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},o($VI,[2,77]),o($VI,[2,81]),o($VI,$VJ,{74:$VK}),o($VI,[2,83]),{16:[1,89],22:90},o($Vo,$Vm,{62:$Vn,74:[1,91]}),o($Vq,$VL,{39:[1,92],53:$VM}),o($Vq,[2,35]),{16:$Ve,28:$Vf,29:94,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:95,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},o($Vq,[2,38]),o($Vq,[2,39]),{16:$Ve,28:$Vf,29:96,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:97,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:98,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:99,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,43:37,51:100,55:$Vg,70:84,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,43:37,55:$Vg,73:103,75:102,76:$VN,77:$VO,80:$Vk},{16:$Vl,34:106,78:$V8,81:105,82:$V9},{16:[1,107]},{15:[1,108]},{16:[1,109]},{16:[1,110]},{16:$Ve,28:$Vf,29:111,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{30:[1,112],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},{26:[1,113]},{16:[1,114]},{16:[1,115]},{16:$Ve,28:$Vf,29:116,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:117,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:118,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:119,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:120,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:121,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:122,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:123,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:124,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:125,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:126,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:127,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:128,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:129,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,43:37,51:130,55:$Vg,70:84,73:35,77:$Vj,80:$Vk},o($VF,[2,63]),{17:[1,131],28:[1,132]},o([17,28],$Vp,{62:$VP}),o($VF,[2,65]),{50:$VG},{16:$Ve,28:$Vf,43:37,51:134,55:$Vg,70:84,73:35,77:$Vj,80:$Vk},{16:[1,140],28:$Vf,29:139,30:[1,135],42:137,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,79:136,80:$Vk,85:138},{30:[1,141],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},{16:$Ve,28:$Vf,43:37,55:$Vg,73:103,75:102,77:$VO,80:$Vk},o($Vq,$VL,{39:[1,142],53:$VM}),o($Vq,[2,32]),{76:$VN},{16:$Ve,17:[1,143],28:$Vf,29:144,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$VQ,22:145},o($Vq,[2,36],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($Vq,[2,37],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($Vq,[2,40],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($Vq,[2,41],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($Vq,[2,42],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($Vq,[2,43],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($Vq,[2,44]),o($Vo,[2,84]),{76:[1,147]},{28:$VH,53:[1,148],76:[2,96]},{78:[1,149]},{64:[1,150]},{53:[1,151],64:[2,103]},{17:[1,152],23:[1,153],24:[1,154]},{16:[1,155]},{17:[1,156]},{17:[1,157]},{30:[1,158],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},{16:$V2,17:$VR,25:161,31:159,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9},{16:$Ve,28:$Vf,29:162,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{35:[1,163]},{28:[1,164]},o($VS,[2,48],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VS,[2,49],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VS,[2,50],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VT,[2,51],{65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VT,[2,52],{65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VT,[2,53],{65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VT,[2,54],{65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VT,[2,55],{65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VT,[2,56],{65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VU,[2,57],{67:$VC,68:$VD,69:$VE}),o($VU,[2,58],{67:$VC,68:$VD,69:$VE}),o($VF,[2,59]),o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,67]),{16:$Ve,18:[1,165],28:$Vf,29:139,42:166,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:139,30:[1,167],42:168,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Vl,34:169,78:$V8,82:$V9},o($VF,[2,68]),o($VI,[2,78]),{30:[1,170],53:[1,171]},{30:[1,172]},o($VV,[2,100]),o($VW,[2,98],{53:[1,173],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o([28,30,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69],$VJ,{74:$VK,86:$VX}),o($VI,[2,75]),{16:$Ve,28:$Vf,29:175,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:139,42:176,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},o($Vq,[2,34],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($VY,[2,110]),o($VY,$VL,{53:$VM}),o([18,26,28,30,39,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,76],[2,70]),{16:$Ve,28:$Vf,43:37,55:$Vg,73:103,75:177,77:$VO,80:$Vk},{62:$VP},o($Vo,[2,85]),{16:$Vl,34:106,78:$V8,81:178,82:$V9},{7:179,8:180,10:181,11:182,12:$VZ,13:$V1},{16:[1,184]},{16:[1,185]},{17:[1,186]},{7:187,8:180,10:181,11:182,12:$VZ,13:$V1},{16:$VQ,22:188},{16:$V2,17:$VR,25:161,31:189,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9},o($Vc,[2,18]),{4:191,6:3,9:190,11:16,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:13,36:9,40:$V6,41:$V7,43:14,78:$V8,82:$V9,89:$Va},{26:[1,192]},{26:[1,193],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},{16:[1,194]},{16:$Vl,30:$V_,34:197,38:195,78:$V8,82:$V9,83:196},o($V$,[2,71]),{18:[1,198]},o($V$,[2,73]),{30:[1,199]},{53:[1,200]},o($VI,[2,79]),{16:[1,202],85:201},o($VI,[2,80]),{16:$Ve,28:$Vf,29:139,42:203,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Ve,28:$Vf,29:204,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},o($Vq,[2,31],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),{18:[1,205]},{76:[2,95]},{64:[2,102]},{18:[1,206]},{18:[2,4]},{8:207,10:181,11:182,12:$VZ,13:$V1,18:[2,7]},{16:$Vl,34:208,37:[1,209],78:$V8,82:$V9},o([16,37,78,82],$Vd),{17:[1,210]},{17:[1,211]},{7:212,8:180,10:181,11:182,12:$VZ,13:$V1},{18:[1,213]},{18:[1,214]},o($Vc,[2,109],{87:215,90:217,88:$V01}),{18:[1,218]},{18:[2,5]},o($V11,[2,115]),{16:$V2,25:219,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9},{30:[1,220]},{30:[1,221]},{30:[2,93],53:[1,222]},{16:[1,224],84:[1,223]},o($V$,[2,72]),o($V$,[2,74]),{16:$Vl,34:225,78:$V8,82:$V9},o($VV,[2,99]),{86:$VX},o($VW,[2,97]),o($VV,[2,101],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),o($Vq,[2,33]),o($Vc,[2,10]),{18:[2,6]},{16:[1,226]},{16:$Vl,34:227,78:$V8,82:$V9},{7:228,8:180,10:181,11:182,12:$VZ,13:$V1},{7:229,8:180,10:181,11:182,12:$VZ,13:$V1},{18:[1,230]},o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,108]),{16:$V2,17:$VR,25:161,31:232,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9,89:[1,231]},o($Vc,[2,106]),o($V11,[2,114]),{30:[1,233]},{16:$V2,17:$VR,25:161,31:234,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9},{17:[1,235]},{16:$Vl,30:$V_,34:197,38:236,78:$V8,82:$V9,83:196},{16:[1,237]},o($VV,[2,91],{39:[1,238]}),{64:[1,239]},{26:[1,241],28:[1,242],39:[1,240]},{16:[1,243]},{18:[1,244]},{18:[1,245]},o($Vc,[2,11]),{28:[1,246]},o($Vc,[2,107]),{16:$V2,17:$VR,25:161,31:247,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9},o($Vc,[2,20]),{4:191,6:3,9:248,11:16,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:13,36:9,40:$V6,41:$V7,43:14,78:$V8,82:$V9,89:$Va},{30:[2,92]},o($VV,[2,89]),{16:$Ve,28:$Vf,29:249,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{17:[1,250]},{16:$Ve,28:$Vf,29:251,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},o($V21,[2,24]),{16:$Vl,30:$V_,34:197,38:252,78:$V8,82:$V9,83:196},{28:[1,254],39:[1,253]},o($Vc,[2,14]),o($Vc,[2,15]),{16:$Ve,28:$Vf,29:255,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},o($Vc,[2,19]),{18:[1,256]},o($VV,[2,90],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE}),{17:$V31,52:257,54:258},{26:[1,260],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},{30:[1,261]},{16:$Ve,28:$Vf,29:262,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{16:$Vl,30:$V_,34:197,38:263,78:$V8,82:$V9,83:196},{30:[1,264],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},o($Vc,[2,22]),{18:[1,265],53:[1,266]},o($V41,[2,46]),{55:[1,267]},o($V21,[2,23]),{17:[1,269],26:[1,268]},{26:[1,270],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},{30:[1,271]},{16:$V2,17:$VR,25:161,31:272,34:13,40:$V6,41:$V7,43:14,78:$V8,82:$V9},o($VI,[2,76]),{17:$V31,54:273},{53:[1,274]},o($V21,[2,27]),{4:191,6:3,9:275,11:16,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:13,36:9,40:$V6,41:$V7,43:14,78:$V8,82:$V9,89:$Va},o($V21,[2,25]),{17:[1,277],26:[1,276]},o($Vc,[2,105],{90:217,87:278,88:$V01}),o($V41,[2,45]),{16:$Ve,28:$Vf,29:279,43:37,51:34,55:$Vg,66:$Vh,70:29,71:31,72:$Vi,73:35,77:$Vj,80:$Vk},{18:[1,280]},o($V21,[2,26]),{4:191,6:3,9:281,11:16,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:13,36:9,40:$V6,41:$V7,43:14,78:$V8,82:$V9,89:$Va},o($Vc,[2,104]),{18:[1,282],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE},o($V21,[2,29]),{18:[1,283]},o($V41,[2,47]),o($V21,[2,28])],
defaultActions: {21:[2,1],177:[2,95],178:[2,102],180:[2,4],191:[2,5],207:[2,6],236:[2,92]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 80
break;
case 2:return 55
break;
case 3:return "class"
break;
case 4:return "public"
break;
case 5:return "extends"
break;
case 6:return "implements"
break;
case 7:return "Dictionary"
break;
case 8:return "private"
break;
case 9:return "static"
break;
case 10:return "if"
break;
case 11:return "in"
break;
case 12:return "else"
break;
case 13:return "return"
break;
case 14:return "while"
break;
case 15:return "foreach"
break;
case 16:return "for"
break;
case 17:return "new"
break;
case 18:return 60
break;
case 19:return 72
break;
case 20:return 53
break;
case 21:return 26
break;
case 22:return 50
break;
case 23:return 86
break;
case 24:return 58
break;
case 25:return 57
break;
case 26:return 63
break;
case 27:return 64
break;
case 28:return 61
break;
case 29:return 62
break;
case 30:return 59
break;
case 31:return 39
break;
case 32:return 48
break;
case 33:return 67
break;
case 34:return 49
break;
case 35:return 68
break;
case 36:return 69
break;
case 37:return 47
break;
case 38:return 45
break;
case 39:return 66
break;
case 40:return 44
break;
case 41:return 46
break;
case 42:return 65
break;
case 43:return '^'
break;
case 44:return 17
break;
case 45:return 18
break;
case 46:return 74
break;
case 47:return 76
break;
case 48:return 28
break;
case 49:return 30
break;
case 50:return 16
break;
case 51:return 5
break;
case 52:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_sharp_parser;
exports.Parser = c_sharp_parser.Parser;
exports.parse = function () { return c_sharp_parser.parse.apply(c_sharp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}