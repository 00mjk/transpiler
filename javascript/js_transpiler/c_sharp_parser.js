/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_sharp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,22],$V2=[1,17],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,21],$Vb=[1,20],$Vc=[1,19],$Vd=[5,18,45],$Ve=[5,12,13,16,18,27,32,34,35,45,49,50,51,89,93,99],$Vf=[2,8],$Vg=[1,44],$Vh=[1,41],$Vi=[1,45],$Vj=[1,34],$Vk=[1,37],$Vl=[1,38],$Vm=[1,36],$Vn=[1,43],$Vo=[1,47],$Vp=[2,97],$Vq=[1,60],$Vr=[16,17,28,63,74,95],$Vs=[2,96],$Vt=[26,30],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[18,26,30,44,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VJ=[1,87],$VK=[1,95],$VL=[18,26,28,30,44,60,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87],$VM=[2,91],$VN=[1,97],$VO=[2,120],$VP=[1,102],$VQ=[1,110],$VR=[1,113],$VS=[1,144],$VT=[1,157],$VU=[1,171],$VV=[18,26,30,44,63,66,67,68],$VW=[18,26,30,44,63,66,67,68,69,70,71,72,73,74],$VX=[18,26,30,44,63,66,67,68,69,70,71,72,73,74,75,76],$VY=[30,63],$VZ=[18,30],$V_=[1,187],$V$=[18,26,30],$V01=[1,196],$V11=[1,209],$V21=[2,103],$V31=[18,26,30,44,60,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$V41=[1,234],$V51=[5,12,13,16,18,27,32,34,35,45,49,50,51,89,93,98,99],$V61=[18,47],$V71=[12,13,18],$V81=[1,290],$V91=[18,63];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"statement_with_semicolon":25,";":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"switch":32,"case_statements":33,"for":34,"foreach":35,"type":36,"in":37,"if_statement":38,"static":39,"parameters":40,"async":41,"case_statement":42,"case":43,":":44,"break":45,"case_statements_":46,"default":47,"=":48,"yield":49,"return":50,"final":51,"exprs":52,"access_array":53,"++":54,"--":55,"+=":56,"-=":57,"*=":58,"/=":59,".":60,"dot_expr":61,"key_values":62,",":63,"key_value":64,"STRING_LITERAL":65,"is":66,"||":67,"&&":68,"==":69,"!=":70,"<=":71,"<":72,">=":73,">":74,"+":75,"-":76,"*":77,"/":78,"%":79,"initializer_list":80,"not_expr":81,"!":82,"await":83,"parentheses_expr":84,"[":85,"access_arr":86,"]":87,"new":88,"Dictionary":89,"named_parameters":90,"NUMBER":91,"types":92,"Object":93,"parameter":94,"...":95,"named_parameter":96,"elif":97,"else":98,"if":99,"else_statement":100,"add":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",26:";",27:"while",28:"(",30:")",32:"switch",34:"for",35:"foreach",37:"in",39:"static",41:"async",43:"case",44:":",45:"break",47:"default",48:"=",49:"yield",50:"return",51:"final",54:"++",55:"--",56:"+=",57:"-=",58:"*=",59:"/=",60:".",63:",",65:"STRING_LITERAL",66:"is",67:"||",68:"&&",69:"==",70:"!=",71:"<=",72:"<",73:">=",74:">",75:"+",76:"-",77:"*",78:"/",79:"%",82:"!",83:"await",85:"[",87:"]",88:"new",89:"Dictionary",91:"NUMBER",93:"Object",95:"...",98:"else",99:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[6,2],[6,1],[6,5],[6,7],[6,9],[6,8],[6,1],[6,10],[6,11],[42,6],[46,2],[46,1],[33,4],[33,1],[10,6],[10,4],[10,7],[10,8],[10,7],[10,10],[10,9],[25,3],[25,2],[25,5],[25,3],[25,6],[25,4],[25,2],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[62,3],[62,1],[64,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[81,2],[81,2],[81,1],[61,3],[61,3],[61,1],[53,4],[80,4],[80,5],[80,4],[80,5],[84,3],[84,10],[84,1],[84,3],[84,4],[84,4],[84,1],[84,1],[84,1],[36,3],[36,4],[36,1],[36,1],[36,1],[94,3],[94,4],[94,2],[40,3],[40,1],[40,0],[86,3],[86,1],[52,3],[52,1],[90,3],[90,1],[96,3],[92,3],[92,1],[97,7],[97,6],[97,1],[100,2],[38,6],[38,5],[22,3],[22,1],[101,3],[101,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 26:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 27: case 78: case 102: case 105:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 124:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 28:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 30:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 31:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 32:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 33:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 34:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 35:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 36:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 37:
this.$ = ["yield",$$[$0]];
break;
case 38:
this.$ = ["return",$$[$0]];
break;
case 39:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 41:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 42:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 44: case 45:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 46: case 47:
this.$ = [$$[$0],$$[$0-1]];
break;
case 48: case 49: case 50: case 51: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 52:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 53: case 108:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 54: case 107: case 109: case 112: case 120: case 122:
this.$ = [$$[$0]];
break;
case 55: case 94:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 71:
this.$ = ["-",$$[$0]];
break;
case 73:
this.$ = ["!", [".",$$[$0]]];
break;
case 74:
this.$ = ["await", [".",$$[$0]]]
break;
case 75:
this.$ = [".", $$[$0]];
break;
case 76: case 77: case 101: case 104: case 106: case 111: case 119: case 121:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 79:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 80:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 81:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 82:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 83:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 84:
this.$= ["parentheses",$$[$0-1]];
break;
case 85:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 87:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 88: case 89:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 90: case 91: case 92:
this.$ = yytext;
break;
case 93:
this.$ = [$$[$0-2],"[]"];
break;
case 98:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 99:
this.$ = ["default_parameter",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 100:
this.$ = [$$[$0-1],$$[$0]];
break;
case 103:
this.$= []
break;
case 110:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 113:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 114:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 116:
this.$ = ["else",$$[$0]];
break;
case 117:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 118:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 123:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},{1:[3]},{5:[1,23]},o($Vd,[2,3],{6:3,25:4,14:5,38:10,36:15,53:16,11:18,4:24,12:$V0,13:$V1,16:$V2,27:$V3,32:$V4,34:$V5,35:$V6,49:$V7,50:$V8,51:$V9,89:$Va,93:$Vb,99:$Vc}),{26:[1,25]},o($Ve,[2,17]),{28:[1,26]},{28:[1,27]},{28:[1,28]},{28:[1,29]},o($Ve,[2,22]),o([15,19,20,21],$Vf,{39:[1,30]}),{50:[1,31]},{16:$Vg,28:$Vh,29:32,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vo,36:46,89:$Va,93:$Vb},{16:[1,48],22:49},{48:[1,50]},{16:$Vp,48:[1,51],54:[1,52],55:[1,53],56:[1,54],57:[1,55],58:[1,56],59:[1,57],60:[1,58],72:$Vq,85:[1,59]},{15:[1,61],19:[1,62],20:[1,63],21:[1,64]},{28:[1,65]},o($Vr,[2,95]),o([16,63,74,95],$Vs),o([15,16,19,20,21,39,89,93],[2,9]),{1:[2,1]},o($Vd,[2,2]),o($Ve,[2,16]),{16:$Vg,28:$Vh,29:66,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:67,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$V2,25:68,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb},{16:$Vo,36:69,89:$Va,93:$Vb},{16:$Vo,36:70,41:[1,71],89:$Va,93:$Vb},{16:$Vg,28:$Vh,29:72,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},o($Vt,[2,38],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VI,[2,70],{60:$VJ}),{16:$Vg,28:$Vh,29:88,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},o($VI,[2,72]),{16:$Vo,36:89,89:[1,90],93:$Vb},{16:$Vg,28:$Vh,53:42,61:91,65:$Vi,80:92,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,53:42,61:93,65:$Vi,80:92,84:40,88:$Vm,91:$Vn},o($VI,[2,75]),o($VI,[2,78],{28:$VK,60:[1,94]}),{16:$Vg,28:$Vh,29:96,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},o($VL,[2,86]),o($VL,[2,90]),o($VL,$VM,{85:$VN}),o($VL,[2,92]),{16:[1,98],22:99},o($Vr,$Vp,{72:$Vq,85:[1,100]}),o($Vt,$VO,{48:[1,101],63:$VP}),o($Vt,[2,43]),{16:$Vg,28:$Vh,29:103,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:104,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},o($Vt,[2,46]),o($Vt,[2,47]),{16:$Vg,28:$Vh,29:105,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:106,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:107,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:108,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,53:42,61:109,65:$Vi,80:92,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,53:42,65:$Vi,84:112,86:111,87:$VQ,88:$VR,91:$Vn},{16:$Vo,36:115,89:$Va,92:114,93:$Vb},{16:[1,116]},{15:[1,117]},{16:[1,118]},{16:[1,119]},{16:$Vg,28:$Vh,29:120,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{30:[1,121],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{30:[1,122],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{26:[1,123]},{16:[1,124]},{16:[1,125]},{16:$Vo,36:126,89:$Va,93:$Vb},o($Vt,[2,37],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),{16:$Vg,28:$Vh,29:127,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:128,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:129,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:130,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:131,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:132,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:133,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:134,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:135,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:136,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:137,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:138,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:139,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:140,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,53:42,61:141,65:$Vi,80:92,84:40,88:$Vm,91:$Vn},o($VI,[2,71]),{17:[1,142],28:[1,143]},o([17,28],$Vs,{72:$VS}),o($VI,[2,73]),{60:$VJ},o($VI,[2,74]),{16:$Vg,28:$Vh,53:42,61:145,65:$Vi,80:92,84:40,88:$Vm,91:$Vn},{16:[1,151],28:$Vh,29:150,30:[1,146],52:148,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,90:147,91:$Vn,96:149},{30:[1,152],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{16:$Vg,28:$Vh,53:42,65:$Vi,84:112,86:111,88:$VR,91:$Vn},o($Vt,$VO,{48:[1,153],63:$VP}),o($Vt,[2,40]),{87:$VQ},{16:$Vg,17:[1,154],28:$Vh,29:155,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$VT,22:156},o($Vt,[2,44],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vt,[2,45],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vt,[2,48],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vt,[2,49],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vt,[2,50],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vt,[2,51],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vt,[2,52]),o($Vr,[2,93]),{87:[1,158]},{28:$VK,63:[1,159],87:[2,105]},{89:[1,160]},{74:[1,161]},{63:[1,162],74:[2,112]},{17:[1,163],23:[1,164],24:[1,165]},{16:[1,166]},{17:[1,167]},{17:[1,168]},{30:[1,169],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{16:$V2,17:$VU,25:172,31:170,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb},{17:[1,173]},{16:$Vg,28:$Vh,29:174,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{37:[1,175]},{28:[1,176]},{16:[1,177]},o($VV,[2,56],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VV,[2,57],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VV,[2,58],{69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VW,[2,59],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VW,[2,60],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VW,[2,61],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VW,[2,62],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VW,[2,63],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VW,[2,64],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VX,[2,65],{77:$VF,78:$VG,79:$VH}),o($VX,[2,66],{77:$VF,78:$VG,79:$VH}),o($VI,[2,67]),o($VI,[2,68]),o($VI,[2,69]),o($VI,[2,76]),{16:$Vg,18:[1,178],28:$Vh,29:150,52:179,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:150,30:[1,180],52:181,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vo,36:182,89:$Va,93:$Vb},o($VI,[2,77]),o($VL,[2,87]),{30:[1,183],63:[1,184]},{30:[1,185]},o($VY,[2,109]),o($VZ,[2,107],{63:[1,186],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o([28,30,60,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VM,{44:$V_,85:$VN}),o($VL,[2,84]),{16:$Vg,28:$Vh,29:188,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:150,52:189,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},o($Vt,[2,42],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($V$,[2,119]),o($V$,$VO,{63:$VP}),o([18,26,28,30,44,48,60,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87],[2,79]),{16:$Vg,28:$Vh,53:42,65:$Vi,84:112,86:190,88:$VR,91:$Vn},{72:$VS},o($Vr,[2,94]),{16:$Vo,36:115,89:$Va,92:191,93:$Vb},{7:192,8:193,10:194,11:195,12:$V01,13:$V1},{16:[1,197]},{16:[1,198]},{17:[1,199]},{7:200,8:193,10:194,11:195,12:$V01,13:$V1},{16:$VT,22:201},{16:$V2,17:$VU,25:172,31:202,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb},o($Ve,[2,18]),{4:204,6:3,9:203,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},{26:[1,205]},{33:206,42:208,43:$V11,46:207},{26:[1,210],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{16:[1,211]},{16:$Vo,30:$V21,36:214,40:212,89:$Va,93:$Vb,94:213},{28:[1,215]},o($V31,[2,80]),{18:[1,216]},o($V31,[2,82]),{30:[1,217]},{63:[1,218]},o($VL,[2,88]),{16:[1,220],96:219},o($VL,[2,89]),{16:$Vg,28:$Vh,29:150,52:221,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vg,28:$Vh,29:222,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},o($Vt,[2,39],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),{18:[1,223]},{87:[2,104]},{74:[2,111]},{18:[1,224]},{18:[2,4]},{8:225,10:194,11:195,12:$V01,13:$V1,18:[2,7]},{16:$Vo,36:226,39:[1,227],89:$Va,93:$Vb},o([16,39,89,93],$Vf),{17:[1,228]},{17:[1,229]},{7:230,8:193,10:194,11:195,12:$V01,13:$V1},{18:[1,231]},{18:[1,232]},o($Ve,[2,118],{97:233,100:235,98:$V41}),{18:[1,236]},o([18,45],[2,5]),o($V51,[2,124]),{18:[1,237]},{18:[2,29],47:[1,238]},o($V61,[2,27],{42:208,46:239,43:$V11}),{16:$Vg,28:$Vh,29:240,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$V2,25:241,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb},{30:[1,242]},{30:[1,243]},{30:[2,102],63:[1,244]},{16:[1,246],95:[1,245]},{16:$Vo,30:$V21,36:214,40:247,89:$Va,93:$Vb,94:213},o($V31,[2,81]),o($V31,[2,83]),{16:$Vo,36:248,89:$Va,93:$Vb},o($VY,[2,108]),{44:$V_},o($VZ,[2,106]),o($VY,[2,110],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vt,[2,41]),o($Ve,[2,10]),{18:[2,6]},{16:[1,249]},{16:$Vo,36:250,89:$Va,93:$Vb},{7:251,8:193,10:194,11:195,12:$V01,13:$V1},{7:252,8:193,10:194,11:195,12:$V01,13:$V1},{18:[1,253]},o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,117]),{16:$V2,17:$VU,25:172,31:255,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:[1,254]},o($Ve,[2,115]),o($V51,[2,123]),o($Ve,[2,19]),{44:[1,256]},o($V61,[2,26]),{44:[1,257],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{30:[1,258]},{16:$V2,17:$VU,25:172,31:259,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb},{17:[1,260]},{16:$Vo,30:$V21,36:214,40:261,89:$Va,93:$Vb,94:213},{16:[1,262]},o($VY,[2,100],{48:[1,263]}),{30:[1,264]},{74:[1,265]},{26:[1,267],28:[1,268],48:[1,266]},{16:[1,269]},{18:[1,270]},{18:[1,271]},o($Ve,[2,11]),{28:[1,272]},o($Ve,[2,116]),{4:204,6:3,9:273,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},{4:204,6:3,9:274,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},{16:$V2,17:$VU,25:172,31:275,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb},o($Ve,[2,21]),{4:204,6:3,9:276,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},{30:[2,101]},o($VY,[2,98]),{16:$Vg,28:$Vh,29:277,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{17:[1,278]},{17:[1,279]},{16:$Vg,28:$Vh,29:280,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},o($V71,[2,31]),{16:$Vo,30:$V21,36:214,40:281,89:$Va,93:$Vb,94:213},{28:[1,283],48:[1,282]},o($Ve,[2,14]),o($Ve,[2,15]),{16:$Vg,28:$Vh,29:284,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{18:[2,28]},{45:[1,285]},o($Ve,[2,20]),{18:[1,286]},o($VY,[2,99],{66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),{4:204,6:3,9:287,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},{17:$V81,62:288,64:289},{26:[1,291],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{30:[1,292]},{16:$Vg,28:$Vh,29:293,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{16:$Vo,30:$V21,36:214,40:294,89:$Va,93:$Vb,94:213},{30:[1,295],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{26:[1,296]},o($Ve,[2,23]),{18:[1,297]},{18:[1,298],63:[1,299]},o($V91,[2,54]),{65:[1,300]},o($V71,[2,30]),{17:[1,302],26:[1,301]},{26:[1,303],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{30:[1,304]},{16:$V2,17:$VU,25:172,31:305,36:15,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb},o([18,43,47],[2,25]),o($Ve,[2,24]),o($VL,[2,85]),{17:$V81,64:306},{63:[1,307]},o($V71,[2,34]),{4:204,6:3,9:308,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},o($V71,[2,32]),{17:[1,310],26:[1,309]},o($Ve,[2,114],{100:235,97:311,98:$V41}),o($V91,[2,53]),{16:$Vg,28:$Vh,29:312,53:42,61:39,65:$Vi,76:$Vj,80:33,81:35,82:$Vk,83:$Vl,84:40,88:$Vm,91:$Vn},{18:[1,313]},o($V71,[2,33]),{4:204,6:3,9:314,11:18,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,34:$V5,35:$V6,36:15,38:10,49:$V7,50:$V8,51:$V9,53:16,89:$Va,93:$Vb,99:$Vc},o($Ve,[2,113]),{18:[1,315],66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},o($V71,[2,36]),{18:[1,316]},o($V91,[2,55]),o($V71,[2,35])],
defaultActions: {23:[2,1],190:[2,104],191:[2,111],193:[2,4],225:[2,6],261:[2,101],273:[2,28]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 91
break;
case 2:return 65
break;
case 3:return "class"
break;
case 4:return "yield"
break;
case 5:return "await"
break;
case 6:return "public"
break;
case 7:return "extends"
break;
case 8:return "implements"
break;
case 9:return "Dictionary"
break;
case 10:return "private"
break;
case 11:return "static"
break;
case 12:return "if"
break;
case 13:return "in"
break;
case 14:return "else"
break;
case 15:return "return"
break;
case 16:return "while"
break;
case 17:return "switch"
break;
case 18:return "async"
break;
case 19:return "foreach"
break;
case 20:return "for"
break;
case 21:return "new"
break;
case 22:return 70
break;
case 23:return 82
break;
case 24:return 63
break;
case 25:return 26
break;
case 26:return 60
break;
case 27:return 44
break;
case 28:return 68
break;
case 29:return 67
break;
case 30:return 73
break;
case 31:return 74
break;
case 32:return 71
break;
case 33:return 72
break;
case 34:return 69
break;
case 35:return 48
break;
case 36:return 58
break;
case 37:return 77
break;
case 38:return 59
break;
case 39:return 78
break;
case 40:return 79
break;
case 41:return 57
break;
case 42:return 55
break;
case 43:return 76
break;
case 44:return 54
break;
case 45:return 56
break;
case 46:return 75
break;
case 47:return '^'
break;
case 48:return 17
break;
case 49:return 18
break;
case 50:return 85
break;
case 51:return 87
break;
case 52:return 28
break;
case 53:return 30
break;
case 54:return 16
break;
case 55:return 5
break;
case 56:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:yield\b)/,/^(?:await\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:async\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_sharp_parser;
exports.Parser = c_sharp_parser.Parser;
exports.parse = function () { return c_sharp_parser.parse.apply(c_sharp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}