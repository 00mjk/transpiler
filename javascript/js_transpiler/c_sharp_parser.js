/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_sharp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,24],$V2=[1,19],$V3=[1,4],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,23],$Vd=[1,22],$Ve=[1,21],$Vf=[5,18,46],$Vg=[5,12,13,16,18,25,28,33,35,36,46,50,51,52,53,92,96,105],$Vh=[2,8],$Vi=[1,47],$Vj=[1,44],$Vk=[1,48],$Vl=[1,37],$Vm=[1,40],$Vn=[1,41],$Vo=[1,39],$Vp=[1,46],$Vq=[1,51],$Vr=[2,101],$Vs=[1,65],$Vt=[16,17,29,66,78,100],$Vu=[2,100],$Vv=[27,31],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[18,27,31,45,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90],$VM=[1,93],$VN=[18,27,29,31,45,63,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90],$VO=[2,95],$VP=[1,103],$VQ=[2,124],$VR=[1,108],$VS=[1,117],$VT=[1,120],$VU=[1,165],$VV=[18,31,90],$VW=[18,31,66,90],$VX=[1,179],$VY=[18,27,31,45,66,69,70,71,72,90],$VZ=[18,27,31,45,66,69,70,71,72,73,74,75,76,77,78,90],$V_=[18,27,31,45,66,69,70,71,72,73,74,75,76,77,78,79,80,90],$V$=[31,66],$V01=[1,195],$V11=[18,27,31],$V21=[1,204],$V31=[1,217],$V41=[2,109],$V51=[1,222],$V61=[1,223],$V71=[18,27,31,45,63,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90],$V81=[1,244],$V91=[5,12,13,16,18,25,28,33,35,36,46,50,51,52,53,92,96,104,105],$Va1=[18,48],$Vb1=[12,13,18],$Vc1=[1,305],$Vd1=[18,66];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"import":25,"statement_with_semicolon":26,";":27,"while":28,"(":29,"e":30,")":31,"bracket_statements":32,"switch":33,"case_statements":34,"for":35,"foreach":36,"type":37,"in":38,"if_statement":39,"static":40,"parameters":41,"async":42,"case_statement":43,"case":44,":":45,"break":46,"case_statements_":47,"default":48,"=":49,"yield":50,"return":51,"throw":52,"final":53,"exprs":54,"access_array":55,"++":56,"--":57,"+=":58,"-=":59,"*=":60,"/=":61,"%=":62,".":63,"dot_expr":64,"key_values":65,",":66,"key_value":67,"STRING_LITERAL":68,"?":69,"is":70,"||":71,"&&":72,"==":73,"!=":74,"<=":75,"<":76,">=":77,">":78,"+":79,"-":80,"*":81,"/":82,"%":83,"initializer_list":84,"not_expr":85,"!":86,"await":87,"parentheses_expr":88,"[":89,"]":90,"new":91,"Dictionary":92,"named_parameters":93,"NUMBER":94,"types":95,"Object":96,"parameter":97,"ref":98,"out":99,"...":100,"expr":101,"named_parameter":102,"elif":103,"else":104,"if":105,"add":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",25:"import",27:";",28:"while",29:"(",31:")",33:"switch",35:"for",36:"foreach",38:"in",40:"static",42:"async",44:"case",45:":",46:"break",48:"default",49:"=",50:"yield",51:"return",52:"throw",53:"final",56:"++",57:"--",58:"+=",59:"-=",60:"*=",61:"/=",62:"%=",63:".",66:",",68:"STRING_LITERAL",69:"?",70:"is",71:"||",72:"&&",73:"==",74:"!=",75:"<=",76:"<",77:">=",78:">",79:"+",80:"-",81:"*",82:"/",83:"%",86:"!",87:"await",89:"[",90:"]",91:"new",92:"Dictionary",94:"NUMBER",96:"Object",98:"ref",99:"out",100:"...",104:"else",105:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[6,2],[6,2],[6,1],[6,5],[6,7],[6,9],[6,8],[6,1],[6,10],[6,11],[43,6],[47,2],[47,1],[34,4],[34,1],[10,6],[10,4],[10,7],[10,8],[10,7],[10,10],[10,9],[26,3],[26,2],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[65,3],[65,1],[67,5],[30,5],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,2],[30,1],[85,2],[85,2],[85,1],[64,3],[64,3],[64,1],[55,4],[84,4],[84,5],[84,4],[84,5],[88,3],[88,10],[88,1],[88,3],[88,4],[88,4],[88,1],[88,1],[88,1],[37,3],[37,4],[37,1],[37,1],[37,1],[97,3],[97,3],[97,3],[97,4],[97,2],[41,3],[41,1],[41,0],[54,3],[54,1],[101,2],[101,1],[93,3],[93,1],[102,3],[95,3],[95,1],[103,9],[103,4],[39,6],[39,5],[22,3],[22,1],[106,3],[106,1],[32,3],[32,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 27:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 28: case 82: case 108:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["import",$$[$0]];
break;
case 17: case 128:
this.$ = ["semicolon",$$[$0-1]];
break;
case 19:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 29:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 31:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 33:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 34:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 35:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 36:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 37:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 38:
this.$ = ["yield",$$[$0]];
break;
case 39:
this.$ = ["return",$$[$0]];
break;
case 40:
this.$ = ["throw",$$[$0]];
break;
case 41:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 43:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 44:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 46: case 47:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = [$$[$0],$$[$0-1]];
break;
case 50: case 51: case 52: case 53: case 54: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 55:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 56: case 114:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 57: case 111: case 113: case 115: case 118: case 124: case 126:
this.$ = [$$[$0]];
break;
case 58: case 98:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 59:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 75:
this.$ = ["-",$$[$0]];
break;
case 77:
this.$ = ["!", [".",$$[$0]]];
break;
case 78:
this.$ = ["await", [".",$$[$0]]]
break;
case 79:
this.$ = [".", $$[$0]];
break;
case 80: case 81: case 107: case 110: case 117: case 123: case 125:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 83:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 84:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 85:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 86:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 87:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 88:
this.$= ["parentheses",$$[$0-1]];
break;
case 89:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 91:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 92: case 93:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 94: case 95: case 96:
this.$ = yytext;
break;
case 97:
this.$ = [$$[$0-2],"[]"];
break;
case 102:
this.$ = ["ref_parameter",$$[$0-1],$$[$0]]
break;
case 103:
this.$ = ["out_parameter",$$[$0-1],$$[$0]]
break;
case 104:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 105:
this.$ = ["default_parameter",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 106:
this.$ = [$$[$0-1],$$[$0]];
break;
case 109:
this.$= []
break;
case 112:
this.$ = ["function_call_ref",$$[$0]];
break;
case 116:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 119:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 120:
this.$ = ["else",$$[$0-1]];
break;
case 121:
this.$ = ["if",$$[$0-3],$$[$0],$$[$02]];
break;
case 122:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 127:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{1:[3]},{5:[1,25]},o($Vf,[2,3],{6:3,26:5,14:6,39:11,37:17,55:18,11:20,4:26,12:$V0,13:$V1,16:$V2,25:$V3,28:$V4,33:$V5,35:$V6,36:$V7,50:$V8,51:$V9,52:$Va,53:$Vb,92:$Vc,96:$Vd,105:$Ve}),{16:[1,27]},{27:[1,28]},o($Vg,[2,18]),{29:[1,29]},{29:[1,30]},{29:[1,31]},{29:[1,32]},o($Vg,[2,23]),o([15,19,20,21],$Vh,{40:[1,33]}),{51:[1,34]},{16:$Vi,29:$Vj,30:35,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:49,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vq,37:50,92:$Vc,96:$Vd},{16:[1,52],22:53},{49:[1,54]},{16:$Vr,49:[1,55],56:[1,56],57:[1,57],58:[1,58],59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],76:$Vs,89:[1,64]},{15:[1,66],19:[1,67],20:[1,68],21:[1,69]},{29:[1,70]},o($Vt,[2,99]),o([16,66,78,100],$Vu),o([15,16,19,20,21,40,92,96],[2,9]),{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,16]),o($Vg,[2,17]),{16:$Vi,29:$Vj,30:71,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:72,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$V2,26:73,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd},{16:$Vq,37:74,92:$Vc,96:$Vd},{16:$Vq,37:75,42:[1,76],92:$Vc,96:$Vd},{16:$Vi,29:$Vj,30:77,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($Vv,[2,39],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VL,[2,74],{63:$VM}),{16:$Vi,29:$Vj,30:94,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($VL,[2,76]),{16:$Vq,37:95,92:[1,96],96:$Vd},{16:$Vi,29:$Vj,55:45,64:97,68:$Vk,84:98,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,55:45,64:99,68:$Vk,84:98,88:43,91:$Vo,94:$Vp},o($VL,[2,79]),o($VL,[2,82],{29:[1,101],63:[1,100]}),{16:$Vi,29:$Vj,30:102,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($VN,[2,90]),o($VN,[2,94]),o($VN,$VO,{89:$VP}),o($VN,[2,96]),o($Vv,[2,40],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{16:[1,104],22:105},o($Vt,$Vr,{76:$Vs,89:[1,106]}),o($Vv,$VQ,{49:[1,107],66:$VR}),o($Vv,[2,45]),{16:$Vi,29:$Vj,30:109,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:110,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($Vv,[2,48]),o($Vv,[2,49]),{16:$Vi,29:$Vj,30:111,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:112,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:113,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:114,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:115,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,55:45,64:116,68:$Vk,84:98,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:121,54:118,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,90:$VS,91:$Vo,94:$Vp,98:$VT,101:119},{16:$Vq,37:123,92:$Vc,95:122,96:$Vd},{16:[1,124]},{15:[1,125]},{16:[1,126]},{16:[1,127]},{16:$Vi,29:$Vj,30:128,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{31:[1,129],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{31:[1,130],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{27:[1,131]},{16:[1,132]},{16:[1,133]},{16:$Vq,37:134,92:$Vc,96:$Vd},o($Vv,[2,38],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{16:$Vi,29:$Vj,30:135,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:136,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:137,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:138,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:139,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:140,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:141,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:142,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:143,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:144,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:145,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:146,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:147,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:148,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:149,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,55:45,64:150,68:$Vk,84:98,88:43,91:$Vo,94:$Vp},o($VL,[2,75]),{17:[1,151],29:[1,152]},o([17,29],$Vu,{76:[1,153]}),o($VL,[2,77]),{63:$VM},o($VL,[2,78]),{16:$Vi,29:$Vj,55:45,64:154,68:$Vk,84:98,88:43,91:$Vo,94:$Vp},{16:[1,159],29:$Vj,30:121,31:[1,155],54:157,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,93:156,94:$Vp,98:$VT,101:119,102:158},{31:[1,160],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{16:$Vi,29:$Vj,30:121,54:118,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp,98:$VT,101:119},o($Vv,$VQ,{49:[1,161],66:$VR}),o($Vv,[2,42]),{90:$VS},{16:$Vi,17:[1,162],29:$Vj,30:163,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$VU,22:164},o($Vv,[2,46],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,47],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,50],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,51],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,52],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,53],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,54],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,55]),o($Vt,[2,97]),{90:[1,166]},o($VV,[2,111],{66:[1,167]}),{16:$Vi,29:$Vj,30:168,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($VW,[2,113],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{78:[1,169]},{66:[1,170],78:[2,118]},{17:[1,171],23:[1,172],24:[1,173]},{16:[1,174]},{17:[1,175]},{17:[1,176]},{31:[1,177],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{16:$V2,17:$VX,26:180,32:178,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd},{17:[1,181]},{16:$Vi,29:$Vj,30:182,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{38:[1,183]},{29:[1,184]},{16:[1,185]},{45:[1,186],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($VY,[2,60],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VY,[2,61],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VY,[2,62],{73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VZ,[2,63],{79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VZ,[2,64],{79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VZ,[2,65],{79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VZ,[2,66],{79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VZ,[2,67],{79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($VZ,[2,68],{79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V_,[2,69],{81:$VI,82:$VJ,83:$VK}),o($V_,[2,70],{81:$VI,82:$VJ,83:$VK}),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,80]),{16:$Vi,18:[1,187],29:$Vj,30:121,54:188,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp,98:$VT,101:119},{16:$Vi,29:$Vj,30:121,31:[1,189],54:190,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp,98:$VT,101:119},{16:$Vq,37:191,92:$Vc,96:$Vd},o($VL,[2,81]),o($VN,[2,91]),{31:[1,192],66:[1,193]},{31:[1,194]},o($V$,[2,115]),o([29,31,63,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],$VO,{45:$V01,89:$VP}),o($VN,[2,88]),{16:$Vi,29:$Vj,30:196,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vi,29:$Vj,30:121,54:197,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp,98:$VT,101:119},o($Vv,[2,44],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V11,[2,123]),o($V11,$VQ,{66:$VR}),o([18,27,29,31,45,49,63,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90],[2,83]),{16:$Vi,29:$Vj,30:121,54:198,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp,98:$VT,101:119},o($VW,[2,112],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vt,[2,98]),{16:$Vq,37:123,92:$Vc,95:199,96:$Vd},{7:200,8:201,10:202,11:203,12:$V21,13:$V1},{16:[1,205]},{16:[1,206]},{17:[1,207]},{7:208,8:201,10:202,11:203,12:$V21,13:$V1},{16:$VU,22:209},{16:$V2,17:$VX,26:180,32:210,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd},o($Vg,[2,19]),{4:212,6:3,9:211,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{27:[1,213]},{34:214,43:216,44:$V31,47:215},{27:[1,218],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{16:[1,219]},{16:$Vq,31:$V41,37:224,41:220,92:$Vc,96:$Vd,97:221,98:$V51,99:$V61},{29:[1,225]},{16:$Vi,29:$Vj,30:226,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($V71,[2,84]),{18:[1,227]},o($V71,[2,86]),{31:[1,228]},{66:[1,229]},o($VN,[2,92]),{16:[1,231],102:230},o($VN,[2,93]),{16:$Vi,29:$Vj,30:232,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($Vv,[2,41],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{18:[1,233]},o($VV,[2,110]),{78:[2,117]},{18:[1,234]},{18:[2,4]},{8:235,10:202,11:203,12:$V21,13:$V1,18:[2,7]},{16:$Vq,37:236,40:[1,237],92:$Vc,96:$Vd},o([16,40,92,96],$Vh),{17:[1,238]},{17:[1,239]},{7:240,8:201,10:202,11:203,12:$V21,13:$V1},{18:[1,241]},{18:[1,242]},o($Vg,[2,122],{103:243,104:$V81}),{18:[1,245]},o([18,46],[2,5]),o($V91,[2,128]),{18:[1,246]},{18:[2,30],48:[1,247]},o($Va1,[2,28],{43:216,47:248,44:$V31}),{16:$Vi,29:$Vj,30:249,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$V2,26:250,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd},{31:[1,251]},{31:[1,252]},{31:[2,108],66:[1,253]},{16:$Vq,37:254,92:$Vc,96:$Vd},{16:$Vq,37:255,92:$Vc,96:$Vd},{16:[1,257],100:[1,256]},{16:$Vq,31:$V41,37:224,41:258,92:$Vc,96:$Vd,97:221,98:$V51,99:$V61},o([18,27,31,45,66,90],[2,59],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($V71,[2,85]),o($V71,[2,87]),{16:$Vq,37:259,92:$Vc,96:$Vd},o($V$,[2,114]),{45:$V01},o($V$,[2,116],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),o($Vv,[2,43]),o($Vg,[2,10]),{18:[2,6]},{16:[1,260]},{16:$Vq,37:261,92:$Vc,96:$Vd},{7:262,8:201,10:202,11:203,12:$V21,13:$V1},{7:263,8:201,10:202,11:203,12:$V21,13:$V1},{18:[1,264]},o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,121]),{17:[1,266],105:[1,265]},o($V91,[2,127]),o($Vg,[2,20]),{45:[1,267]},o($Va1,[2,27]),{45:[1,268],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{31:[1,269]},{16:$V2,17:$VX,26:180,32:270,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd},{17:[1,271]},{16:$Vq,31:$V41,37:224,41:272,92:$Vc,96:$Vd,97:221,98:$V51,99:$V61},{16:[1,273]},{16:[1,274]},{16:[1,275]},o($V$,[2,106],{49:[1,276]}),{31:[1,277]},{78:[1,278]},{27:[1,280],29:[1,281],49:[1,279]},{16:[1,282]},{18:[1,283]},{18:[1,284]},o($Vg,[2,11]),{29:[1,285]},{4:212,6:3,9:286,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{4:212,6:3,9:287,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{4:212,6:3,9:288,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{16:$V2,17:$VX,26:180,32:289,37:17,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd},o($Vg,[2,22]),{4:212,6:3,9:290,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{31:[2,107]},o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),{16:$Vi,29:$Vj,30:291,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{17:[1,292]},{17:[1,293]},{16:$Vi,29:$Vj,30:294,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},o($Vb1,[2,32]),{16:$Vq,31:$V41,37:224,41:295,92:$Vc,96:$Vd,97:221,98:$V51,99:$V61},{29:[1,297],49:[1,296]},o($Vg,[2,14]),o($Vg,[2,15]),{16:$Vi,29:$Vj,30:298,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{18:[1,299]},{18:[2,29]},{46:[1,300]},o($Vg,[2,21]),{18:[1,301]},o($V$,[2,105],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK}),{4:212,6:3,9:302,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{17:$Vc1,65:303,67:304},{27:[1,306],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{31:[1,307]},{16:$Vi,29:$Vj,30:308,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{16:$Vq,31:$V41,37:224,41:309,92:$Vc,96:$Vd,97:221,98:$V51,99:$V61},{31:[1,310],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($Vg,[2,120]),{27:[1,311]},o($Vg,[2,24]),{18:[1,312]},{18:[1,313],66:[1,314]},o($Vd1,[2,57]),{68:[1,315]},o($Vb1,[2,31]),{17:[1,317],27:[1,316]},{27:[1,318],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},{31:[1,319]},{17:[1,320]},o([18,44,48],[2,26]),o($Vg,[2,25]),o($VN,[2,89]),{17:$Vc1,67:321},{66:[1,322]},o($Vb1,[2,35]),{4:212,6:3,9:323,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},o($Vb1,[2,33]),{17:[1,325],27:[1,324]},{4:212,6:3,9:326,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},o($Vd1,[2,56]),{16:$Vi,29:$Vj,30:327,55:45,64:42,68:$Vk,80:$Vl,84:36,85:38,86:$Vm,87:$Vn,88:43,91:$Vo,94:$Vp},{18:[1,328]},o($Vb1,[2,34]),{4:212,6:3,9:329,11:20,12:$V0,13:$V1,14:6,16:$V2,25:$V3,26:5,28:$V4,33:$V5,35:$V6,36:$V7,37:17,39:11,50:$V8,51:$V9,52:$Va,53:$Vb,55:18,92:$Vc,96:$Vd,105:$Ve},{18:[1,330]},{18:[1,331],69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK},o($Vb1,[2,37]),{18:[1,332]},{103:333,104:$V81},o($Vd1,[2,58]),o($Vb1,[2,36]),o($Vg,[2,119])],
defaultActions: {25:[2,1],199:[2,117],201:[2,4],235:[2,6],272:[2,107],287:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 94
break;
case 2:return 68
break;
case 3:return "class"
break;
case 4:return "yield"
break;
case 5:return "await"
break;
case 6:return "public"
break;
case 7:return "extends"
break;
case 8:return "default"
break;
case 9:return "import"
break;
case 10:return "implements"
break;
case 11:return "Dictionary"
break;
case 12:return "private"
break;
case 13:return "static"
break;
case 14:return "if"
break;
case 15:return "in"
break;
case 16:return "ref"
break;
case 17:return "out"
break;
case 18:return "else"
break;
case 19:return "return"
break;
case 20:return "throw"
break;
case 21:return "while"
break;
case 22:return "switch"
break;
case 23:return "async"
break;
case 24:return "foreach"
break;
case 25:return "for"
break;
case 26:return "new"
break;
case 27:return 74
break;
case 28:return 86
break;
case 29:return 66
break;
case 30:return 27
break;
case 31:return 63
break;
case 32:return 45
break;
case 33:return 72
break;
case 34:return 71
break;
case 35:return 77
break;
case 36:return 78
break;
case 37:return 75
break;
case 38:return 76
break;
case 39:return 73
break;
case 40:return 49
break;
case 41:return 62
break;
case 42:return 83
break;
case 43:return 60
break;
case 44:return 81
break;
case 45:return 61
break;
case 46:return 82
break;
case 47:return 59
break;
case 48:return 57
break;
case 49:return 80
break;
case 50:return 56
break;
case 51:return 58
break;
case 52:return 79
break;
case 53:return '^'
break;
case 54:return 69
break;
case 55:return 17
break;
case 56:return 18
break;
case 57:return 89
break;
case 58:return 90
break;
case 59:return 29
break;
case 60:return 31
break;
case 61:return 16
break;
case 62:return 5
break;
case 63:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:yield\b)/,/^(?:await\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:default\b)/,/^(?:import\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:ref\b)/,/^(?:out\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:throw\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:async\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:%=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_sharp_parser;
exports.Parser = c_sharp_parser.Parser;
exports.parse = function () { return c_sharp_parser.parse.apply(c_sharp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}