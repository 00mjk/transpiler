/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_sharp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,21],$V2=[1,16],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,20],$Va=[1,19],$Vb=[1,18],$Vc=[5,18],$Vd=[5,12,13,16,18,27,32,33,41,42,43,81,85,92],$Ve=[2,8],$Vf=[1,42],$Vg=[1,39],$Vh=[1,43],$Vi=[1,32],$Vj=[1,35],$Vk=[1,36],$Vl=[1,34],$Vm=[1,41],$Vn=[1,45],$Vo=[2,91],$Vp=[1,58],$Vq=[16,17,28,55,66,87],$Vr=[2,90],$Vs=[26,30],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[18,26,30,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VI=[1,84],$VJ=[1,92],$VK=[18,26,28,30,52,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,79],$VL=[2,85],$VM=[1,94],$VN=[2,114],$VO=[1,99],$VP=[1,107],$VQ=[1,110],$VR=[1,140],$VS=[1,153],$VT=[1,167],$VU=[18,26,30,55,58,59,60],$VV=[18,26,30,55,58,59,60,61,62,63,64,65,66],$VW=[18,26,30,55,58,59,60,61,62,63,64,65,66,67,68],$VX=[30,55],$VY=[18,30],$VZ=[1,182],$V_=[18,26,30],$V$=[1,191],$V01=[2,97],$V11=[18,26,30,52,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$V21=[1,225],$V31=[5,12,13,16,18,27,32,33,41,42,43,81,85,91,92],$V41=[12,13,18],$V51=[1,272],$V61=[18,55];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"statement_with_semicolon":25,";":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"for":32,"foreach":33,"type":34,"in":35,"if_statement":36,"static":37,"parameters":38,"async":39,"=":40,"yield":41,"return":42,"final":43,"exprs":44,"access_array":45,"++":46,"--":47,"+=":48,"-=":49,"*=":50,"/=":51,".":52,"dot_expr":53,"key_values":54,",":55,"key_value":56,"STRING_LITERAL":57,"is":58,"||":59,"&&":60,"==":61,"!=":62,"<=":63,"<":64,">=":65,">":66,"+":67,"-":68,"*":69,"/":70,"%":71,"initializer_list":72,"not_expr":73,"!":74,"await":75,"parentheses_expr":76,"[":77,"access_arr":78,"]":79,"new":80,"Dictionary":81,"named_parameters":82,"NUMBER":83,"types":84,"Object":85,"parameter":86,"...":87,"named_parameter":88,":":89,"elif":90,"else":91,"if":92,"else_statement":93,"add":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",26:";",27:"while",28:"(",30:")",32:"for",33:"foreach",35:"in",37:"static",39:"async",40:"=",41:"yield",42:"return",43:"final",46:"++",47:"--",48:"+=",49:"-=",50:"*=",51:"/=",52:".",55:",",57:"STRING_LITERAL",58:"is",59:"||",60:"&&",61:"==",62:"!=",63:"<=",64:"<",65:">=",66:">",67:"+",68:"-",69:"*",70:"/",71:"%",74:"!",75:"await",77:"[",79:"]",80:"new",81:"Dictionary",83:"NUMBER",85:"Object",87:"...",89:":",91:"else",92:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[6,2],[6,1],[6,5],[6,9],[6,8],[6,1],[6,10],[6,11],[10,6],[10,4],[10,7],[10,8],[10,7],[10,10],[10,9],[25,3],[25,2],[25,5],[25,3],[25,6],[25,4],[25,2],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[54,3],[54,1],[56,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[73,2],[73,2],[73,1],[53,3],[53,3],[53,1],[45,4],[72,4],[72,5],[72,4],[72,5],[76,3],[76,10],[76,1],[76,3],[76,4],[76,4],[76,1],[76,1],[76,1],[34,3],[34,4],[34,1],[34,1],[34,1],[86,3],[86,4],[86,2],[38,3],[38,1],[38,0],[78,3],[78,1],[44,3],[44,1],[82,3],[82,1],[88,3],[84,3],[84,1],[90,7],[90,6],[90,1],[93,2],[36,6],[36,5],[22,3],[22,1],[94,3],[94,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 72: case 96: case 99:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 118:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["async_function",$$[$0-10],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 25:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 26:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 28:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 29:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 30:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 31:
this.$ = ["yield",$$[$0]];
break;
case 32:
this.$ = ["return",$$[$0]];
break;
case 33:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 34:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 35:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 36:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 37:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 38: case 39:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 40: case 41:
this.$ = [$$[$0],$$[$0-1]];
break;
case 42: case 43: case 44: case 45: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 46:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 47: case 102:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 48: case 101: case 103: case 106: case 114: case 116:
this.$ = [$$[$0]];
break;
case 49: case 88:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 65:
this.$ = ["-",$$[$0]];
break;
case 67:
this.$ = ["!", [".",$$[$0]]];
break;
case 68:
this.$ = ["await", [".",$$[$0]]]
break;
case 69:
this.$ = [".", $$[$0]];
break;
case 70: case 71: case 95: case 98: case 100: case 105: case 113: case 115:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 73:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 74:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 75:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 76:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 77:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 78:
this.$= ["parentheses",$$[$0-1]];
break;
case 79:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 81:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 82: case 83:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 84: case 85: case 86:
this.$ = yytext;
break;
case 87:
this.$ = [$$[$0-2],"[]"];
break;
case 92:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 93:
this.$ = ["default_parameter",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 94:
this.$ = [$$[$0-1],$$[$0]];
break;
case 97:
this.$= []
break;
case 104:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 107:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 108:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 110:
this.$ = ["else",$$[$0]];
break;
case 111:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 112:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 117:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:17,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:14,36:9,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va,92:$Vb},{1:[3]},{5:[1,22]},o($Vc,[2,3],{6:3,25:4,14:5,36:9,34:14,45:15,11:17,4:23,12:$V0,13:$V1,16:$V2,27:$V3,32:$V4,33:$V5,41:$V6,42:$V7,43:$V8,81:$V9,85:$Va,92:$Vb}),{26:[1,24]},o($Vd,[2,17]),{28:[1,25]},{28:[1,26]},{28:[1,27]},o($Vd,[2,21]),o([15,19,20,21],$Ve,{37:[1,28]}),{42:[1,29]},{16:$Vf,28:$Vg,29:30,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vn,34:44,81:$V9,85:$Va},{16:[1,46],22:47},{40:[1,48]},{16:$Vo,40:[1,49],46:[1,50],47:[1,51],48:[1,52],49:[1,53],50:[1,54],51:[1,55],52:[1,56],64:$Vp,77:[1,57]},{15:[1,59],19:[1,60],20:[1,61],21:[1,62]},{28:[1,63]},o($Vq,[2,89]),o([16,55,66,87],$Vr),o([15,16,19,20,21,37,81,85],[2,9]),{1:[2,1]},o($Vc,[2,2]),o($Vd,[2,16]),{16:$Vf,28:$Vg,29:64,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$V2,25:65,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va},{16:$Vn,34:66,81:$V9,85:$Va},{16:$Vn,34:67,39:[1,68],81:$V9,85:$Va},{16:$Vf,28:$Vg,29:69,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($Vs,[2,32],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VH,[2,64],{52:$VI}),{16:$Vf,28:$Vg,29:85,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($VH,[2,66]),{16:$Vn,34:86,81:[1,87],85:$Va},{16:$Vf,28:$Vg,45:40,53:88,57:$Vh,72:89,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,45:40,53:90,57:$Vh,72:89,76:38,80:$Vl,83:$Vm},o($VH,[2,69]),o($VH,[2,72],{28:$VJ,52:[1,91]}),{16:$Vf,28:$Vg,29:93,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($VK,[2,80]),o($VK,[2,84]),o($VK,$VL,{77:$VM}),o($VK,[2,86]),{16:[1,95],22:96},o($Vq,$Vo,{64:$Vp,77:[1,97]}),o($Vs,$VN,{40:[1,98],55:$VO}),o($Vs,[2,37]),{16:$Vf,28:$Vg,29:100,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:101,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($Vs,[2,40]),o($Vs,[2,41]),{16:$Vf,28:$Vg,29:102,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:103,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:104,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:105,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,45:40,53:106,57:$Vh,72:89,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,45:40,57:$Vh,76:109,78:108,79:$VP,80:$VQ,83:$Vm},{16:$Vn,34:112,81:$V9,84:111,85:$Va},{16:[1,113]},{15:[1,114]},{16:[1,115]},{16:[1,116]},{16:$Vf,28:$Vg,29:117,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{30:[1,118],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},{26:[1,119]},{16:[1,120]},{16:[1,121]},{16:$Vn,34:122,81:$V9,85:$Va},o($Vs,[2,31],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),{16:$Vf,28:$Vg,29:123,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:124,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:125,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:126,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:127,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:128,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:129,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:130,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:131,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:132,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:133,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:134,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:135,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:136,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,45:40,53:137,57:$Vh,72:89,76:38,80:$Vl,83:$Vm},o($VH,[2,65]),{17:[1,138],28:[1,139]},o([17,28],$Vr,{64:$VR}),o($VH,[2,67]),{52:$VI},o($VH,[2,68]),{16:$Vf,28:$Vg,45:40,53:141,57:$Vh,72:89,76:38,80:$Vl,83:$Vm},{16:[1,147],28:$Vg,29:146,30:[1,142],44:144,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,82:143,83:$Vm,88:145},{30:[1,148],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},{16:$Vf,28:$Vg,45:40,57:$Vh,76:109,78:108,80:$VQ,83:$Vm},o($Vs,$VN,{40:[1,149],55:$VO}),o($Vs,[2,34]),{79:$VP},{16:$Vf,17:[1,150],28:$Vg,29:151,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$VS,22:152},o($Vs,[2,38],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($Vs,[2,39],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($Vs,[2,42],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($Vs,[2,43],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($Vs,[2,44],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($Vs,[2,45],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($Vs,[2,46]),o($Vq,[2,87]),{79:[1,154]},{28:$VJ,55:[1,155],79:[2,99]},{81:[1,156]},{66:[1,157]},{55:[1,158],66:[2,106]},{17:[1,159],23:[1,160],24:[1,161]},{16:[1,162]},{17:[1,163]},{17:[1,164]},{30:[1,165],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},{16:$V2,17:$VT,25:168,31:166,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va},{16:$Vf,28:$Vg,29:169,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{35:[1,170]},{28:[1,171]},{16:[1,172]},o($VU,[2,50],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VU,[2,51],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VU,[2,52],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VV,[2,53],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VV,[2,54],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VV,[2,55],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VV,[2,56],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VV,[2,57],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VV,[2,58],{67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($VW,[2,59],{69:$VE,70:$VF,71:$VG}),o($VW,[2,60],{69:$VE,70:$VF,71:$VG}),o($VH,[2,61]),o($VH,[2,62]),o($VH,[2,63]),o($VH,[2,70]),{16:$Vf,18:[1,173],28:$Vg,29:146,44:174,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:146,30:[1,175],44:176,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vn,34:177,81:$V9,85:$Va},o($VH,[2,71]),o($VK,[2,81]),{30:[1,178],55:[1,179]},{30:[1,180]},o($VX,[2,103]),o($VY,[2,101],{55:[1,181],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o([28,30,52,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VL,{77:$VM,89:$VZ}),o($VK,[2,78]),{16:$Vf,28:$Vg,29:183,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:146,44:184,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($Vs,[2,36],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($V_,[2,113]),o($V_,$VN,{55:$VO}),o([18,26,28,30,40,52,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,79],[2,73]),{16:$Vf,28:$Vg,45:40,57:$Vh,76:109,78:185,80:$VQ,83:$Vm},{64:$VR},o($Vq,[2,88]),{16:$Vn,34:112,81:$V9,84:186,85:$Va},{7:187,8:188,10:189,11:190,12:$V$,13:$V1},{16:[1,192]},{16:[1,193]},{17:[1,194]},{7:195,8:188,10:189,11:190,12:$V$,13:$V1},{16:$VS,22:196},{16:$V2,17:$VT,25:168,31:197,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va},o($Vd,[2,18]),{4:199,6:3,9:198,11:17,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:14,36:9,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va,92:$Vb},{26:[1,200]},{26:[1,201],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},{16:[1,202]},{16:$Vn,30:$V01,34:205,38:203,81:$V9,85:$Va,86:204},{28:[1,206]},o($V11,[2,74]),{18:[1,207]},o($V11,[2,76]),{30:[1,208]},{55:[1,209]},o($VK,[2,82]),{16:[1,211],88:210},o($VK,[2,83]),{16:$Vf,28:$Vg,29:146,44:212,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vf,28:$Vg,29:213,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($Vs,[2,33],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),{18:[1,214]},{79:[2,98]},{66:[2,105]},{18:[1,215]},{18:[2,4]},{8:216,10:189,11:190,12:$V$,13:$V1,18:[2,7]},{16:$Vn,34:217,37:[1,218],81:$V9,85:$Va},o([16,37,81,85],$Ve),{17:[1,219]},{17:[1,220]},{7:221,8:188,10:189,11:190,12:$V$,13:$V1},{18:[1,222]},{18:[1,223]},o($Vd,[2,112],{90:224,93:226,91:$V21}),{18:[1,227]},{18:[2,5]},o($V31,[2,118]),{16:$V2,25:228,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va},{30:[1,229]},{30:[1,230]},{30:[2,96],55:[1,231]},{16:[1,233],87:[1,232]},{16:$Vn,30:$V01,34:205,38:234,81:$V9,85:$Va,86:204},o($V11,[2,75]),o($V11,[2,77]),{16:$Vn,34:235,81:$V9,85:$Va},o($VX,[2,102]),{89:$VZ},o($VY,[2,100]),o($VX,[2,104],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),o($Vs,[2,35]),o($Vd,[2,10]),{18:[2,6]},{16:[1,236]},{16:$Vn,34:237,81:$V9,85:$Va},{7:238,8:188,10:189,11:190,12:$V$,13:$V1},{7:239,8:188,10:189,11:190,12:$V$,13:$V1},{18:[1,240]},o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,111]),{16:$V2,17:$VT,25:168,31:242,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va,92:[1,241]},o($Vd,[2,109]),o($V31,[2,117]),{30:[1,243]},{16:$V2,17:$VT,25:168,31:244,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va},{17:[1,245]},{16:$Vn,30:$V01,34:205,38:246,81:$V9,85:$Va,86:204},{16:[1,247]},o($VX,[2,94],{40:[1,248]}),{30:[1,249]},{66:[1,250]},{26:[1,252],28:[1,253],40:[1,251]},{16:[1,254]},{18:[1,255]},{18:[1,256]},o($Vd,[2,11]),{28:[1,257]},o($Vd,[2,110]),{16:$V2,17:$VT,25:168,31:258,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va},o($Vd,[2,20]),{4:199,6:3,9:259,11:17,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:14,36:9,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va,92:$Vb},{30:[2,95]},o($VX,[2,92]),{16:$Vf,28:$Vg,29:260,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{17:[1,261]},{17:[1,262]},{16:$Vf,28:$Vg,29:263,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($V41,[2,25]),{16:$Vn,30:$V01,34:205,38:264,81:$V9,85:$Va,86:204},{28:[1,266],40:[1,265]},o($Vd,[2,14]),o($Vd,[2,15]),{16:$Vf,28:$Vg,29:267,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},o($Vd,[2,19]),{18:[1,268]},o($VX,[2,93],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG}),{4:199,6:3,9:269,11:17,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:14,36:9,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va,92:$Vb},{17:$V51,54:270,56:271},{26:[1,273],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},{30:[1,274]},{16:$Vf,28:$Vg,29:275,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{16:$Vn,30:$V01,34:205,38:276,81:$V9,85:$Va,86:204},{30:[1,277],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},o($Vd,[2,22]),{18:[1,278]},{18:[1,279],55:[1,280]},o($V61,[2,48]),{57:[1,281]},o($V41,[2,24]),{17:[1,283],26:[1,282]},{26:[1,284],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},{30:[1,285]},{16:$V2,17:$VT,25:168,31:286,34:14,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va},o($Vd,[2,23]),o($VK,[2,79]),{17:$V51,56:287},{55:[1,288]},o($V41,[2,28]),{4:199,6:3,9:289,11:17,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:14,36:9,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va,92:$Vb},o($V41,[2,26]),{17:[1,291],26:[1,290]},o($Vd,[2,108],{93:226,90:292,91:$V21}),o($V61,[2,47]),{16:$Vf,28:$Vg,29:293,45:40,53:37,57:$Vh,68:$Vi,72:31,73:33,74:$Vj,75:$Vk,76:38,80:$Vl,83:$Vm},{18:[1,294]},o($V41,[2,27]),{4:199,6:3,9:295,11:17,12:$V0,13:$V1,14:5,16:$V2,25:4,27:$V3,32:$V4,33:$V5,34:14,36:9,41:$V6,42:$V7,43:$V8,45:15,81:$V9,85:$Va,92:$Vb},o($Vd,[2,107]),{18:[1,296],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG},o($V41,[2,30]),{18:[1,297]},o($V61,[2,49]),o($V41,[2,29])],
defaultActions: {22:[2,1],185:[2,98],186:[2,105],188:[2,4],199:[2,5],216:[2,6],246:[2,95]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 83
break;
case 2:return 57
break;
case 3:return "class"
break;
case 4:return "yield"
break;
case 5:return "await"
break;
case 6:return "public"
break;
case 7:return "extends"
break;
case 8:return "implements"
break;
case 9:return "Dictionary"
break;
case 10:return "private"
break;
case 11:return "static"
break;
case 12:return "if"
break;
case 13:return "in"
break;
case 14:return "else"
break;
case 15:return "return"
break;
case 16:return "while"
break;
case 17:return "async"
break;
case 18:return "foreach"
break;
case 19:return "for"
break;
case 20:return "new"
break;
case 21:return 62
break;
case 22:return 74
break;
case 23:return 55
break;
case 24:return 26
break;
case 25:return 52
break;
case 26:return 89
break;
case 27:return 60
break;
case 28:return 59
break;
case 29:return 65
break;
case 30:return 66
break;
case 31:return 63
break;
case 32:return 64
break;
case 33:return 61
break;
case 34:return 40
break;
case 35:return 50
break;
case 36:return 69
break;
case 37:return 51
break;
case 38:return 70
break;
case 39:return 71
break;
case 40:return 49
break;
case 41:return 47
break;
case 42:return 68
break;
case 43:return 46
break;
case 44:return 48
break;
case 45:return 67
break;
case 46:return '^'
break;
case 47:return 17
break;
case 48:return 18
break;
case 49:return 77
break;
case 50:return 79
break;
case 51:return 28
break;
case 52:return 30
break;
case 53:return 16
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:yield\b)/,/^(?:await\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:async\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:!=)/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_sharp_parser;
exports.Parser = c_sharp_parser.Parser;
exports.parse = function () { return c_sharp_parser.parse.apply(c_sharp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}