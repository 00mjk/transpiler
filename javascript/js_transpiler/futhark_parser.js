/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var futhark_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,20],$V3=[1,18],$V4=[1,19],$V5=[1,43],$V6=[1,39],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,34],$Vb=[1,37],$Vc=[1,40],$Vd=[1,41],$Ve=[1,42],$Vf=[1,44],$Vg=[12,14,44],$Vh=[1,51],$Vi=[9,12,14,41,44],$Vj=[1,55],$Vk=[5,11,13],$Vl=[5,8,11,13],$Vm=[5,9,11,13,41,42,46,69,71,76,78,80],$Vn=[1,67],$Vo=[1,64],$Vp=[1,73],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[5,8,9,11,12,13,22,28,29,30,31,32,34,41,42,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,69,70,71,72,74,76,78,80],$VG=[1,89],$VH=[5,8,9,11,12,13,22,28,29,30,31,32,34,38,41,42,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,69,70,71,72,74,76,78,80],$VI=[2,74],$VJ=[12,22],$VK=[9,41],$VL=[22,70],$VM=[1,139],$VN=[2,88],$VO=[5,8,9,11,12,13,22,28,29,30,31,32,34,41,42,46,48,49,50,51,52,53,54,69,70,71,72,74,76,78,80],$VP=[2,47],$VQ=[5,8,9,11,12,13,22,28,29,30,31,32,34,41,42,46,48,49,50,51,52,53,54,55,56,57,69,70,71,72,74,76,78,80],$VR=[5,8,9,11,12,13,22,28,29,30,31,32,34,41,42,46,48,49,50,51,52,53,54,55,56,57,58,59,60,69,70,71,72,74,76,78,80],$VS=[5,11,13,22],$VT=[42,72],$VU=[31,32,48,49,50,51,52,53,54],$VV=[22,72];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"data_type_or":7,"|":8,"IDENTIFIER":9,"data_type_and":10,"data":11,"=":12,"let":13,":":14,"statements":15,"parameters":16,"types":17,"type":18,"parallel_lhs":19,"parallel_rhs":20,"'":21,",":22,"e":23,"statement":24,"statement_with_parentheses":25,"statement_with_semicolon":26,"loop":27,"while":28,"do":29,"for":30,"in":31,"<":32,"if":33,"then":34,"elif":35,"case":36,"parentheses_expr":37,"of":38,"case_statements":39,"declare_vars":40,"(":41,")":42,"case_statement":43,"->":44,"case_statements_":45,"_":46,"declare_var":47,"||":48,"&&":49,"==":50,"/=":51,"<=":52,">=":53,">":54,"++":55,"+":56,"-":57,"*":58,"/":59,"mod":60,"**":61,"^":62,"access_array":63,"!!":64,"access_arr":65,"key_values":66,"key_value":67,"\\\\":68,"{":69,"}":70,"[":71,"]":72,"exprs":73,"<-":74,"list_comprehensions":75,"NUMBER":76,"args":77,"STRING_LITERAL":78,"parameter":79,"else":80,"identifiers":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",9:"IDENTIFIER",11:"data",12:"=",13:"let",14:":",21:"'",22:",",27:"loop",28:"while",29:"do",30:"for",31:"in",32:"<",33:"if",34:"then",36:"case",38:"of",41:"(",42:")",44:"->",46:"_",48:"||",49:"&&",50:"==",51:"/=",52:"<=",53:">=",54:">",55:"++",56:"+",57:"-",58:"*",59:"/",60:"mod",61:"**",62:"^",64:"!!",68:"\\\\",69:"{",70:"}",71:"[",72:"]",74:"<-",76:"NUMBER",78:"STRING_LITERAL",80:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[10,2],[10,1],[6,4],[6,6],[6,4],[6,7],[6,5],[6,8],[6,6],[6,4],[17,3],[17,2],[19,3],[19,3],[20,3],[20,3],[24,1],[24,1],[24,6],[24,8],[24,8],[24,10],[24,8],[24,10],[25,5],[25,4],[25,3],[25,3],[43,3],[45,2],[45,1],[39,4],[47,4],[40,2],[40,1],[26,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[63,3],[66,3],[66,1],[67,3],[37,6],[37,3],[37,8],[37,3],[37,2],[37,3],[37,5],[37,7],[37,9],[37,1],[37,1],[37,3],[37,4],[37,1],[75,5],[75,1],[18,1],[79,5],[79,1],[16,2],[16,1],[65,3],[65,1],[73,3],[73,1],[77,2],[77,1],[35,2],[81,3],[81,1],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 16: case 35: case 39: case 83: case 89:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 17: case 36: case 40: case 84: case 86:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["data_type_or",$$[$0-2],$$[$0]];
break;
case 6:
this.$ = ["data_type_and",$$[$0-1],$$[$0]];
break;
case 7: case 22: case 59:
this.$ = $$[$0];
break;
case 8:
this.$ = ["algebraic_data_type",$$[$0-2],$$[$0]];
break;
case 9:
this.$ = ["function","public",$$[$0-2],$$[$0-4],[],$$[$0]];
break;
case 10:
this.$ = ["function","public","Object",$$[$0-2],[],$$[$0]];
break;
case 11:
this.$ = ["function","public",$$[$0-2],$$[$0-5],$$[$0-4],$$[$0]];
break;
case 12:
this.$ = ["function","public","Object",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 13:
this.$ = ["generic_function","public",$$[$0-2],$$[$0-6],$$[$0-4],$$[$0],$$[$0-5]];
break;
case 14:
this.$ = ["generic_function","public","Object",$$[$0-4],$$[$0-2],$$[$0],$$[$0-3]];
break;
case 15:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-2]],["parallel_rhs",$$[$0]]]
break;
case 18: case 20:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 19: case 21:
this.$ = [$$[$0-2],$$[$0]]
break;
case 23:
this.$ = ["semicolon",$$[$0]];
break;
case 24:
this.$ = ["futhark_while_loop",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 25:
this.$ = ["futhark_while_loop",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 26:
this.$ = ["futhark_foreach",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 27:
this.$ = ["futhark_foreach",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 28:
this.$ = ["futhark_for_loop",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 29:
this.$ = ["futhark_for_loop",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 30:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 31:
this.$ = ["switch",$$[$0-2],$$[$0]];
break;
case 32:
this.$ = ["lexically_scoped_vars",$$[$0-2],$$[$0]];
break;
case 33: case 67: case 75:
this.$ = $$[$0-1]
break;
case 34:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 37:
this.$ = $$[$0-3].concat([["default",["statements",$$[$0]]]])
break;
case 38:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 41:
this.$ = ["return",$$[$0]];
break;
case 42: case 43: case 44: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 56:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 55:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 57:
this.$ = ["**",$$[$0-2],$$[$0]];
break;
case 58:
this.$ = ["-",$$[$0]];
break;
case 60:
this.$ = ["access_array",$$[$0-2],[$$[$0]]];
break;
case 61:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 62: case 88: case 90: case 93:
this.$ = [$$[$0]];
break;
case 63:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 64:
this.$ = ["anonymous_function","Object",$$[$0-3],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 65:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 66:
this.$ = ["anonymous_function",$$[$0-3],$$[$0-5],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 68:
this.$ = ["initializer_list","Object",[]];
break;
case 69:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 70:
this.$ = ["initialize_tuple","Object",[$$[$0-3]].concat($$[$0-1])];
break;
case 71:
this.$ = ["list_comprehension",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 72:
this.$ = ["list_comprehension",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 73: case 77:
this.$ = yytext;
break;
case 76:

			if($$[$0-2] === "not"){
				this.$ = ["!",$$[$0-1]];
			}
			else{
				this.$ = ["function_call",$$[$0-2],$$[$0-1]];
			}
		
break;
case 78:
this.$ = ["list_comprehensions",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 81:
this.$ = [$$[$0-1],$$[$0-3]];
break;
case 82:
this.$ = ["Object",$$[$0]];
break;
case 85: case 87: case 92:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 91:
this.$ = ["else",$$[$0]];
break;
case 94:
this.$ = ["statements",[$$[$0]]]
break;
}
},
table: [{3:1,4:2,6:3,11:$V0,13:$V1},{1:[3]},{5:[1,6]},{4:7,5:[2,3],6:3,11:$V0,13:$V1},{9:[1,8]},{9:[1,9],19:10},{1:[2,1]},{5:[2,2]},{12:[1,11]},{9:$V2,12:[1,13],14:[1,12],16:14,17:15,21:$V3,22:[1,16],41:$V4,79:17},{12:[1,21],22:[1,22]},{7:23,9:[1,24]},{9:[1,25]},{9:$V5,13:$V6,15:26,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{12:[1,46],14:[1,45]},{9:$V2,16:47,41:$V4,79:17},{9:[1,48]},o($Vg,[2,84],{79:17,16:49,9:$V2,41:$V4}),{9:$Vh,18:50},{9:[1,52]},o($Vi,[2,82]),{9:$V5,20:53,23:54,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:[1,56]},o($Vk,[2,8],{8:[1,57]}),o($Vl,[2,5]),{12:[1,58]},o($Vk,[2,10]),o($Vm,[2,94]),o($Vm,[2,22]),o($Vm,[2,23]),{9:$V5,23:59,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:60,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,37:61,41:$Vj,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{31:[1,62]},{9:$Vn,13:$V6,23:66,25:63,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,63:65,68:$Vo,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vm,[2,41],{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),{13:$V6,31:[2,40],40:84,47:36},{9:$V5,23:85,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($VF,[2,59]),{9:[1,86]},{9:$VG,66:87,67:88},{9:$V5,23:92,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,72:[1,90],73:91,76:$Ve,78:$Vf},o($VH,[2,73]),o($VH,$VI),o($VH,[2,77]),{9:[1,93]},{9:$V5,13:$V6,15:94,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{12:[1,96],14:[1,95]},o($VJ,[2,19]),o($Vg,[2,83]),o($VK,[2,17],{17:97,21:$V3}),o([9,12,21,41],[2,80]),{14:[1,98]},o($Vk,[2,15],{22:[1,99]}),{22:[1,100],32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{9:$Vn,23:66,37:38,41:$Vj,57:$Vb,63:65,68:$Vo,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($VJ,[2,18]),{9:[1,101]},{9:$V5,13:$V6,15:102,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{12:[1,104],28:[1,103],30:[1,105],32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{32:$Vp,34:[1,106],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{38:[1,107]},{9:$V5,13:$V6,15:108,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{42:[1,109]},{9:$V2,16:110,41:$V4,79:17},{42:[1,111]},{22:[1,112],32:$Vp,42:[1,113],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},o([22,32,42,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],$VI,{77:114,37:116,9:$V5,41:$Vj,64:[1,115],69:$Vc,71:$Vd,76:$Ve,78:$Vf}),{9:$V5,23:117,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:118,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:119,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:120,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:121,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:122,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:123,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:124,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:125,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:126,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:127,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:128,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:129,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:130,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:131,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:132,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{31:[2,39]},o($VF,[2,58]),{12:[1,133]},{22:[1,135],70:[1,134]},o($VL,[2,62]),{12:[1,136]},o($VH,[2,68]),{72:[1,137]},{8:[1,138],22:$VM,32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,72:$VN},{12:[1,140]},o($Vk,[2,12]),{9:$Vh,18:141},{9:$V5,13:$V6,15:142,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($VK,[2,16]),{9:[1,143]},{9:$V5,23:144,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:145,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vl,[2,4]),o($Vk,[2,9]),{9:$V5,23:146,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:147,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:148,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,13:$V6,15:149,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,37:153,39:150,41:$Vj,43:152,45:151,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vm,[2,32]),o($Vm,[2,33]),{14:[1,155],44:[1,154]},o($VH,[2,67]),{9:$V5,23:157,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,73:156,76:$Ve,78:$Vf},o($VH,[2,75]),{42:[1,158]},{9:$V5,37:160,41:$Vj,65:159,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,37:116,41:$Vj,42:[2,90],69:$Vc,71:$Vd,76:$Ve,77:161,78:$Vf},o([5,8,9,11,12,13,22,28,29,30,31,34,41,42,46,48,69,70,71,72,74,76,78,80],[2,42],{32:$Vp,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o([5,8,9,11,12,13,22,28,29,30,31,34,41,42,46,48,49,69,70,71,72,74,76,78,80],[2,43],{32:$Vp,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VO,[2,44],{55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VO,[2,45],{55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VO,[2,46],{55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VO,$VP,{55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VO,[2,48],{55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VO,[2,49],{55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VQ,[2,50],{58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VQ,[2,51],{58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VQ,[2,52],{58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VR,[2,53],{61:$VD,62:$VE}),o($VR,[2,54],{61:$VD,62:$VE}),o($VR,[2,55],{61:$VD,62:$VE}),o($VF,[2,56]),o($VF,[2,57]),{9:$V5,23:162,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($VH,[2,65]),{9:$VG,67:163},{9:$V5,23:164,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($VH,[2,69]),{9:$V5,23:165,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:157,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,73:166,76:$Ve,78:$Vf},{9:$V5,13:$V6,15:167,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{12:[1,168]},o($Vk,[2,14]),{42:[1,169]},o($VS,[2,20],{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VS,[2,21],{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),{29:[1,170],32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{28:[1,171],30:[1,172],32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{31:[1,173],32:[1,174],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{35:175,80:[1,176]},o($Vm,[2,31]),{46:[1,177]},{9:$V5,37:153,41:$Vj,43:152,45:178,46:[2,36],69:$Vc,71:$Vd,76:$Ve,78:$Vf},{44:[1,179]},{9:$V5,23:180,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:[1,181]},{42:[1,182]},o($VT,$VN,{22:$VM,32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VH,[2,76]),{42:[2,60]},{42:[2,86],64:[1,183]},{42:[2,89]},o([13,31],[2,38],{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($VL,[2,61]),o($VL,[2,63],{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,74:[1,184]},o($VT,[2,87]),o($Vk,[2,11]),{9:$V5,13:$V6,15:185,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vi,[2,81]),{9:$V5,13:$V6,15:186,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:187,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:188,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:189,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:190,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vm,[2,30]),{9:$V5,13:$V6,15:191,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{44:[1,192]},{46:[2,35]},{9:$V5,13:$V6,15:193,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{32:$Vp,42:[1,194],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{44:[1,195]},o($VH,[2,70]),{9:$V5,37:160,41:$Vj,65:196,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:198,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,75:197,76:$Ve,78:$Vf},o($Vk,[2,13]),o($Vm,[2,24]),{29:[1,199],32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{31:[1,200],32:[1,201],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},{29:[1,202],32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},o($VU,$VP,{29:[1,203],55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($Vm,[2,91]),{9:$V5,13:$V6,15:204,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o([9,41,46,69,71,76,78],[2,34]),o($VH,[2,64]),{9:$V5,23:205,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{42:[2,85]},{22:[1,207],72:[1,206]},o($VV,[2,79],{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),{9:$V5,13:$V6,15:208,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:209,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,23:210,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,13:$V6,15:211,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,13:$V6,15:212,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vm,[2,37]),{32:$Vp,42:[1,213],48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},o($VH,[2,71]),{9:$V5,23:214,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vm,[2,25]),{29:[1,215],32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE},o($VU,$VP,{29:[1,216],55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),o($Vm,[2,26]),o($Vm,[2,28]),o($VH,[2,66]),{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,72:[1,217],74:[1,218]},{9:$V5,13:$V6,15:219,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},{9:$V5,13:$V6,15:220,23:35,24:27,25:28,26:29,27:$V7,33:$V8,36:$V9,37:38,40:33,41:$Va,47:36,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($VH,[2,72]),{9:$V5,23:221,37:38,41:$Vj,57:$Vb,69:$Vc,71:$Vd,76:$Ve,78:$Vf},o($Vm,[2,27]),o($Vm,[2,29]),o($VV,[2,78],{32:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE})],
defaultActions: {6:[2,1],7:[2,2],84:[2,39],159:[2,60],161:[2,89],178:[2,35],196:[2,85]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 76
break;
case 2:return 78
break;
case 3:return "otherwise"
break;
case 4:return "if"
break;
case 5:return 38
break;
case 6:return 29
break;
case 7:return "in"
break;
case 8:return "let"
break;
case 9:return 30
break;
case 10:return "else"
break;
case 11:return 27
break;
case 12:return "case"
break;
case 13:return "then"
break;
case 14:return "data"
break;
case 15:return "return"
break;
case 16:return 60
break;
case 17:return 22
break;
case 18:return ';'
break;
case 19:return "'"
break;
case 20:return '.'
break;
case 21:return '::'
break;
case 22:return 14
break;
case 23:return 49
break;
case 24:return 48
break;
case 25:return 8
break;
case 26:return 68
break;
case 27:return '>>'
break;
case 28:return 53
break;
case 29:return 54
break;
case 30:return 52
break;
case 31:return 74
break;
case 32:return 44
break;
case 33:return '<<'
break;
case 34:return 32
break;
case 35:return 50
break;
case 36:return 12
break;
case 37:return 62
break;
case 38:return '*='
break;
case 39:return 61
break;
case 40:return 58
break;
case 41:return 51
break;
case 42:return 59
break;
case 43:return '-='
break;
case 44:return '--'
break;
case 45:return 57
break;
case 46:return 55
break;
case 47:return '+='
break;
case 48:return 56
break;
case 49:return 69
break;
case 50:return 70
break;
case 51:return 64
break;
case 52:return 71
break;
case 53:return 72
break;
case 54:return 41
break;
case 55:return 42
break;
case 56:return 46
break;
case 57:return 9
break;
case 58:return 5
break;
case 59:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:otherwise\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:do\b)/,/^(?:in\b)/,/^(?:let\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:case\b)/,/^(?:then\b)/,/^(?:data\b)/,/^(?:return\b)/,/^(?:mod\b)/,/^(?:,)/,/^(?:;)/,/^(?:')/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:\\)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<-)/,/^(?:->)/,/^(?:<<)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?:!!)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = futhark_parser;
exports.Parser = futhark_parser.Parser;
exports.parse = function () { return futhark_parser.parse.apply(futhark_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}