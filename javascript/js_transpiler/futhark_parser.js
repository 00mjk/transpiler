/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var futhark_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,6],$V3=[1,23],$V4=[1,22],$V5=[1,21],$V6=[1,61],$V7=[1,57],$V8=[1,55],$V9=[1,52],$Va=[1,58],$Vb=[1,48],$Vc=[1,49],$Vd=[1,50],$Ve=[1,59],$Vf=[1,60],$Vg=[1,62],$Vh=[15,16,61],$Vi=[1,69],$Vj=[9,15,16,33,61],$Vk=[1,74],$Vl=[5,14,32,38],$Vm=[5,8,14,32,38],$Vn=[5,9,14,32,33,35,38,39,40,63,78,83,85,87],$Vo=[1,88],$Vp=[1,85],$Vq=[1,93],$Vr=[1,95],$Vs=[1,94],$Vt=[1,96],$Vu=[1,91],$Vv=[1,98],$Vw=[1,99],$Vx=[1,100],$Vy=[1,101],$Vz=[1,89],$VA=[1,90],$VB=[1,92],$VC=[1,97],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[5,8,9,14,16,22,23,24,25,26,27,28,29,30,32,33,35,38,39,40,42,48,49,50,51,53,63,65,66,67,68,69,70,71,78,79,81,83,85,87],$VH=[1,110],$VI=[5,8,9,14,16,22,23,24,25,26,27,28,29,30,32,33,35,38,39,40,42,48,49,50,51,53,57,61,63,65,66,67,68,69,70,71,73,78,79,81,83,85,87],$VJ=[2,100],$VK=[16,42],$VL=[9,33],$VM=[1,126],$VN=[2,11],$VO=[40,42],$VP=[1,166],$VQ=[2,114],$VR=[5,8,9,14,16,22,23,24,25,26,32,33,35,38,39,40,42,48,49,50,51,53,63,65,66,67,78,79,81,83,85,87],$VS=[2,73],$VT=[5,8,9,14,16,22,23,24,25,26,27,28,32,33,35,38,39,40,42,48,49,50,51,53,63,65,66,67,68,78,79,81,83,85,87],$VU=[5,8,9,14,16,22,23,24,25,26,27,28,29,30,32,33,35,38,39,40,42,48,49,50,51,53,63,65,66,67,68,69,78,79,81,83,85,87],$VV=[5,14,32,38,42],$VW=[35,79],$VX=[14,40],$VY=[22,23,24,25,26,51,65,66,67],$VZ=[42,79];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"data_type_or":7,"|":8,"IDENTIFIER":9,"data_type_and":10,"class_statements_":11,"class_statement":12,"class_statements":13,"let":14,":":15,"=":16,"statements":17,"parameters":18,"types":19,"type":20,"OPERATOR":21,"<=":22,">=":23,"<":24,">":25,"==":26,"+":27,"-":28,"*":29,"/":30,"!":31,"data":32,"(":33,"op_or_identifier":34,")":35,"parallel_lhs":36,"parallel_rhs":37,"module":38,"{":39,"}":40,"'":41,",":42,"e":43,"statement":44,"statement_with_parentheses":45,"statement_with_semicolon":46,"loop":47,"while":48,"do":49,"for":50,"in":51,"if":52,"then":53,"elif":54,"case":55,"parentheses_expr":56,"of":57,"case_statements":58,"declare_vars":59,"case_statement":60,"->":61,"case_statements_":62,"_":63,"declare_var":64,"||":65,"&&":66,"/=":67,"++":68,"mod":69,"**":70,"^":71,"access_array":72,"!!":73,"access_arr":74,"key_values":75,"key_value":76,"\\\\":77,"[":78,"]":79,"exprs":80,"<-":81,"list_comprehensions":82,"NUMBER":83,"args":84,"STRING_LITERAL":85,"parameter":86,"else":87,"identifiers":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",9:"IDENTIFIER",14:"let",15:":",16:"=",22:"<=",23:">=",24:"<",25:">",26:"==",27:"+",28:"-",29:"*",30:"/",31:"!",32:"data",33:"(",35:")",38:"module",39:"{",40:"}",41:"'",42:",",47:"loop",48:"while",49:"do",50:"for",51:"in",52:"if",53:"then",55:"case",57:"of",61:"->",63:"_",65:"||",66:"&&",67:"/=",68:"++",69:"mod",70:"**",71:"^",73:"!!",77:"\\\\",78:"[",79:"]",81:"<-",83:"NUMBER",85:"STRING_LITERAL",87:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[10,2],[10,1],[11,2],[11,1],[13,1],[13,0],[12,6],[12,4],[12,7],[12,5],[12,8],[12,6],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[6,4],[6,6],[6,4],[6,7],[6,5],[6,8],[6,6],[6,7],[6,9],[6,4],[6,6],[6,7],[34,1],[34,1],[19,3],[19,2],[36,3],[36,3],[37,3],[37,3],[44,1],[44,1],[44,6],[44,8],[44,8],[44,10],[44,8],[44,10],[45,5],[45,4],[45,3],[45,3],[60,3],[62,2],[62,1],[58,4],[64,4],[59,2],[59,1],[46,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,1],[72,3],[75,3],[75,1],[76,3],[56,6],[56,3],[56,8],[56,3],[56,2],[56,3],[56,5],[56,7],[56,9],[56,1],[56,1],[56,3],[56,4],[56,1],[82,5],[82,1],[20,1],[86,5],[86,1],[18,2],[18,1],[74,3],[74,1],[80,3],[80,1],[84,2],[84,1],[54,2],[88,3],[88,1],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 8: case 42: case 61: case 65: case 109: case 115:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 9: case 43: case 62: case 66: case 110: case 112:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["data_type_or",$$[$0-2],$$[$0]];
break;
case 6:
this.$ = ["data_type_and",$$[$0-1],$$[$0]];
break;
case 7: case 48: case 85:
this.$ = $$[$0];
break;
case 10:
this.$ = ["class_statements",$$[$0]]
break;
case 11:
this.$ = ["class_statements",[]]
break;
case 12:
this.$ = ["instance_method","public",$$[$0-2],$$[$0-4],[],$$[$0]];
break;
case 13:
this.$ = ["instance_method","public","Object",$$[$0-2],[],$$[$0]];
break;
case 14:
this.$ = ["instance_method","public",$$[$0-2],$$[$0-5],$$[$0-4],$$[$0]];
break;
case 15:
this.$ = ["instance_method","public","Object",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["generic_instance_method","public",$$[$0-2],$$[$0-6],$$[$0-4],$$[$0],$$[$0-5]];
break;
case 17:
this.$ = ["generic_instance_method","public","Object",$$[$0-4],$$[$0-2],$$[$0],$$[$0-3]];
break;
case 28:
this.$ = ["algebraic_data_type",$$[$0-2],$$[$0]];
break;
case 29:
this.$ = ["function","public",$$[$0-2],$$[$0-4],[],$$[$0]];
break;
case 30:
this.$ = ["function","public","Object",$$[$0-2],[],$$[$0]];
break;
case 31:
this.$ = ["function","public",$$[$0-2],$$[$0-5],$$[$0-4],$$[$0]];
break;
case 32:
this.$ = ["function","public","Object",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["generic_function","public",$$[$0-2],$$[$0-6],$$[$0-4],$$[$0],$$[$0-5]];
break;
case 34:
this.$ = ["generic_function","public","Object",$$[$0-4],$$[$0-2],$$[$0],$$[$0-3]];
break;
case 35:
this.$ = ["overload_operator","public","Object",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["overload_operator","public",$$[$0-2],$$[$0-6],$$[$0-4],$$[$0]];
break;
case 37:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-2]],["parallel_rhs",$$[$0]]]
break;
case 38:
this.$ = ["class","public",$$[$0-4],$$[$0-1]];
break;
case 39:
this.$ = ["scala_class","public",$$[$0-5],$$[$0-4],$$[$0-1]];
break;
case 44: case 46:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 45: case 47:
this.$ = [$$[$0-2],$$[$0]]
break;
case 49:
this.$ = ["semicolon",$$[$0]];
break;
case 50:
this.$ = ["futhark_while_loop",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 51:
this.$ = ["futhark_while_loop",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 52:
this.$ = ["futhark_foreach",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 53:
this.$ = ["futhark_foreach",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 54:
this.$ = ["futhark_for_loop",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 55:
this.$ = ["futhark_for_loop",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]]
break;
case 56:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 57:
this.$ = ["switch",$$[$0-2],$$[$0]];
break;
case 58:
this.$ = ["lexically_scoped_vars",$$[$0-2],$$[$0]];
break;
case 59: case 93: case 101:
this.$ = $$[$0-1]
break;
case 60:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 63:
this.$ = $$[$0-3].concat([["default",["statements",$$[$0]]]])
break;
case 64:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 67:
this.$ = ["return",$$[$0]];
break;
case 68: case 69: case 70: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 82:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 71:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 81:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 83:
this.$ = ["**",$$[$0-2],$$[$0]];
break;
case 84:
this.$ = ["-",$$[$0]];
break;
case 86:
this.$ = ["access_array",$$[$0-2],[$$[$0]]];
break;
case 87:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 88: case 114: case 116: case 119:
this.$ = [$$[$0]];
break;
case 89:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 90:
this.$ = ["anonymous_function","Object",$$[$0-3],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 91:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 92:
this.$ = ["anonymous_function",$$[$0-3],$$[$0-5],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 94:
this.$ = ["initializer_list","Object",[]];
break;
case 95:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 96:
this.$ = ["initialize_tuple","Object",[$$[$0-3]].concat($$[$0-1])];
break;
case 97:
this.$ = ["list_comprehension",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 98:
this.$ = ["list_comprehension",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 99: case 103:
this.$ = yytext;
break;
case 102:

			if($$[$0-2] === "not"){
				this.$ = ["!",$$[$0-1]];
			}
			else{
				this.$ = ["function_call",$$[$0-2],$$[$0-1]];
			}
		
break;
case 104:
this.$ = ["list_comprehensions",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 107:
this.$ = [$$[$0-1],$$[$0-3]];
break;
case 108:
this.$ = ["Object",$$[$0]];
break;
case 111: case 113: case 118:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 117:
this.$ = ["else",$$[$0]];
break;
case 120:
this.$ = ["statements",[$$[$0]]]
break;
}
},
table: [{3:1,4:2,6:3,14:$V0,32:$V1,38:$V2},{1:[3]},{5:[1,7]},{4:8,5:[2,3],6:3,14:$V0,32:$V1,38:$V2},{9:[1,9]},{9:[1,10],33:[1,11],36:12},{9:[1,13]},{1:[2,1]},{5:[2,2]},{16:[1,14]},{9:$V3,15:[1,15],16:[1,16],18:17,19:18,33:$V4,41:$V5,42:[1,19],86:20},{9:[1,26],21:25,22:[1,27],23:[1,28],24:[1,29],25:[1,30],26:[1,31],27:[1,32],28:[1,33],29:[1,34],30:[1,35],31:[1,36],34:24},{16:[1,37],42:[1,38]},{9:$V3,16:[1,39],18:40,33:$V4,86:20},{7:41,9:[1,42]},{9:[1,43]},{9:$V6,14:$V7,17:44,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{15:[1,63],16:[1,64]},{9:$V3,18:65,33:$V4,86:20},{9:[1,66]},o($Vh,[2,110],{86:20,18:67,9:$V3,33:$V4}),{9:$Vi,20:68},{9:[1,70]},o($Vj,[2,108]),{35:[1,71]},{35:[2,40]},{35:[2,41]},{35:[2,18]},{35:[2,19]},{35:[2,20]},{35:[2,21]},{35:[2,22]},{35:[2,23]},{35:[2,24]},{35:[2,25]},{35:[2,26]},{35:[2,27]},{9:$V6,28:$V8,33:$Vk,37:72,39:$Va,43:73,56:56,78:$Ve,83:$Vf,85:$Vg},{9:[1,75]},{39:[1,76]},{16:[1,77]},o($Vl,[2,28],{8:[1,78]}),o($Vm,[2,5]),{16:[1,79]},o($Vl,[2,30]),o($Vn,[2,120]),o($Vn,[2,48]),o($Vn,[2,49]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:80,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:81,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,33:$Vk,39:$Va,56:82,78:$Ve,83:$Vf,85:$Vg},{51:[1,83]},{9:$Vo,14:$V7,28:$V8,33:$V9,39:$Va,43:87,45:84,52:$Vc,55:$Vd,56:56,59:51,64:54,72:86,77:$Vp,78:$Ve,83:$Vf,85:$Vg},o($Vn,[2,67],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),{14:$V7,51:[2,66],59:105,64:54},{9:$V6,28:$V8,33:$Vk,39:$Va,43:106,56:56,78:$Ve,83:$Vf,85:$Vg},o($VG,[2,85]),{9:[1,107]},{9:$VH,75:108,76:109},{9:$V6,28:$V8,33:$Vk,39:$Va,43:113,56:56,78:$Ve,79:[1,111],80:112,83:$Vf,85:$Vg},o($VI,[2,99]),o($VI,$VJ),o($VI,[2,103]),{9:[1,114]},{9:$V6,14:$V7,17:115,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{15:[1,116],16:[1,117]},o($VK,[2,45]),o($Vh,[2,109]),o($VL,[2,43],{19:118,41:$V5}),o([9,16,33,41],[2,106]),{15:[1,119]},{9:$V3,18:120,33:$V4,86:20},o($Vl,[2,37],{42:[1,121]}),{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,42:[1,122],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{9:$Vo,28:$V8,33:$Vk,39:$Va,43:87,56:56,72:86,77:$Vp,78:$Ve,83:$Vf,85:$Vg},o($VK,[2,44]),{11:124,12:125,13:123,14:$VM,40:$VN},{39:[1,127]},{9:[1,128]},{9:$V6,14:$V7,17:129,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{16:[1,131],22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,48:[1,130],50:[1,132],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,53:[1,133],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{57:[1,134]},{9:$V6,14:$V7,17:135,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{35:[1,136]},{9:$V3,18:137,33:$V4,86:20},{35:[1,138]},{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,35:[1,140],42:[1,139],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o([22,23,24,25,26,27,28,29,30,35,42,65,66,67,68,69,70,71],$VJ,{84:141,56:143,9:$V6,33:$Vk,39:$Va,73:[1,142],78:$Ve,83:$Vf,85:$Vg}),{9:$V6,28:$V8,33:$Vk,39:$Va,43:144,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:145,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:146,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:147,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:148,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:149,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:150,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:151,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:152,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:153,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:154,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:155,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:156,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:157,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:158,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:159,56:56,78:$Ve,83:$Vf,85:$Vg},{51:[2,65]},o($VG,[2,84]),{16:[1,160]},{40:[1,161],42:[1,162]},o($VO,[2,88]),{16:[1,163]},o($VI,[2,94]),{79:[1,164]},{8:[1,165],22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,42:$VP,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,79:$VQ},{16:[1,167]},o($Vl,[2,32]),{9:$Vi,20:168},{9:$V6,14:$V7,17:169,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},o($VL,[2,42]),{9:[1,170]},{15:[1,172],16:[1,171]},{9:$V6,28:$V8,33:$Vk,39:$Va,43:173,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:174,56:56,78:$Ve,83:$Vf,85:$Vg},{40:[1,175]},{40:[2,10]},{11:176,12:125,14:$VM,40:[2,9]},{9:[1,177]},{11:124,12:125,13:178,14:$VM,40:$VN},o($Vm,[2,4]),o($Vl,[2,29]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:179,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:180,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:181,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,14:$V7,17:182,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$V6,33:$Vk,39:$Va,56:186,58:183,60:185,62:184,78:$Ve,83:$Vf,85:$Vg},o($Vn,[2,58]),o($Vn,[2,59]),{15:[1,188],61:[1,187]},o($VI,[2,93]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:190,56:56,78:$Ve,80:189,83:$Vf,85:$Vg},o($VI,[2,101]),{35:[1,191]},{9:$V6,33:$Vk,39:$Va,56:193,74:192,78:$Ve,83:$Vf,85:$Vg},{9:$V6,33:$Vk,35:[2,116],39:$Va,56:143,78:$Ve,83:$Vf,84:194,85:$Vg},o([5,8,9,14,16,32,33,35,38,39,40,42,48,49,50,51,53,63,65,78,79,81,83,85,87],[2,68],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o([5,8,9,14,16,32,33,35,38,39,40,42,48,49,50,51,53,63,65,66,78,79,81,83,85,87],[2,69],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VR,[2,70],{27:$Vv,28:$Vw,29:$Vx,30:$Vy,68:$VC,69:$VD,70:$VE,71:$VF}),o($VR,[2,71],{27:$Vv,28:$Vw,29:$Vx,30:$Vy,68:$VC,69:$VD,70:$VE,71:$VF}),o($VR,[2,72],{27:$Vv,28:$Vw,29:$Vx,30:$Vy,68:$VC,69:$VD,70:$VE,71:$VF}),o($VR,$VS,{27:$Vv,28:$Vw,29:$Vx,30:$Vy,68:$VC,69:$VD,70:$VE,71:$VF}),o($VR,[2,74],{27:$Vv,28:$Vw,29:$Vx,30:$Vy,68:$VC,69:$VD,70:$VE,71:$VF}),o($VR,[2,75],{27:$Vv,28:$Vw,29:$Vx,30:$Vy,68:$VC,69:$VD,70:$VE,71:$VF}),o($VT,[2,76],{29:$Vx,30:$Vy,69:$VD,70:$VE,71:$VF}),o($VT,[2,77],{29:$Vx,30:$Vy,69:$VD,70:$VE,71:$VF}),o($VT,[2,78],{29:$Vx,30:$Vy,69:$VD,70:$VE,71:$VF}),o($VU,[2,79],{70:$VE,71:$VF}),o($VU,[2,80],{70:$VE,71:$VF}),o($VU,[2,81],{70:$VE,71:$VF}),o($VG,[2,82]),o($VG,[2,83]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:195,56:56,78:$Ve,83:$Vf,85:$Vg},o($VI,[2,91]),{9:$VH,76:196},{9:$V6,28:$V8,33:$Vk,39:$Va,43:197,56:56,78:$Ve,83:$Vf,85:$Vg},o($VI,[2,95]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:198,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:190,56:56,78:$Ve,80:199,83:$Vf,85:$Vg},{9:$V6,14:$V7,17:200,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{16:[1,201]},o($Vl,[2,34]),{35:[1,202]},{9:$V6,14:$V7,17:203,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$Vi,20:204},o($VV,[2,46],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VV,[2,47],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($Vl,[2,38]),{40:[2,8]},{9:$V3,15:[1,205],16:[1,206],18:207,19:208,33:$V4,41:$V5,86:20},{40:[1,209]},{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,49:[1,210],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,48:[1,211],50:[1,212],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{22:$Vq,23:$Vr,24:[1,214],25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,51:[1,213],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{54:215,87:[1,216]},o($Vn,[2,57]),{63:[1,217]},{9:$V6,33:$Vk,39:$Va,56:186,60:185,62:218,63:[2,62],78:$Ve,83:$Vf,85:$Vg},{61:[1,219]},{9:$V6,28:$V8,33:$Vk,39:$Va,43:220,56:56,78:$Ve,83:$Vf,85:$Vg},{9:[1,221]},{35:[1,222]},o($VW,$VQ,{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,42:$VP,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VI,[2,102]),{35:[2,86]},{35:[2,112],73:[1,223]},{35:[2,115]},o([14,51],[2,64],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VO,[2,87]),o($VO,[2,89],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,81:[1,224]},o($VW,[2,113]),o($Vl,[2,31]),{9:$V6,14:$V7,17:225,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},o($Vj,[2,107]),o($Vl,[2,35]),{16:[1,226]},{9:[1,227]},{9:$V6,14:$V7,17:228,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{15:[1,229],16:[1,230]},{9:$V3,18:231,33:$V4,86:20},o($Vl,[2,39]),{9:$V6,14:$V7,17:232,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:233,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:234,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:235,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:236,56:56,78:$Ve,83:$Vf,85:$Vg},o($Vn,[2,56]),{9:$V6,14:$V7,17:237,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{61:[1,238]},{63:[2,61]},{9:$V6,14:$V7,17:239,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,35:[1,240],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{61:[1,241]},o($VI,[2,96]),{9:$V6,33:$Vk,39:$Va,56:193,74:242,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:244,56:56,78:$Ve,82:243,83:$Vf,85:$Vg},o($Vl,[2,33]),{9:$V6,14:$V7,17:245,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{16:[1,246]},o($VX,[2,13]),{9:[1,247]},{9:$V6,14:$V7,17:248,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{15:[1,249],16:[1,250]},o($Vn,[2,50]),{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,49:[1,251],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{22:$Vq,23:$Vr,24:[1,253],25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,51:[1,252],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,49:[1,254],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($VY,$VS,{27:$Vv,28:$Vw,29:$Vx,30:$Vy,49:[1,255],68:$VC,69:$VD,70:$VE,71:$VF}),o($Vn,[2,117]),{9:$V6,14:$V7,17:256,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},o([9,33,39,63,78,83,85],[2,60]),o($VI,[2,90]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:257,56:56,78:$Ve,83:$Vf,85:$Vg},{35:[2,111]},{42:[1,259],79:[1,258]},o($VZ,[2,105],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($Vl,[2,36]),{9:$V6,14:$V7,17:260,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{16:[1,261]},o($VX,[2,15]),{9:$Vi,20:262},{9:$V6,14:$V7,17:263,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$V6,14:$V7,17:264,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:265,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,28:$V8,33:$Vk,39:$Va,43:266,56:56,78:$Ve,83:$Vf,85:$Vg},{9:$V6,14:$V7,17:267,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$V6,14:$V7,17:268,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},o($Vn,[2,63]),{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,35:[1,269],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($VI,[2,97]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:270,56:56,78:$Ve,83:$Vf,85:$Vg},o($VX,[2,12]),{9:$V6,14:$V7,17:271,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{16:[1,272]},o($VX,[2,17]),o($Vn,[2,51]),{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,49:[1,273],65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($VY,$VS,{27:$Vv,28:$Vw,29:$Vx,30:$Vy,49:[1,274],68:$VC,69:$VD,70:$VE,71:$VF}),o($Vn,[2,52]),o($Vn,[2,54]),o($VI,[2,92]),{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,79:[1,275],81:[1,276]},o($VX,[2,14]),{9:$V6,14:$V7,17:277,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$V6,14:$V7,17:278,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},{9:$V6,14:$V7,17:279,28:$V8,33:$V9,39:$Va,43:53,44:45,45:46,46:47,47:$Vb,52:$Vc,55:$Vd,56:56,59:51,64:54,78:$Ve,83:$Vf,85:$Vg},o($VI,[2,98]),{9:$V6,28:$V8,33:$Vk,39:$Va,43:280,56:56,78:$Ve,83:$Vf,85:$Vg},o($VX,[2,16]),o($Vn,[2,53]),o($Vn,[2,55]),o($VZ,[2,104],{22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF})],
defaultActions: {7:[2,1],8:[2,2],25:[2,40],26:[2,41],27:[2,18],28:[2,19],29:[2,20],30:[2,21],31:[2,22],32:[2,23],33:[2,24],34:[2,25],35:[2,26],36:[2,27],105:[2,65],124:[2,10],176:[2,8],192:[2,86],194:[2,115],218:[2,61],242:[2,111]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 83
break;
case 2:return 85
break;
case 3:return "otherwise"
break;
case 4:return "if"
break;
case 5:return 57
break;
case 6:return 49
break;
case 7:return "in"
break;
case 8:return "let"
break;
case 9:return 50
break;
case 10:return "else"
break;
case 11:return 47
break;
case 12:return "case"
break;
case 13:return "then"
break;
case 14:return "data"
break;
case 15:return "type"
break;
case 16:return "return"
break;
case 17:return "module"
break;
case 18:return 69
break;
case 19:return 42
break;
case 20:return ';'
break;
case 21:return "'"
break;
case 22:return '.'
break;
case 23:return '::'
break;
case 24:return 15
break;
case 25:return 66
break;
case 26:return 65
break;
case 27:return 8
break;
case 28:return 77
break;
case 29:return '>>'
break;
case 30:return 23
break;
case 31:return 25
break;
case 32:return 22
break;
case 33:return 81
break;
case 34:return 61
break;
case 35:return '<<'
break;
case 36:return 24
break;
case 37:return 26
break;
case 38:return 16
break;
case 39:return 71
break;
case 40:return '*='
break;
case 41:return 70
break;
case 42:return 29
break;
case 43:return 67
break;
case 44:return 30
break;
case 45:return '-='
break;
case 46:return '--'
break;
case 47:return 28
break;
case 48:return 68
break;
case 49:return '+='
break;
case 50:return 27
break;
case 51:return 39
break;
case 52:return 40
break;
case 53:return 73
break;
case 54:return 78
break;
case 55:return 79
break;
case 56:return 33
break;
case 57:return 35
break;
case 58:return 63
break;
case 59:return 9
break;
case 60:return 5
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:otherwise\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:do\b)/,/^(?:in\b)/,/^(?:let\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:case\b)/,/^(?:then\b)/,/^(?:data\b)/,/^(?:type\b)/,/^(?:return\b)/,/^(?:module\b)/,/^(?:mod\b)/,/^(?:,)/,/^(?:;)/,/^(?:')/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:\\)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<-)/,/^(?:->)/,/^(?:<<)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\^)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\{)/,/^(?:\})/,/^(?:!!)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = futhark_parser;
exports.Parser = futhark_parser.Parser;
exports.parse = function () { return futhark_parser.parse.apply(futhark_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}