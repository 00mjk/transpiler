/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var go_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,13],$V2=[1,8],$V3=[1,10],$V4=[1,12],$V5=[1,14],$V6=[1,18],$V7=[5,23,24,28,36,40,41,80],$V8=[5,23,24,27,28,36,40,41,80],$V9=[1,33],$Va=[1,26],$Vb=[1,32],$Vc=[1,29],$Vd=[1,34],$Ve=[1,35],$Vf=[1,38],$Vg=[1,49],$Vh=[1,48],$Vi=[1,60],$Vj=[1,61],$Vk=[1,62],$Vl=[1,63],$Vm=[1,64],$Vn=[1,65],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[2,76],$Vu=[5,23,24,26,27,28,31,36,39,40,41,56,57,58,59,60,61,62,63,64,65,66,70,80],$Vv=[5,23,24,26,27,28,31,36,39,40,41,52,56,57,58,59,60,61,62,63,64,65,66,70,76,80],$Vw=[2,95],$Vx=[1,94],$Vy=[1,126],$Vz=[2,83],$VA=[39,70],$VB=[31,32],$VC=[1,136],$VD=[23,24,28,36,40,41,80],$VE=[23,24,27,28,36,40,41,80],$VF=[5,23,24,26,27,28,31,36,39,40,41,56,57,58,59,60,61,70,80],$VG=[5,23,24,26,27,28,31,36,39,40,41,56,57,58,59,60,61,62,63,70,80],$VH=[1,153],$VI=[24,26,27,31,39],$VJ=[1,171],$VK=[5,23,24,27,28,31,36,40,41,80];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"statements_":6,"statements_with_vars":7,"initialize_vars":8,"statements_without_vars":9,"statement":10,"initialize_var1":11,"initialize_var":12,"statements":13,"struct_statements":14,"struct_statement":15,"identifiers":16,"type_":17,"access_modifier":18,"public":19,"private":20,"top_level_statement":21,"statement_with_semicolon":22,"type":23,"IDENTIFIER":24,"struct":25,"{":26,"}":27,"for":28,"e":29,"_":30,",":31,":=":32,"range":33,"dot_expr":34,"if_statement":35,"func":36,"(":37,"parameters":38,")":39,"return":40,"var":41,"parallel_assignment":42,"access_array":43,"=":44,"++":45,"--":46,"+=":47,"-=":48,"*=":49,"/=":50,"function_call":51,".":52,"parallel_lhs":53,"parallel_rhs":54,"initialize_var_":55,"||":56,"&&":57,"<=":58,"<":59,">=":60,">":61,"+":62,"-":63,"*":64,"/":65,"%":66,"parentheses_expr":67,"[":68,"access_arr":69,"]":70,"exprs":71,"function":72,"NUMBER":73,"STRING_LITERAL":74,"parameter":75,"][":76,"types":77,"elif":78,"else":79,"if":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"public",20:"private",23:"type",24:"IDENTIFIER",25:"struct",26:"{",27:"}",28:"for",30:"_",31:",",32:":=",33:"range",36:"func",37:"(",39:")",40:"return",41:"var",44:"=",45:"++",46:"--",47:"+=",48:"-=",49:"*=",50:"/=",52:".",56:"||",57:"&&",58:"<=",59:"<",60:">=",61:">",62:"+",63:"-",64:"*",65:"/",66:"%",68:"[",70:"]",72:"function",73:"NUMBER",74:"STRING_LITERAL",76:"][",79:"else",80:"if"},
productions_: [0,[3,2],[6,1],[6,2],[9,2],[9,1],[7,2],[7,1],[8,2],[8,1],[13,1],[14,2],[14,1],[15,2],[18,1],[18,1],[21,1],[21,1],[4,2],[4,1],[10,1],[10,6],[10,5],[10,10],[10,10],[10,1],[10,12],[10,9],[22,2],[22,3],[22,2],[22,1],[22,3],[22,3],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[42,3],[53,3],[53,3],[54,3],[54,3],[11,1],[12,1],[55,4],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[34,3],[34,1],[43,4],[51,3],[51,4],[67,7],[67,1],[67,1],[67,2],[67,3],[67,3],[67,1],[67,1],[67,1],[17,3],[17,1],[75,2],[38,3],[38,1],[38,0],[69,3],[69,1],[71,3],[71,1],[77,3],[77,1],[78,7],[78,4],[35,6],[35,5],[16,3],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 3:
this.$ = [["lexically_scoped_vars",$$[$0-1],["statements",$$[$0]]]]
break;
case 4:
this.$ = $$[$0-1].concat($$[$01]);
break;
case 5: case 9: case 12: case 19: case 65: case 82: case 85:
this.$ =
 [$$[$0]];
break;
case 6:
this.$ = $$[$0-1].concat([["semicolon",$$[$0]]]);
break;
case 8: case 18:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 10:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 13:
this.$ = ["struct_statement",$$[$0],$$[$0-1]];
break;
case 17:
this.$ = ["semicolon",$$[$0]]
break;
case 20:
this.$ = ["semicolon",$$[$0]];
break;
case 21:
this.$ = ["struct",$$[$0-5],$$[$0-1]]
break;
case 22:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 23:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["foreach_with_index","Object",$$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 26:
this.$ = ["function_with_retval",$$[$0-5],"public",$$[$0-4],$$[$0-10],$$[$0-8],$$[$0-1]];
break;
case 27:
this.$ = ["function","public",$$[$0-3],$$[$0-7],$$[$0-5],$$[$0-1]];
break;
case 28:
this.$ = ["return",$$[$0]];
break;
case 29:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 32: case 33:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 34: case 35:
this.$ = [$$[$0],$$[$0-1]];
break;
case 36: case 37: case 38: case 39: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 40: case 41:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 43:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-2]],["parallel_rhs",$$[$0]]]
break;
case 44: case 46:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 45: case 47:
this.$ = [$$[$0-2],$$[$0]]
break;
case 48:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 49:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 50:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 62:
this.$ = ["-",$$[$0]];
break;
case 63:
this.$ = [".", $$[$0]];
break;
case 64: case 81: case 84: case 86: case 88: case 94:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 66:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 67:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 68:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 69:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 72:
this.$ = ["initializer_list","Object",[]];
break;
case 73:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 74:
this.$ = $$[$0-1];
break;
case 75: case 76: case 77:
this.$ = yytext;
break;
case 78:
this.$ = [$$[$0-2],"[]"];
break;
case 80:
this.$ = [$$[$0], $$[$0-1]];
break;
case 83:
this.$ = []
break;
case 87: case 89: case 95:
this.$ = [$$[$0]];
break;
case 90:
this.$ = ["elif",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 91:
this.$ = ["else",$$[$0-1]];
break;
case 92:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 93:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,10:4,11:5,21:3,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:11,80:$V6},{1:[3]},{5:[1,20],10:4,11:5,21:21,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:11,80:$V6},o($V7,[2,19]),o($V7,[2,16]),o($V7,[2,17]),o($V8,[2,20]),{24:[1,22]},{24:[1,25],29:23,30:[1,24],34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},o($V8,[2,25]),{24:[1,36]},o($V8,[2,48]),{24:$Vf,29:37,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{31:[1,50],32:[1,39],37:$Vg,44:[1,40],45:[1,41],46:[1,42],47:[1,43],48:[1,44],49:[1,45],50:[1,46],52:[1,47],68:$Vh},{16:51,24:[1,52]},o($V8,[2,31]),{44:[1,53]},o($V8,[2,42],{52:[1,54]}),{24:$Vf,29:55,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{31:[1,57],32:[1,56]},{1:[2,1]},o($V7,[2,18]),{25:[1,58]},{26:[1,59],56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{31:[1,71]},o([26,52,56,57,58,59,60,61,62,63,64,65,66],$Vt,{31:[1,72],37:$Vg,68:$Vh}),{24:$Vf,29:73,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},o($Vu,[2,63]),o($Vu,[2,65],{52:[1,74]}),{37:[1,75]},o($Vv,[2,70]),o($Vv,[2,71]),{24:$Vf,29:78,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,70:[1,76],71:77,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:79,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},o($Vv,[2,75]),o($Vv,[2,77]),{37:[1,80]},o($V8,[2,28],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($Vv,$Vt,{37:$Vg,68:$Vh}),{24:$Vf,29:81,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:82,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},o($V8,[2,34]),o($V8,[2,35]),{24:$Vf,29:83,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:84,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:85,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:86,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,34:87,37:$V9,43:30,51:31,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,37:$V9,43:30,51:31,67:89,68:$Vb,69:88,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:78,34:27,37:$V9,39:[1,90],43:30,51:31,63:$Va,67:28,68:$Vb,71:91,72:$Vc,73:$Vd,74:$Ve},{24:[1,92]},o($V8,[2,30]),o($V8,$Vw,{31:$Vx,44:[1,93]}),{24:$Vf,29:95,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,34:96,37:$V9,43:30,51:31,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{26:[1,97],56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{24:$Vf,29:99,34:27,37:$V9,43:30,51:31,54:98,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:[1,100]},{26:[1,101]},{6:103,7:104,8:105,9:106,10:108,12:107,13:102,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},{24:$Vf,29:110,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:111,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:112,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:113,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:114,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:115,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:116,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:117,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:118,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:119,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:120,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:[1,121]},{24:[1,122]},o($Vu,[2,62]),{24:$Vf,34:123,37:$V9,43:30,51:31,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vy,38:124,39:$Vz,75:125},o($Vv,[2,72]),{70:[1,127]},o($VA,[2,87],{31:[1,128],56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),{39:[1,129],56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{24:$Vy,38:130,39:$Vz,75:125},o($V8,[2,29],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,33],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,36],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,37],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,38],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,39],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,41]),{70:[1,131]},{70:[2,85],76:[1,132]},o($Vv,[2,67]),{39:[1,133]},o($VB,[2,45]),{24:$Vf,29:134,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{16:135,24:$VC},o($V8,[2,32],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,40]),{6:103,7:104,8:105,9:106,10:108,12:107,13:137,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},o($V8,[2,43],{31:[1,138]}),{31:[1,139],56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($VB,[2,44]),{14:140,15:141,16:142,24:$VC},{27:[1,143]},{27:[2,10]},{27:[2,2]},{7:144,9:106,10:108,12:145,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},{10:147,11:146,22:6,23:$V0,24:$V1,27:[2,7],28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:11,80:$V6},o($VD,[2,9]),o($VE,[2,5]),o($VD,[2,49]),o([5,23,24,26,27,28,31,36,39,40,41,56,70,80],[2,51],{57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o([5,23,24,26,27,28,31,36,39,40,41,56,57,70,80],[2,52],{58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VF,[2,53],{62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VF,[2,54],{62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VF,[2,55],{62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VF,[2,56],{62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VG,[2,57],{64:$Vq,65:$Vr,66:$Vs}),o($VG,[2,58],{64:$Vq,65:$Vr,66:$Vs}),o($Vu,[2,59]),o($Vu,[2,60]),o($Vu,[2,61]),{32:[1,148]},{32:[1,149]},o($Vu,[2,64]),{39:[1,150]},{31:[1,151],39:[2,82]},{17:152,24:$VH},o($Vv,[2,73]),{24:$Vf,29:78,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,71:154,72:$Vc,73:$Vd,74:$Ve},o($Vv,[2,74]),{39:[1,155]},o([5,23,24,26,27,28,31,36,39,40,41,44,52,56,57,58,59,60,61,62,63,64,65,66,70,76,80],[2,66]),{24:$Vf,37:$V9,43:30,51:31,67:89,68:$Vb,69:156,72:$Vc,73:$Vd,74:$Ve},o($Vv,[2,68]),o($V8,[2,50],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,94]),o($V8,$Vw,{31:$Vx}),{27:[1,157]},{24:$Vf,29:158,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,29:159,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{27:[1,160]},{14:161,15:141,16:142,24:$VC,27:[2,12]},{17:162,24:$VH},o($V8,[2,22]),{27:[2,3]},o($VD,[2,8]),{27:[2,6]},o($VE,[2,4]),{33:[1,163]},{33:[1,164]},{26:[1,165]},{24:$Vy,38:166,39:$Vz,75:125},o([31,39],[2,80]),o($VI,[2,79],{68:[1,167]}),o($VA,[2,86]),{17:169,24:$VH,37:[1,168]},{70:[2,84]},o($V8,[2,93],{78:170,79:$VJ}),o($VK,[2,46],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($VK,[2,47],{56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($V8,[2,21]),{27:[2,11]},o([24,27],[2,13]),{24:$Vf,34:172,37:$V9,43:30,51:31,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{24:$Vf,34:173,37:$V9,43:30,51:31,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{6:103,7:104,8:105,9:106,10:108,12:107,13:174,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},{39:[2,81]},{70:[1,175]},{24:[1,176]},{26:[1,177]},o($V8,[2,92]),{26:[1,179],80:[1,178]},{26:[1,180]},{26:[1,181]},{27:[1,182]},o($VI,[2,78]),{17:183,24:$VH},{6:103,7:104,8:105,9:106,10:108,12:107,13:184,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},{24:$Vf,29:185,34:27,37:$V9,43:30,51:31,63:$Va,67:28,68:$Vb,72:$Vc,73:$Vd,74:$Ve},{6:103,7:104,8:105,9:106,10:108,12:107,13:186,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},{6:103,7:104,8:105,9:106,10:108,12:107,13:187,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},{6:103,7:104,8:105,9:106,10:108,12:107,13:188,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},o($Vv,[2,69]),{39:[1,189]},{27:[1,190]},{26:[1,191],56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{27:[1,192]},{27:[1,193]},{27:[1,194]},{26:[1,195]},o($V8,[2,27]),{6:103,7:104,8:105,9:106,10:108,12:107,13:196,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},o($V8,[2,91]),o($V8,[2,23]),o($V8,[2,24]),{6:103,7:104,8:105,9:106,10:108,12:107,13:197,22:6,23:$V0,24:$V1,28:$V2,35:9,36:$V3,40:$V4,41:$V5,42:15,43:16,51:17,53:19,55:109,80:$V6},{27:[1,198]},{27:[1,199]},{78:200,79:$VJ},o($V8,[2,26]),o($V8,[2,90])],
defaultActions: {20:[2,1],103:[2,10],104:[2,2],144:[2,3],146:[2,6],156:[2,84],161:[2,11],166:[2,81]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 73
break;
case 2:return 74
break;
case 3:return "$"
break;
case 4:return 32
break;
case 5:return "func"
break;
case 6:return "type"
break;
case 7:return "range"
break;
case 8:return "struct"
break;
case 9:return "public"
break;
case 10:return "extends"
break;
case 11:return "implements"
break;
case 12:return "private"
break;
case 13:return "static"
break;
case 14:return 80
break;
case 15:return 79
break;
case 16:return 40
break;
case 17:return 'while'
break;
case 18:return 28
break;
case 19:return 41
break;
case 20:return 'of'
break;
case 21:return 31
break;
case 22:return ';'
break;
case 23:return 52
break;
case 24:return ':'
break;
case 25:return 57
break;
case 26:return 56
break;
case 27:return 60
break;
case 28:return 61
break;
case 29:return 58
break;
case 30:return 59
break;
case 31:return '=='
break;
case 32:return 44
break;
case 33:return 49
break;
case 34:return 64
break;
case 35:return 50
break;
case 36:return 65
break;
case 37:return 66
break;
case 38:return 48
break;
case 39:return 46
break;
case 40:return 63
break;
case 41:return 45
break;
case 42:return 47
break;
case 43:return 62
break;
case 44:return '^'
break;
case 45:return 26
break;
case 46:return 27
break;
case 47:return 76
break;
case 48:return 68
break;
case 49:return 70
break;
case 50:return 37
break;
case 51:return 39
break;
case 52:return 30
break;
case 53:return 24
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?::=)/,/^(?:func\b)/,/^(?:type\b)/,/^(?:range\b)/,/^(?:struct\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = go_parser;
exports.Parser = go_parser.Parser;
exports.parse = function () { return go_parser.parse.apply(go_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}