/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,13],$V2=[1,5],$V3=[1,12],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,14],$V9=[1,15],$Va=[5,19,36],$Vb=[12,62],$Vc=[2,69],$Vd=[2,70],$Ve=[1,37],$Vf=[1,48],$Vg=[1,46],$Vh=[1,49],$Vi=[1,39],$Vj=[1,41],$Vk=[1,50],$Vl=[1,51],$Vm=[1,53],$Vn=[2,86],$Vo=[1,58],$Vp=[1,59],$Vq=[15,20],$Vr=[5,11,12,17,19,23,25,28,30,31,36,39,41],$Vs=[1,68],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[15,19,20,35,50,51,52,53,54,55,56,57,58,59,60,61,62,63,70,76],$VI=[13,15,19,20,35,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,70,76],$VJ=[2,76],$VK=[15,19],$VL=[15,19,76],$VM=[1,146],$VN=[15,19,20,35,50,51,52,53,54,55,56,57,58,70,76],$VO=[15,19,20,35,50,51,52,53,54,55,56,57,58,59,60,70,76],$VP=[15,76],$VQ=[1,167],$VR=[1,170],$VS=[5,11,12,17,19,23,25,28,30,31,36,39,41,79],$VT=[19,38];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"access_modifier":8,"public":9,"private":10,"#define":11,"IDENTIFIER":12,"(":13,"exprs":14,")":15,"expr":16,"struct":17,"{":18,"}":19,";":20,"type":21,"parameters":22,"void":23,"statement_with_semicolon":24,"while":25,"e":26,"bracket_statements":27,"switch":28,"case_statements":29,"for":30,"if":31,"elif":32,"case_statement":33,"case":34,":":35,"break":36,"case_statements_":37,"default":38,"return":39,"=":40,"const":41,"access_array":42,"identifiers":43,"++":44,"--":45,"+=":46,"-=":47,"*=":48,"/=":49,"?":50,"||":51,"&&":52,"<=":53,"<":54,">=":55,">":56,"==":57,"!=":58,"+":59,"-":60,"%":61,"*":62,"/":63,"not_expr":64,"!":65,"dot_expr":66,"parentheses_expr":67,".":68,"[":69,"]":70,"function_call":71,"parentheses_expr_":72,"NUMBER":73,"STRING_LITERAL":74,"parameter":75,",":76,"&":77,"types":78,"else":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"public",10:"private",11:"#define",12:"IDENTIFIER",13:"(",15:")",17:"struct",18:"{",19:"}",20:";",23:"void",25:"while",28:"switch",30:"for",31:"if",34:"case",35:":",36:"break",38:"default",39:"return",40:"=",41:"const",44:"++",45:"--",46:"+=",47:"-=",48:"*=",49:"/=",50:"?",51:"||",52:"&&",53:"<=",54:"<",55:">=",56:">",57:"==",58:"!=",59:"+",60:"-",61:"%",62:"*",63:"/",65:"!",68:".",69:"[",70:"]",73:"NUMBER",74:"STRING_LITERAL",76:",",77:"&",79:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,1],[8,1],[6,8],[6,6],[6,8],[6,8],[6,2],[6,5],[6,7],[6,9],[6,6],[6,5],[33,6],[37,2],[37,1],[29,4],[29,1],[24,3],[24,4],[24,2],[24,4],[24,5],[24,2],[24,2],[24,3],[24,3],[24,2],[24,2],[24,3],[24,3],[24,3],[24,3],[26,5],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,1],[64,2],[64,1],[66,3],[66,1],[42,4],[67,1],[67,1],[67,3],[67,1],[72,2],[72,3],[72,1],[72,1],[72,1],[71,3],[71,4],[21,1],[21,1],[75,3],[75,2],[75,4],[22,3],[22,1],[22,0],[14,3],[14,1],[16,2],[16,1],[78,3],[78,1],[32,9],[32,4],[43,3],[43,1],[27,3],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 18:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 19: case 56: case 75:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 7:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 8:
this.$ = ["struct",$$[$0-4],$$[$0-2]]
break;
case 9:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 10:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 11: case 88:
this.$ = ["semicolon",$$[$0-1]];
break;
case 12:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 13:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 14:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 15:
this.$ = ["if",$$[$0-3],$$[$0],$$[$02]];
break;
case 16:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 20:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 22: case 67:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 23: case 68:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["return",$$[$0]];
break;
case 25:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 27:
return ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 28:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 29: case 30:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 31: case 32:
this.$ = [$$[$0],$$[$0-1]];
break;
case 33: case 34: case 35: case 36: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 37:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 51:
this.$ = ["-",$$[$0]];
break;
case 53:
this.$ = ["!", [".",$$[$0]]];
break;
case 54:
this.$ = [".", $$[$0]];
break;
case 55: case 74: case 77: case 81: case 85:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 57:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 60:
this.$ = ["parentheses",$$[$0-1]];
break;
case 62:
this.$ = ["initializer_list","Object",[]];
break;
case 63:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 64: case 65: case 66:
this.$ = yytext;
break;
case 71:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 72:
this.$ = [$$[$0-1],$$[$0]];
break;
case 73:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 76:
this.$ = [];
break;
case 78: case 80: case 82: case 86:
this.$ = [$$[$0]];
break;
case 79:
this.$ = ["function_call_ref",$$[$0]];
break;
case 83:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 84:
this.$ = ["else",$$[$0-1]];
break;
case 87:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{1:[3]},{5:[1,17]},o($Va,[2,3],{6:3,21:6,24:7,42:16,4:18,11:$V0,12:$V1,17:$V2,23:$V3,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9}),{12:[1,19]},{12:[1,20]},{12:[1,21],42:22,43:23},{20:[1,24]},{13:[1,25]},{13:[1,26]},{13:[1,27]},{13:[1,28]},o($Vb,$Vc),{12:$Vd,13:[1,29],40:[1,30],44:[1,31],45:[1,32],46:[1,33],47:[1,34],48:[1,35],49:[1,36],69:$Ve},{12:$Vf,13:$Vg,18:$Vh,26:38,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vm,21:52,23:$V3},{40:[1,54]},{1:[2,1]},o($Va,[2,2]),{13:[1,55]},{18:[1,56]},{13:[1,57],20:$Vn,40:$Vo,69:$Ve,76:$Vp},o($Vq,[2,27]),o($Vq,[2,28]),o($Vr,[2,11]),{12:$Vf,13:$Vg,18:$Vh,26:60,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:61,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$V1,21:63,23:$V3,24:62,39:$V8,41:$V9,42:16},{12:$Vf,13:$Vg,18:$Vh,26:64,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,14:66,15:[1,65],16:67,18:$Vh,26:69,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl,77:$Vs},{12:$Vf,13:$Vg,18:$Vh,26:70,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($Vq,[2,31]),o($Vq,[2,32]),{12:$Vf,13:$Vg,18:$Vh,26:71,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:72,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:73,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:74,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:75,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($Vq,[2,24],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{12:$Vf,13:$Vg,18:$Vh,26:90,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($VH,[2,52]),{12:$Vf,13:$Vg,18:$Vh,42:44,66:91,67:43,71:45,72:47,73:$Vk,74:$Vl},o($VH,[2,54]),o($VH,[2,56],{13:[1,93],68:[1,92]}),o($VI,[2,58]),o($VI,[2,59]),{12:$Vf,13:$Vg,18:$Vh,26:94,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($VI,[2,61]),o($VI,[2,65],{69:$Ve}),{12:$Vf,13:$Vg,14:96,16:67,18:$Vh,19:[1,95],26:69,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl,77:$Vs},o($VI,[2,64]),o($VI,[2,66]),{12:[1,97]},o($Vb,$Vd),{12:$Vf,13:$Vg,18:$Vh,26:98,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,14:99,16:67,18:$Vh,26:69,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl,77:$Vs},{4:101,6:3,7:100,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{12:$Vm,15:$VJ,21:105,22:102,23:[1,103],75:104},{12:$Vf,13:$Vg,18:$Vh,26:106,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:[1,108],43:107},{15:[1,109],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{15:[1,110],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{20:[1,111]},{12:[1,112],42:22,43:23},{15:[1,113],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($Vq,[2,22]),{15:[1,114]},o($VK,[2,78],{76:[1,115]}),{12:$Vf,13:$Vg,18:$Vh,26:116,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($VL,[2,80],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vq,[2,30],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vq,[2,33],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vq,[2,34],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vq,[2,35],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vq,[2,36],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,70:[1,117]},{12:$Vf,13:$Vg,18:$Vh,26:118,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:119,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:120,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:121,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:122,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:123,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:124,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:125,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:126,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:127,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:128,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:129,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:130,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,18:$Vh,26:131,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($VH,[2,51]),o($VH,[2,53]),{12:$Vf,13:$Vg,18:$Vh,42:44,66:132,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$Vf,13:$Vg,14:134,15:[1,133],16:67,18:$Vh,26:69,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl,77:$Vs},{15:[1,135],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($VI,[2,62]),{19:[1,136]},{40:[1,137]},o($Vq,[2,29],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{15:[1,138]},{19:[1,139]},o([19,36],[2,4]),{15:[1,140]},o($Vb,$Vc,{15:[1,141]}),{15:[2,75],76:[1,142]},{12:[1,144],62:[1,143]},o($Vq,[2,25],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vq,[2,85]),o($Vq,$Vn,{76:$Vp}),{12:$V1,18:$VM,21:63,23:$V3,24:147,27:145,39:$V8,41:$V9,42:16},{18:[1,148]},{12:$Vf,13:$Vg,18:$Vh,26:149,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($Vq,$Vn,{40:$Vo,69:$Ve,76:$Vp}),{12:$V1,18:$VM,21:63,23:$V3,24:147,27:150,39:$V8,41:$V9,42:16},o($Vq,[2,23]),{12:$Vf,13:$Vg,14:151,16:67,18:$Vh,26:69,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl,77:$Vs},o($VL,[2,79],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o([13,15,19,20,35,40,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,70,76],[2,57]),{35:[1,152],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o([15,19,20,35,50,51,70,76],[2,38],{52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o([15,19,20,35,50,51,52,70,76],[2,39],{53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VN,[2,40],{59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VN,[2,41],{59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VN,[2,42],{59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VN,[2,43],{59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VN,[2,44],{59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VN,[2,45],{59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VO,[2,46],{61:$VE,62:$VF,63:$VG}),o($VO,[2,47],{61:$VE,62:$VF,63:$VG}),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,55]),o($VI,[2,67]),{15:[1,153]},o($VI,[2,60]),o($VI,[2,63]),{12:$Vf,13:$Vg,18:$Vh,26:154,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{13:[1,155]},{20:[1,156]},{18:[1,157]},{18:[1,158]},{12:$Vm,15:$VJ,21:105,22:159,23:$V3,75:104},{12:[1,160]},o($VP,[2,72],{69:[1,161]}),o($Vr,[2,12]),{4:101,6:3,7:162,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{20:[1,163]},{29:164,33:166,34:$VQ,37:165},{20:[1,168],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($Vr,[2,16],{32:169,79:$VR}),o($VK,[2,77]),{12:$Vf,13:$Vg,18:$Vh,26:171,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},o($VI,[2,68]),o($Vq,[2,26],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{12:$Vf,13:$Vg,16:172,18:$Vh,26:69,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl,77:$Vs},o($Vr,[2,8]),{4:101,6:3,7:173,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{4:101,6:3,7:174,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{15:[2,74]},o($VP,[2,71]),{70:[1,175]},{19:[1,176]},o($VS,[2,88]),{19:[1,177]},{19:[2,21],38:[1,178]},o($VT,[2,19],{33:166,37:179,34:$VQ}),{12:$Vf,13:$Vg,18:$Vh,26:180,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{12:$V1,21:63,23:$V3,24:181,39:$V8,41:$V9,42:16},o($Vr,[2,15]),{18:[1,183],31:[1,182]},o([15,19,20,35,70,76],[2,37],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),{15:[1,184]},{19:[1,185]},{19:[1,186]},o($VP,[2,73]),o($VS,[2,87]),o($Vr,[2,13]),{35:[1,187]},o($VT,[2,18]),{35:[1,188],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},{15:[1,189]},{13:[1,190]},{4:101,6:3,7:191,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},o($Vr,[2,7]),o($Vr,[2,9]),o($Vr,[2,10]),{4:101,6:3,7:192,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{4:101,6:3,7:193,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{12:$V1,18:$VM,21:63,23:$V3,24:147,27:194,39:$V8,41:$V9,42:16},{12:$Vf,13:$Vg,18:$Vh,26:195,42:44,60:$Vi,64:40,65:$Vj,66:42,67:43,71:45,72:47,73:$Vk,74:$Vl},{19:[1,196]},{19:[2,20]},{36:[1,197]},o($Vr,[2,14]),{15:[1,198],50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG},o($Vr,[2,84]),{20:[1,199]},{18:[1,200]},o([19,34,38],[2,17]),{4:101,6:3,7:201,11:$V0,12:$V1,17:$V2,21:6,23:$V3,24:7,25:$V4,28:$V5,30:$V6,31:$V7,39:$V8,41:$V9,42:16},{19:[1,202]},{32:203,79:$VR},o($Vr,[2,83])],
defaultActions: {17:[2,1],159:[2,74],192:[2,20]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 73
break;
case 2:return 74
break;
case 3:return 11
break;
case 4:return "if"
break;
case 5:return "else"
break;
case 6:return "return"
break;
case 7:return "void"
break;
case 8:return "case"
break;
case 9:return "printf"
break;
case 10:return "while"
break;
case 11:return "break"
break;
case 12:return "default"
break;
case 13:return "const"
break;
case 14:return "struct"
break;
case 15:return "switch"
break;
case 16:return "for"
break;
case 17:return 76
break;
case 18:return 20
break;
case 19:return 68
break;
case 20:return 35
break;
case 21:return 52
break;
case 22:return 77
break;
case 23:return 51
break;
case 24:return 58
break;
case 25:return 65
break;
case 26:return 55
break;
case 27:return '>>'
break;
case 28:return 56
break;
case 29:return 53
break;
case 30:return '<<'
break;
case 31:return 54
break;
case 32:return 57
break;
case 33:return 40
break;
case 34:return 48
break;
case 35:return 62
break;
case 36:return 61
break;
case 37:return 49
break;
case 38:return 63
break;
case 39:return 47
break;
case 40:return 45
break;
case 41:return 60
break;
case 42:return 44
break;
case 43:return 46
break;
case 44:return 59
break;
case 45:return '^'
break;
case 46:return 50
break;
case 47:return 18
break;
case 48:return 19
break;
case 49:return 69
break;
case 50:return 70
break;
case 51:return 13
break;
case 52:return 15
break;
case 53:return 12
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:#define\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}