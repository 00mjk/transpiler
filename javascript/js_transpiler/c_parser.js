/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,15],$V8=[5,17,30],$V9=[5,12,17,20,23,25,30,31,33,35,73],$Va=[2,57],$Vb=[1,42],$Vc=[1,40],$Vd=[1,39],$Ve=[1,33],$Vf=[1,35],$Vg=[1,41],$Vh=[1,43],$Vi=[1,45],$Vj=[1,49],$Vk=[1,54],$Vl=[15,19],$Vm=[1,63],$Vn=[1,64],$Vo=[1,65],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[15,17,19,29,32,44,45,46,47,48,49,50,51,52,53,54,55],$Vz=[1,78],$VA=[13,15,17,19,29,32,44,45,46,47,48,49,50,51,52,53,54,55,60,63,69],$VB=[1,91],$VC=[2,62],$VD=[1,89],$VE=[15,17],$VF=[1,125],$VG=[15,17,19,29,32,44,45,46,47,48,49,50,51],$VH=[15,17,19,29,32,44,45,46,47,48,49,50,51,52,53],$VI=[1,141],$VJ=[1,145],$VK=[5,12,17,20,23,25,30,31,33,35,72,73];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"access_modifier":8,"public":9,"private":10,"type":11,"IDENTIFIER":12,"(":13,"parameters":14,")":15,"{":16,"}":17,"statement_with_semicolon":18,";":19,"while":20,"e":21,"bracket_statements":22,"switch":23,"case_statements":24,"for":25,"if_statement":26,"case_statement":27,"case":28,":":29,"break":30,"printf":31,",":32,"return":33,"=":34,"var":35,"identifiers":36,"access_array":37,"++":38,"--":39,"+=":40,"-=":41,"*=":42,"/=":43,"||":44,"&&":45,"<=":46,"<":47,">=":48,">":49,"==":50,"!=":51,"+":52,"-":53,"*":54,"/":55,"not_expr":56,"!":57,"dot_expr":58,"parentheses_expr":59,".":60,"[":61,"access_arr":62,"]":63,"exprs":64,"NUMBER":65,"STRING_LITERAL":66,"parameter":67,"void":68,"][":69,"types":70,"elif":71,"else":72,"if":73,"else_statement":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"public",10:"private",12:"IDENTIFIER",13:"(",15:")",16:"{",17:"}",19:";",20:"while",23:"switch",25:"for",28:"case",29:":",30:"break",31:"printf",32:",",33:"return",34:"=",35:"var",38:"++",39:"--",40:"+=",41:"-=",42:"*=",43:"/=",44:"||",45:"&&",46:"<=",47:"<",48:">=",49:">",50:"==",51:"!=",52:"+",53:"-",54:"*",55:"/",57:"!",60:".",61:"[",63:"]",65:"NUMBER",66:"STRING_LITERAL",68:"void",69:"][",72:"else",73:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,1],[8,1],[6,8],[6,2],[6,5],[6,7],[6,9],[6,1],[27,6],[24,2],[24,1],[18,6],[18,2],[18,4],[18,2],[18,3],[18,3],[18,2],[18,2],[18,3],[18,3],[18,3],[18,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[56,2],[56,1],[58,3],[58,1],[37,4],[59,1],[59,3],[59,4],[59,2],[59,3],[59,3],[59,1],[59,1],[59,1],[11,3],[11,1],[67,2],[14,3],[14,1],[14,1],[14,0],[62,3],[62,1],[64,3],[64,1],[70,3],[70,1],[71,7],[71,6],[71,1],[74,2],[26,6],[26,5],[36,3],[36,1],[22,3],[22,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 14:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 15: case 45: case 60: case 64:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 7:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 8: case 78:
this.$ = ["semicolon",$$[$0-1]];
break;
case 9:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 10:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 11:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 13:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 16:
this.$ = ["println",$$[$0-1]];
break;
case 17:
this.$ = ["return",$$[$0]];
break;
case 18:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 20: case 21:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 22: case 23:
this.$ = [$$[$0],$$[$0-1]];
break;
case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 38: case 39:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 37:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["-",$$[$0]];
break;
case 42:
this.$ = ["!", [".",$$[$0]]];
break;
case 43:
this.$ = [".", $$[$0]];
break;
case 44: case 59: case 63: case 65: case 67: case 75:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 46:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 48:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 49:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 50:
this.$ = ["initializer_list","Object",[]];
break;
case 51:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 52:
this.$ = ["parentheses",$$[$0-1]];
break;
case 53: case 54: case 55:
this.$ = yytext;
break;
case 56:
this.$ = [$$[$0-2],"[]"];
break;
case 58:
this.$ = [$$[$0-1],$$[$0]];
break;
case 61: case 62:
this.$ = [];
break;
case 66: case 68: case 76:
this.$ = [$$[$0]];
break;
case 69:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 70:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 72:
this.$ = ["else",$$[$0]];
break;
case 73:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 74:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 77:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:$V0,18:5,20:$V1,23:$V2,25:$V3,26:9,31:$V4,33:$V5,35:$V6,37:14,73:$V7},{1:[3]},{5:[1,16]},o($V8,[2,3],{6:3,11:4,18:5,26:9,37:14,4:17,12:$V0,20:$V1,23:$V2,25:$V3,31:$V4,33:$V5,35:$V6,73:$V7}),{12:[1,18]},{19:[1,19]},{13:[1,20]},{13:[1,21]},{13:[1,22]},o($V9,[2,12]),{12:$Va,34:[1,24],38:[1,25],39:[1,26],40:[1,27],41:[1,28],42:[1,29],43:[1,30],61:[1,23]},{13:[1,31]},{12:$Vb,13:$Vc,16:$Vd,21:32,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vi,36:44},{34:[1,46]},{13:[1,47]},{1:[2,1]},o($V8,[2,2]),{13:[1,48],34:$Vj},o($V9,[2,8]),{12:$Vb,13:$Vc,16:$Vd,21:50,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:51,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{11:53,12:$V0,18:52,31:$V4,33:$V5,35:$V6,37:14},{12:$Vb,13:$Vc,16:$Vd,37:38,59:56,62:55,63:$Vk,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:57,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},o($Vl,[2,22]),o($Vl,[2,23]),{12:$Vb,13:$Vc,16:$Vd,21:58,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:59,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:60,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:61,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:62,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},o($Vl,[2,17],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),{12:$Vb,13:$Vc,16:$Vd,21:75,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},o($Vy,[2,41]),{12:$Vb,13:$Vc,16:$Vd,37:38,58:76,59:37,65:$Vg,66:$Vh},o($Vy,[2,43]),o($Vy,[2,45],{13:$Vz,60:[1,77]}),o($VA,[2,47]),{12:$Vb,13:$Vc,16:$Vd,17:[1,79],21:81,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,64:80,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:82,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},o($VA,[2,53]),o($VA,[2,54],{61:[1,83]}),o($VA,[2,55]),o($Vl,[2,19]),o($Vl,[2,76],{32:[1,84]}),{12:$Vb,13:$Vc,16:$Vd,21:85,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:86,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{11:90,12:$VB,14:87,15:$VC,67:88,68:$VD},{12:$Vb,13:$Vc,16:$Vd,21:92,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{15:[1,93],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{15:[1,94],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{19:[1,95]},{12:[1,96]},{12:[2,56]},{63:[1,97]},{13:$Vz,63:[2,64],69:[1,98]},o($Vl,[2,21],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($Vl,[2,24],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($Vl,[2,25],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($Vl,[2,26],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($Vl,[2,27],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),{32:[1,99],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{12:$Vb,13:$Vc,16:$Vd,21:100,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:101,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:102,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:103,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:104,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:105,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:106,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:107,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:108,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:109,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:110,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:111,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},o($Vy,[2,40]),o($Vy,[2,42]),{12:$Vb,13:$Vc,16:$Vd,37:38,58:112,59:37,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,15:[1,113],16:$Vd,21:81,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,64:114,65:$Vg,66:$Vh},o($VA,[2,50]),{17:[1,115]},o($VE,[2,66],{32:[1,116],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),{15:[1,117],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{12:$Vb,13:$Vc,16:$Vd,37:38,59:56,62:55,65:$Vg,66:$Vh},{12:$Vi,36:118},o($Vl,[2,20],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),{15:[1,119],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{15:[1,120]},{15:[2,60],32:[1,121]},{15:[2,61]},{12:[1,122]},{12:$Va,61:[1,123]},o($Vl,[2,18],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),{11:53,12:$V0,16:$VF,18:126,22:124,31:$V4,33:$V5,35:$V6,37:14},{16:[1,127]},{12:$Vb,13:$Vc,16:$Vd,21:128,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{34:$Vj},o([13,15,17,19,29,32,34,44,45,46,47,48,49,50,51,52,53,54,55,60,63,69],[2,46]),{12:$Vb,13:$Vc,16:$Vd,37:38,59:56,62:129,65:$Vg,66:$Vh},{12:$Vb,13:$Vc,16:$Vd,21:130,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},o([15,17,19,29,32,44],[2,28],{45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o([15,17,19,29,32,44,45],[2,29],{46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VG,[2,30],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VG,[2,31],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VG,[2,32],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VG,[2,33],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VG,[2,34],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VG,[2,35],{52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VH,[2,36],{54:$Vw,55:$Vx}),o($VH,[2,37],{54:$Vw,55:$Vx}),o($Vy,[2,38]),o($Vy,[2,39]),o($Vy,[2,44]),o($VA,[2,48]),{15:[1,131]},o($VA,[2,51]),{12:$Vb,13:$Vc,16:$Vd,21:81,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,64:132,65:$Vg,66:$Vh},o($VA,[2,52]),o($Vl,[2,75]),{11:53,12:$V0,16:$VF,18:126,22:133,31:$V4,33:$V5,35:$V6,37:14},{16:[1,134]},{11:90,12:$VB,14:135,15:$VC,67:88,68:$VD},o([15,32],[2,58]),{63:$Vk},o($V9,[2,9]),{4:137,6:3,7:136,11:4,12:$V0,18:5,20:$V1,23:$V2,25:$V3,26:9,31:$V4,33:$V5,35:$V6,37:14,73:$V7},{19:[1,138]},{24:139,27:140,28:$VI},{19:[1,142],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{63:[2,63]},{15:[1,143],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},o($VA,[2,49]),o($VE,[2,65]),o($V9,[2,74],{71:144,74:146,72:$VJ}),{4:137,6:3,7:147,11:4,12:$V0,18:5,20:$V1,23:$V2,25:$V3,26:9,31:$V4,33:$V5,35:$V6,37:14,73:$V7},{15:[2,59]},{17:[1,148]},o([17,30],[2,4]),o($VK,[2,78]),{17:[1,149]},{17:[2,15],24:150,27:140,28:$VI},{12:$Vb,13:$Vc,16:$Vd,21:151,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{11:53,12:$V0,18:152,31:$V4,33:$V5,35:$V6,37:14},o($Vl,[2,16]),o($V9,[2,73]),{11:53,12:$V0,16:$VF,18:126,22:154,31:$V4,33:$V5,35:$V6,37:14,73:[1,153]},o($V9,[2,71]),{17:[1,155]},o($VK,[2,77]),o($V9,[2,10]),{17:[2,14]},{29:[1,156],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{15:[1,157]},{13:[1,158]},o($V9,[2,72]),o($V9,[2,7]),{4:137,6:3,7:159,11:4,12:$V0,18:5,20:$V1,23:$V2,25:$V3,26:9,31:$V4,33:$V5,35:$V6,37:14,73:$V7},{11:53,12:$V0,16:$VF,18:126,22:160,31:$V4,33:$V5,35:$V6,37:14},{12:$Vb,13:$Vc,16:$Vd,21:161,37:38,53:$Ve,56:34,57:$Vf,58:36,59:37,65:$Vg,66:$Vh},{30:[1,162]},o($V9,[2,11]),{15:[1,163],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{19:[1,164]},{11:53,12:$V0,16:$VF,18:126,22:165,31:$V4,33:$V5,35:$V6,37:14},o([17,28],[2,13]),o($V9,[2,70],{74:146,71:166,72:$VJ}),o($V9,[2,69])],
defaultActions: {16:[2,1],54:[2,56],89:[2,61],129:[2,63],135:[2,59],150:[2,14]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 65
break;
case 2:return 66
break;
case 3:return "if"
break;
case 4:return "else"
break;
case 5:return "return"
break;
case 6:return "void"
break;
case 7:return "case"
break;
case 8:return "printf"
break;
case 9:return "while"
break;
case 10:return "switch"
break;
case 11:return "for"
break;
case 12:return 32
break;
case 13:return 19
break;
case 14:return 60
break;
case 15:return 29
break;
case 16:return 45
break;
case 17:return 44
break;
case 18:return 51
break;
case 19:return 57
break;
case 20:return 48
break;
case 21:return 49
break;
case 22:return 46
break;
case 23:return 47
break;
case 24:return 50
break;
case 25:return 34
break;
case 26:return 42
break;
case 27:return 54
break;
case 28:return 43
break;
case 29:return 55
break;
case 30:return 41
break;
case 31:return 39
break;
case 32:return 53
break;
case 33:return 38
break;
case 34:return 40
break;
case 35:return 52
break;
case 36:return '^'
break;
case 37:return 16
break;
case 38:return 17
break;
case 39:return 69
break;
case 40:return 61
break;
case 41:return 63
break;
case 42:return 13
break;
case 43:return 15
break;
case 44:return 12
break;
case 45:return 5
break;
case 46:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}