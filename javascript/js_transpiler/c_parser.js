/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,18],$V2=[1,7],$V3=[1,8],$V4=[1,17],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,19],$Vb=[1,20],$Vc=[5,23,24,29,32,35,37,40,41,43,45,53,54],$Vd=[1,35],$Ve=[10,27],$Vf=[24,79],$Vg=[2,99],$Vh=[2,100],$Vi=[1,49],$Vj=[1,60],$Vk=[1,58],$Vl=[1,61],$Vm=[1,51],$Vn=[1,53],$Vo=[1,62],$Vp=[1,63],$Vq=[1,65],$Vr=[2,117],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[5,23,24,29,31,32,35,37,40,41,43,45,50,53,54],$Vx=[1,83],$Vy=[1,93],$Vz=[1,101],$VA=[1,102],$VB=[1,103],$VC=[1,104],$VD=[1,105],$VE=[1,106],$VF=[1,107],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[10,27,31,49,57,67,68,69,70,71,72,73,74,75,76,77,78,79,80,91],$VO=[10,25,27,31,49,57,67,68,69,70,71,72,73,74,75,76,77,78,79,80,85,91],$VP=[1,124],$VQ=[1,134],$VR=[2,107],$VS=[1,139],$VT=[31,50],$VU=[23,24,29,31,32,35,37,40,41,43,45,50,53,54],$VV=[5,23,24,29,31,32,35,37,40,41,43,45,50,53,54,96],$VW=[27,31],$VX=[27,31,91],$VY=[31,91],$VZ=[10,27,31,49,57,67,68,69,70,72,74,75,91],$V_=[10,27,31,49,57,67,68,69,70,71,72,73,74,75,91],$V$=[10,27,31,49,57,67,68,69,70,71,72,73,74,75,76,77,91],$V01=[24,31,35],$V11=[27,91],$V21=[1,234],$V31=[1,237],$V41=[31,52];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statements_":7,"statements_with_vars":8,"initialize_var_":9,";":10,"statements_without_vars":11,"statement":12,"initialize_var1":13,"struct_statements":14,"struct_statement":15,"type":16,"identifiers":17,"set_array_size":18,"statements":19,"access_modifier":20,"public":21,"private":22,"#define":23,"IDENTIFIER":24,"(":25,"exprs":26,")":27,"expr":28,"struct":29,"{":30,"}":31,"enum":32,"enum_statements":33,"parameters":34,"void":35,"statement_with_semicolon":36,"while":37,"e":38,"bracket_statements":39,"do":40,"switch":41,"case_statements":42,"for":43,"statement_with_semicolon_":44,"if":45,"elif":46,"case_statement":47,"case":48,":":49,"break":50,"case_statements_":51,"default":52,"return":53,"const":54,"=":55,"[":56,"]":57,"access_array":58,"++":59,"--":60,"+=":61,"-=":62,"*=":63,"/=":64,"initialize_var":65,"initialize_vars":66,"?":67,"||":68,"&&":69,"<=":70,"<":71,">=":72,">":73,"==":74,"!=":75,"+":76,"-":77,"%":78,"*":79,"/":80,"not_expr":81,"!":82,"dot_expr":83,"parentheses_expr":84,".":85,"function_call":86,"parentheses_expr_":87,"initialize_struct":88,"NUMBER":89,"STRING_LITERAL":90,",":91,"initialize_struct_":92,"parameter":93,"&":94,"types":95,"else":96,"enum_statement":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",21:"public",22:"private",23:"#define",24:"IDENTIFIER",25:"(",27:")",29:"struct",30:"{",31:"}",32:"enum",35:"void",37:"while",40:"do",41:"switch",43:"for",45:"if",48:"case",49:":",50:"break",52:"default",53:"return",54:"const",55:"=",56:"[",57:"]",59:"++",60:"--",61:"+=",62:"-=",63:"*=",64:"/=",67:"?",68:"||",69:"&&",70:"<=",71:"<",72:">=",73:">",74:"==",75:"!=",76:"+",77:"-",78:"%",79:"*",80:"/",82:"!",85:".",89:"NUMBER",90:"STRING_LITERAL",91:",",94:"&",96:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,2],[7,3],[11,2],[11,1],[8,3],[8,1],[14,2],[14,1],[15,3],[15,2],[19,1],[20,1],[20,1],[6,1],[6,2],[12,8],[12,6],[12,6],[12,8],[12,8],[12,2],[12,5],[12,7],[12,7],[12,9],[12,6],[12,5],[44,1],[44,1],[47,6],[51,2],[51,1],[42,4],[42,1],[36,3],[36,4],[36,2],[36,5],[36,7],[36,1],[36,2],[36,3],[36,3],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[13,1],[65,1],[9,4],[9,6],[66,3],[66,1],[18,2],[38,5],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,4],[38,4],[38,3],[38,3],[38,2],[38,1],[81,2],[81,1],[83,3],[83,1],[58,4],[84,1],[84,1],[84,3],[84,1],[87,2],[87,3],[87,3],[87,1],[87,1],[87,1],[88,3],[88,1],[92,4],[86,3],[86,4],[16,1],[16,1],[93,3],[93,2],[93,4],[93,3],[34,3],[34,1],[34,0],[26,3],[26,1],[28,2],[28,1],[95,3],[95,1],[46,7],[46,2],[17,3],[17,1],[33,3],[33,1],[97,3],[39,3],[39,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 8: case 12: case 36: case 59: case 82: case 95: case 106:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = [["semicolon",["initialize_var"].concat($$[$0-1])]]
break;
case 6:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-2])],["statements",$$[$0]]]]
break;
case 9:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 11: case 35:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 13:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 14:
this.$ = ["semicolon", $$[$0-1]];
break;
case 15:
this.$ = ["statements",$$[$0]]
break;
case 19:
this.$ = ["semicolon",$$[$0-1]]
break;
case 20:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 22:
this.$ = ["enum","public",$$[$0-4],$$[$0-2]];
break;
case 23:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 25: case 122:
this.$ = ["semicolon",$$[$0-1]];
break;
case 26:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 28:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 29:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 31:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 34:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 37:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 39: case 97:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 40: case 98:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 41:
this.$ = ["return",$$[$0]];
break;
case 42:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 45:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 46: case 47:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = [$$[$0],$$[$0-1]];
break;
case 50: case 51: case 52: case 53: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 75: case 76:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 54:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 55:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 56:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 57:
this.$ = [[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 58: case 94:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 60:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 61:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 73:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 74:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 77:
this.$ = ["-",$$[$0]];
break;
case 79:
this.$ = ["!", [".",$$[$0]]];
break;
case 80:
this.$ = [".", $$[$0]];
break;
case 81: case 105: case 108: case 112: case 116: case 118:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 83:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 86:
this.$ = ["parentheses",$$[$0-1]];
break;
case 88:
this.$ = ["initializer_list","Object",[]];
break;
case 89:
this.$ = ["initialize_struct","Object",$$[$0-1]];
break;
case 90:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 91: case 92: case 93:
this.$ = yytext;
break;
case 96:
this.$ = ["initialize_struct_",$$[$0-2],$$[$0]]
break;
case 101:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 102:
this.$ = [$$[$0-1],$$[$0]];
break;
case 103:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 104:
this.$ = ["final_parameter",$$[$0-1],$$[$0]]
break;
case 107:
this.$ = [];
break;
case 109: case 111: case 113: case 117: case 119:
this.$ = [$$[$0]];
break;
case 110:
this.$ = ["function_call_ref",$$[$0]];
break;
case 114:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 115:
this.$ = ["else",$$[$0]];
break;
case 120:
this.$ = ["enum_statement",$$[$0-2],$$[$0]]
break;
case 121:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,9:16,12:4,13:5,16:9,18:21,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,36:10,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb,58:22},{1:[3]},{5:[1,23],6:24,9:16,12:4,13:5,16:9,18:21,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,36:10,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb,58:22},o($Vc,[2,3]),o($Vc,[2,18]),{10:[1,25]},{24:[1,26]},{24:[1,27]},{24:[1,28]},{17:30,24:[1,29],58:31},{10:[1,32]},{25:[1,33]},{16:37,18:21,24:$V1,30:$Vd,35:$V4,36:36,39:34,53:$Va,54:$Vb,58:22},{25:[1,38]},{25:[1,39]},{25:[1,40]},o($Ve,[2,54]),o($Vf,$Vg),{24:$Vh,25:[1,41],55:[1,42],56:$Vi,59:[1,43],60:[1,44],61:[1,45],62:[1,46],63:[1,47],64:[1,48]},{24:$Vj,25:$Vk,30:$Vl,38:50,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{16:64,24:$Vq,35:$V4},o($Ve,[2,44]),{55:[1,66]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,19]),{25:[1,67]},{30:[1,68]},{30:[1,69]},{10:$Vr,25:$Vs,55:$Vt,56:$Vu,91:$Vv},o($Ve,[2,45]),o($Ve,[2,60]),o($Vw,[2,25]),{24:$Vj,25:$Vk,30:$Vl,38:74,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{37:[1,75]},{7:77,8:78,9:79,11:80,12:81,16:9,18:21,19:76,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,36:10,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb,58:22},{10:[1,82]},{17:30,24:$Vx,58:31},{24:$Vj,25:$Vk,30:$Vl,38:84,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{9:16,13:86,16:88,18:21,24:$V1,35:$V4,36:87,44:85,53:$Va,54:$Vb,58:22},{24:$Vj,25:$Vk,30:$Vl,38:89,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,26:91,27:[1,90],28:92,30:$Vl,38:94,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp,94:$Vy},{24:$Vj,25:$Vk,30:$Vl,38:95,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($Ve,[2,48]),o($Ve,[2,49]),{24:$Vj,25:$Vk,30:$Vl,38:96,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:97,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:98,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:99,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:100,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($Ve,[2,41],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{24:$Vj,25:$Vk,30:$Vl,38:115,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VN,[2,78]),{24:$Vj,25:$Vk,30:$Vl,58:56,83:116,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VN,[2,80]),o($VN,[2,82],{25:[1,118],85:[1,117]}),o($VO,[2,84]),o($VO,[2,85]),{24:$Vj,25:$Vk,30:$Vl,38:119,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VO,[2,87]),o($VO,[2,92],{56:$Vi}),{24:$Vj,25:$Vk,26:122,28:92,30:$Vl,31:[1,120],38:94,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,85:$VP,86:57,87:59,88:121,89:$Vo,90:$Vp,92:123,94:$Vy},o($VO,[2,91]),o($VO,[2,93]),{24:[1,125]},o($Vf,$Vh),{24:$Vj,25:$Vk,30:$Vl,38:126,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,26:127,28:92,30:$Vl,38:94,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp,94:$Vy},{14:128,15:129,16:130,18:131,24:$Vq,35:$V4},{24:$VQ,33:132,97:133},{16:138,24:$Vq,27:$VR,34:135,35:[1,136],54:$VS,93:137},{24:$Vj,25:$Vk,30:$Vl,38:140,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:100,57:[1,141],58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{17:142,24:[1,143]},{27:[1,144],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},{25:[1,145]},{31:[1,146]},o($VT,[2,15]),o($VT,[2,4]),{10:[1,147]},o($VT,[2,10],{16:9,36:10,9:16,18:21,58:22,13:148,12:149,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb}),o($VU,[2,8]),o($VV,[2,122]),{10:$Vr,56:$Vi,91:$Vv},{27:[1,150],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},{10:[1,151]},o($Ve,[2,32]),o($Ve,[2,33]),{17:30,24:[1,152],58:31},{27:[1,153],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},o($Ve,[2,39]),{27:[1,154]},o($VW,[2,109],{91:[1,155]}),{24:$Vj,25:$Vk,30:$Vl,38:156,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VX,[2,111],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($Ve,[2,47],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($Ve,[2,50],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($Ve,[2,51],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($Ve,[2,52],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($Ve,[2,53],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{57:[1,157],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},{24:$Vj,25:$Vk,30:$Vl,38:158,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:159,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:160,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:161,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:162,58:56,71:[1,163],77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:164,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:165,58:56,73:[1,166],77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:167,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:168,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:169,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:170,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:171,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:172,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,30:$Vl,38:173,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VN,[2,77]),o($VN,[2,79]),{24:$Vj,25:$Vk,30:$Vl,58:56,83:174,84:55,86:57,87:59,89:$Vo,90:$Vp},{24:$Vj,25:$Vk,26:176,27:[1,175],28:92,30:$Vl,38:94,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp,94:$Vy},{27:[1,177],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},o($VO,[2,88]),{31:[1,178],91:[1,179]},{31:[1,180]},o($VY,[2,95]),{24:[1,181]},{55:[1,182],56:[1,183]},o($Ve,[2,46],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{27:[1,184]},{31:[1,185]},{14:186,15:129,16:130,18:131,24:$Vq,31:[2,12],35:$V4},{17:187,24:$Vx,58:31},{10:[1,188]},{31:[1,189]},{31:[2,119],91:[1,190]},{55:[1,191]},{27:[1,192]},o($Vf,$Vg,{27:[1,193]}),{27:[2,106],91:[1,194]},{24:[1,196],79:[1,195]},{16:197,24:$Vq,35:$V4},o($Ve,[2,56],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{55:[1,198]},o($Ve,[2,116]),o($Ve,$Vr,{91:$Vv}),{16:37,18:21,24:$V1,30:$Vd,35:$V4,36:36,39:199,53:$Va,54:$Vb,58:22},{24:$Vj,25:$Vk,30:$Vl,38:200,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VV,[2,121]),o($VT,[2,5],{36:10,18:21,58:22,11:80,12:81,8:201,16:202,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb}),{10:[1,203]},o($VU,[2,7]),{30:[1,204]},{24:$Vj,25:$Vk,30:$Vl,38:205,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($Ve,$Vr,{55:$Vt,56:$Vu,91:$Vv}),{16:37,18:21,24:$V1,30:$Vd,35:$V4,36:36,39:206,53:$Va,54:$Vb,58:22},o($Ve,[2,40]),{24:$Vj,25:$Vk,26:207,28:92,30:$Vl,38:94,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp,94:$Vy},o($VX,[2,110],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o([10,25,27,31,49,55,57,67,68,69,70,71,72,73,74,75,76,77,78,79,80,85,91],[2,83]),{49:[1,208],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},o([10,27,31,49,57,67,68,91],[2,62],{69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o([10,27,31,49,57,67,68,69,91],[2,63],{70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($VZ,[2,64],{71:$VD,73:$VF,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($V_,[2,65],{76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{24:$Vj,25:$Vk,30:$Vl,38:209,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VZ,[2,66],{71:$VD,73:$VF,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($V_,[2,67],{76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{24:$Vj,25:$Vk,30:$Vl,38:210,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($VZ,[2,68],{71:$VD,73:$VF,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($VZ,[2,69],{71:$VD,73:$VF,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($V$,[2,70],{78:$VK,79:$VL,80:$VM}),o($V$,[2,71],{78:$VK,79:$VL,80:$VM}),o($VN,[2,72]),o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,81]),o($VO,[2,97]),{27:[1,211]},o($VO,[2,86]),o($VO,[2,89]),{85:$VP,92:212},o($VO,[2,90]),{55:[1,213]},{24:$Vj,25:$Vk,30:$Vl,38:214,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{57:[1,215]},{25:[1,216]},{10:[1,217]},{31:[2,11]},{10:[1,218]},o($V01,[2,14]),{10:[1,219]},{24:$VQ,33:220,97:133},{89:[1,221]},{30:[1,222]},{30:[1,223]},{16:138,24:$Vq,27:$VR,34:224,35:$V4,54:$VS,93:137},{24:[1,225]},o($V11,[2,102],{56:[1,226]}),{24:[1,227]},{24:$Vj,25:$Vk,30:$Vl,38:228,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($Vw,[2,26]),{27:[1,229],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},o($VT,[2,6]),{17:30,24:[1,230],58:31},o($VT,[2,9]),{42:231,47:233,48:$V21,51:232},{10:[1,235],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},o($Vw,[2,31],{46:236,96:$V31}),o($VW,[2,108]),{24:$Vj,25:$Vk,30:$Vl,38:238,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($V_,[2,74],{76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($V_,[2,73],{76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($VO,[2,98]),o($VY,[2,94]),{24:$Vj,25:$Vk,30:$Vl,38:239,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},o($Ve,[2,42],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{55:[1,240]},{24:$Vj,25:$Vk,28:241,30:$Vl,38:94,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp,94:$Vy},o($Vw,[2,21]),o($V01,[2,13]),o($Vw,[2,22]),{31:[2,118]},o($VY,[2,120]),{7:77,8:78,9:79,11:80,12:81,16:9,18:21,19:242,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,36:10,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb,58:22},{7:77,8:78,9:79,11:80,12:81,16:9,18:21,19:243,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,36:10,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb,58:22},{27:[2,105]},o($V11,[2,101]),{57:[1,244]},o($V11,[2,104]),o($Ve,[2,57],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{10:[1,245]},{10:$Vr,25:$Vs,56:$Vi,91:$Vv},{31:[1,246]},{31:[2,38],52:[1,247]},o($V41,[2,36],{47:233,51:248,48:$V21}),{24:$Vj,25:$Vk,30:$Vl,38:249,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{9:16,13:86,16:88,18:21,24:$V1,35:$V4,36:87,44:250,53:$Va,54:$Vb,58:22},o($Vw,[2,30]),{16:37,18:21,24:$V1,30:$Vd,35:$V4,36:36,39:252,45:[1,251],53:$Va,54:$Vb,58:22},o([10,27,31,49,57,91],[2,61],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($VY,[2,96],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),{24:$Vj,25:$Vk,30:$Vl,38:253,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{27:[1,254]},{31:[1,255]},{31:[1,256]},o($V11,[2,103]),o($Vw,[2,27]),o($Vw,[2,28]),{49:[1,257]},o($V41,[2,35]),{49:[1,258],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},{27:[1,259]},{25:[1,260]},o($Vw,[2,115]),o($Ve,[2,43],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM}),o($Vw,[2,20]),o($Vw,[2,23]),o($Vw,[2,24]),{7:77,8:78,9:79,11:80,12:81,16:9,18:21,19:261,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,36:10,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb,58:22},{7:77,8:78,9:79,11:80,12:81,16:9,18:21,19:262,23:$V0,24:$V1,29:$V2,32:$V3,35:$V4,36:10,37:$V5,40:$V6,41:$V7,43:$V8,45:$V9,53:$Va,54:$Vb,58:22},{16:37,18:21,24:$V1,30:$Vd,35:$V4,36:36,39:263,53:$Va,54:$Vb,58:22},{24:$Vj,25:$Vk,30:$Vl,38:264,58:56,77:$Vm,81:52,82:$Vn,83:54,84:55,86:57,87:59,89:$Vo,90:$Vp},{31:[2,37]},{50:[1,265]},o($Vw,[2,29]),{27:[1,266],67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,80:$VM},{10:[1,267]},{16:37,18:21,24:$V1,30:$Vd,35:$V4,36:36,39:268,53:$Va,54:$Vb,58:22},o([31,48,52],[2,34]),{46:269,96:$V31},o($Vw,[2,114])],
defaultActions: {23:[2,1],186:[2,11],220:[2,118],224:[2,105],261:[2,37]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 89
break;
case 2:return 90
break;
case 3:return 23
break;
case 4:return "if"
break;
case 5:return 40
break;
case 6:return "else"
break;
case 7:return 32
break;
case 8:return "return"
break;
case 9:return "void"
break;
case 10:return "case"
break;
case 11:return "printf"
break;
case 12:return "while"
break;
case 13:return "break"
break;
case 14:return "default"
break;
case 15:return "const"
break;
case 16:return "struct"
break;
case 17:return "switch"
break;
case 18:return "for"
break;
case 19:return 91
break;
case 20:return 10
break;
case 21:return 85
break;
case 22:return 49
break;
case 23:return 69
break;
case 24:return 94
break;
case 25:return 68
break;
case 26:return 75
break;
case 27:return 82
break;
case 28:return 72
break;
case 29:return 73
break;
case 30:return 70
break;
case 31:return 71
break;
case 32:return 74
break;
case 33:return 55
break;
case 34:return 63
break;
case 35:return 79
break;
case 36:return 78
break;
case 37:return 64
break;
case 38:return 80
break;
case 39:return 62
break;
case 40:return 60
break;
case 41:return 77
break;
case 42:return 59
break;
case 43:return 61
break;
case 44:return 76
break;
case 45:return '^'
break;
case 46:return 67
break;
case 47:return 30
break;
case 48:return 31
break;
case 49:return 56
break;
case 50:return 57
break;
case 51:return 25
break;
case 52:return 27
break;
case 53:return 24
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:#define\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}