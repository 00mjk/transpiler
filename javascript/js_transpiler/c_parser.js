/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,19],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,18],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,20],$Vc=[1,21],$Vd=[5,23,24,29,30,33,36,38,41,42,44,46,54,55],$Ve=[1,37],$Vf=[10,27],$Vg=[24,80],$Vh=[2,101],$Vi=[2,102],$Vj=[1,51],$Vk=[1,62],$Vl=[1,60],$Vm=[1,63],$Vn=[1,53],$Vo=[1,55],$Vp=[1,64],$Vq=[1,65],$Vr=[1,67],$Vs=[2,119],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[5,23,24,29,30,32,33,36,38,41,42,44,46,51,54,55],$Vx=[1,86],$Vy=[1,96],$Vz=[1,104],$VA=[1,105],$VB=[1,106],$VC=[1,107],$VD=[1,108],$VE=[1,109],$VF=[1,110],$VG=[1,111],$VH=[1,112],$VI=[1,113],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[10,27,32,50,58,68,69,70,71,72,73,74,75,76,77,78,79,80,81,92],$VO=[10,25,27,32,50,58,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,92],$VP=[1,127],$VQ=[1,138],$VR=[2,109],$VS=[1,143],$VT=[32,51],$VU=[23,24,29,30,32,33,36,38,41,42,44,46,51,54,55],$VV=[5,23,24,29,30,32,33,36,38,41,42,44,46,51,54,55,97],$VW=[27,32],$VX=[27,32,92],$VY=[32,92],$VZ=[10,27,32,50,58,68,69,70,71,73,75,76,92],$V_=[10,27,32,50,58,68,69,70,71,72,73,74,75,76,92],$V$=[10,27,32,50,58,68,69,70,71,72,73,74,75,76,77,78,92],$V01=[24,32,36],$V11=[27,92],$V21=[1,236],$V31=[1,239],$V41=[32,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statements_":7,"statements_with_vars":8,"initialize_var_":9,";":10,"statements_without_vars":11,"statement":12,"initialize_var1":13,"struct_statements":14,"struct_statement":15,"type":16,"identifiers":17,"set_array_size":18,"statements":19,"access_modifier":20,"public":21,"private":22,"#define":23,"IDENTIFIER":24,"(":25,"exprs":26,")":27,"expr":28,"typedef":29,"struct":30,"{":31,"}":32,"enum":33,"enum_statements":34,"parameters":35,"void":36,"statement_with_semicolon":37,"while":38,"e":39,"bracket_statements":40,"do":41,"switch":42,"case_statements":43,"for":44,"statement_with_semicolon_":45,"if":46,"elif":47,"case_statement":48,"case":49,":":50,"break":51,"case_statements_":52,"default":53,"return":54,"const":55,"=":56,"[":57,"]":58,"access_array":59,"++":60,"--":61,"+=":62,"-=":63,"*=":64,"/=":65,"initialize_var":66,"initialize_vars":67,"?":68,"||":69,"&&":70,"<=":71,"<":72,">=":73,">":74,"==":75,"!=":76,"+":77,"-":78,"%":79,"*":80,"/":81,"not_expr":82,"!":83,"dot_expr":84,"parentheses_expr":85,".":86,"function_call":87,"parentheses_expr_":88,"initialize_struct":89,"NUMBER":90,"STRING_LITERAL":91,",":92,"initialize_struct_":93,"parameter":94,"&":95,"types":96,"else":97,"enum_statement":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",21:"public",22:"private",23:"#define",24:"IDENTIFIER",25:"(",27:")",29:"typedef",30:"struct",31:"{",32:"}",33:"enum",36:"void",38:"while",41:"do",42:"switch",44:"for",46:"if",49:"case",50:":",51:"break",53:"default",54:"return",55:"const",56:"=",57:"[",58:"]",60:"++",61:"--",62:"+=",63:"-=",64:"*=",65:"/=",68:"?",69:"||",70:"&&",71:"<=",72:"<",73:">=",74:">",75:"==",76:"!=",77:"+",78:"-",79:"%",80:"*",81:"/",83:"!",86:".",90:"NUMBER",91:"STRING_LITERAL",92:",",95:"&",97:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,2],[7,3],[11,2],[11,1],[8,3],[8,1],[14,2],[14,1],[15,3],[15,2],[19,1],[20,1],[20,1],[6,1],[6,2],[12,8],[12,4],[12,6],[12,6],[12,8],[12,8],[12,2],[12,5],[12,7],[12,7],[12,9],[12,6],[12,5],[45,1],[45,1],[48,6],[52,2],[52,1],[43,4],[43,1],[37,3],[37,4],[37,2],[37,1],[37,5],[37,7],[37,1],[37,2],[37,3],[37,3],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[13,1],[66,1],[9,4],[9,6],[67,3],[67,1],[18,2],[39,5],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,4],[39,4],[39,3],[39,3],[39,2],[39,1],[82,2],[82,1],[84,3],[84,1],[59,4],[85,1],[85,1],[85,3],[85,1],[88,2],[88,3],[88,3],[88,1],[88,1],[88,1],[89,3],[89,1],[93,4],[87,3],[87,4],[16,1],[16,1],[94,3],[94,2],[94,4],[94,3],[35,3],[35,1],[35,0],[26,3],[26,1],[28,2],[28,1],[96,3],[96,1],[47,7],[47,2],[17,3],[17,1],[34,3],[34,1],[98,3],[40,3],[40,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 8: case 12: case 37: case 61: case 84: case 97: case 108:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = [["semicolon",["initialize_var"].concat($$[$0-1])]]
break;
case 6:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-2])],["statements",$$[$0]]]]
break;
case 9:
this.$ = $$[$0-2].concat([["semicolon",$$[$0-1]]]);
break;
case 11: case 36:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 13:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 14:
this.$ = ["semicolon", $$[$0-1]];
break;
case 15:
this.$ = ["statements",$$[$0]]
break;
case 19:
this.$ = ["semicolon",$$[$0-1]]
break;
case 20:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["typedef",$$[$0-2],$$[$0-1]]
break;
case 22:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 23:
this.$ = ["enum","public",$$[$0-4],$$[$0-2]];
break;
case 24:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 26: case 124:
this.$ = ["semicolon",$$[$0-1]];
break;
case 27:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 28:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 29:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 30:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 32:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 35:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 38:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 40: case 99:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 41: case 100:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 42:
this.$ = ["return",$$[$0]];
break;
case 43:
this.$ = ["return"];
break;
case 44:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 47:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 48: case 49:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 50: case 51:
this.$ = [$$[$0],$$[$0-1]];
break;
case 52: case 53: case 54: case 55: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 77: case 78:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 56:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 57:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 58:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 59:
this.$ = [[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 60: case 96:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 62:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 63:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 75:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 76:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 79:
this.$ = ["-",$$[$0]];
break;
case 81:
this.$ = ["!", [".",$$[$0]]];
break;
case 82:
this.$ = [".", $$[$0]];
break;
case 83: case 107: case 110: case 114: case 118: case 120:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 85:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 88:
this.$ = ["parentheses",$$[$0-1]];
break;
case 90:
this.$ = ["initializer_list","Object",[]];
break;
case 91:
this.$ = ["initialize_struct","Object",$$[$0-1]];
break;
case 92:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 93: case 94: case 95:
this.$ = yytext;
break;
case 98:
this.$ = ["initialize_struct_",$$[$0-2],$$[$0]]
break;
case 103:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 104:
this.$ = [$$[$0-1],$$[$0]];
break;
case 105:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 106:
this.$ = ["final_parameter",$$[$0-1],$$[$0]]
break;
case 109:
this.$ = [];
break;
case 111: case 113: case 115: case 119: case 121:
this.$ = [$$[$0]];
break;
case 112:
this.$ = ["function_call_ref",$$[$0]];
break;
case 116:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 117:
this.$ = ["else",$$[$0]];
break;
case 122:
this.$ = ["enum_statement",$$[$0-2],$$[$0]]
break;
case 123:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,9:17,12:4,13:5,16:10,18:22,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,59:23},{1:[3]},{5:[1,24],6:25,9:17,12:4,13:5,16:10,18:22,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,59:23},o($Vd,[2,3]),o($Vd,[2,18]),{10:[1,26]},{24:[1,27]},{24:[1,28]},{24:[1,29]},{24:[1,30]},{17:32,24:[1,31],59:33},{10:[1,34]},{25:[1,35]},{16:39,18:22,24:$V1,31:$Ve,36:$V5,37:38,40:36,54:$Vb,55:$Vc,59:23},{25:[1,40]},{25:[1,41]},{25:[1,42]},o($Vf,[2,56]),o($Vg,$Vh),{24:$Vi,25:[1,43],56:[1,44],57:$Vj,60:[1,45],61:[1,46],62:[1,47],63:[1,48],64:[1,49],65:[1,50]},o($Vf,[2,43],{39:52,82:54,84:56,85:57,59:58,87:59,88:61,24:$Vk,25:$Vl,31:$Vm,78:$Vn,83:$Vo,90:$Vp,91:$Vq}),{16:66,24:$Vr,36:$V5},o($Vf,[2,46]),{56:[1,68]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,19]),{25:[1,69]},{24:[1,70]},{31:[1,71]},{31:[1,72]},{10:$Vs,25:[1,73],56:$Vt,57:$Vu,92:$Vv},o($Vf,[2,47]),o($Vf,[2,62]),o($Vw,[2,26]),{24:$Vk,25:$Vl,31:$Vm,39:77,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{38:[1,78]},{7:80,8:81,9:82,11:83,12:84,16:10,18:22,19:79,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,59:23},{10:[1,85]},{17:32,24:$Vx,59:33},{24:$Vk,25:$Vl,31:$Vm,39:87,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{9:17,13:89,16:91,18:22,24:$V1,36:$V5,37:90,45:88,54:$Vb,55:$Vc,59:23},{24:$Vk,25:$Vl,31:$Vm,39:92,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,26:94,27:[1,93],28:95,31:$Vm,39:97,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq,95:$Vy},{24:$Vk,25:$Vl,31:$Vm,39:98,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($Vf,[2,50]),o($Vf,[2,51]),{24:$Vk,25:$Vl,31:$Vm,39:99,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:100,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:101,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:102,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:103,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($Vf,[2,42],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{24:$Vk,25:$Vl,31:$Vm,39:118,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VN,[2,80]),{24:$Vk,25:$Vl,31:$Vm,59:58,84:119,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VN,[2,82]),o($VN,[2,84],{25:[1,121],86:[1,120]}),o($VO,[2,86]),o($VO,[2,87]),{24:$Vk,25:$Vl,31:$Vm,39:122,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VO,[2,89]),o($VO,[2,94],{57:$Vj}),{24:$Vk,25:$Vl,26:125,28:95,31:$Vm,32:[1,123],39:97,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,86:$VP,87:59,88:61,89:124,90:$Vp,91:$Vq,93:126,95:$Vy},o($VO,[2,93]),o($VO,[2,95]),{24:[1,128]},o($Vg,$Vi),{24:$Vk,25:$Vl,31:$Vm,39:129,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,26:130,28:95,31:$Vm,39:97,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq,95:$Vy},{10:[1,131]},{14:132,15:133,16:134,18:135,24:$Vr,36:$V5},{24:$VQ,34:136,98:137},{16:142,24:$Vr,27:$VR,35:139,36:[1,140],55:$VS,94:141},{24:$Vk,25:$Vl,31:$Vm,39:144,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:103,58:[1,145],59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{17:146,24:[1,147]},{27:[1,148],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},{25:[1,149]},{32:[1,150]},o($VT,[2,15]),o($VT,[2,4]),{10:[1,151]},o($VT,[2,10],{16:10,37:11,9:17,18:22,59:23,13:152,12:153,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc}),o($VU,[2,8]),o($VV,[2,124]),{10:$Vs,57:$Vj,92:$Vv},{27:[1,154],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},{10:[1,155]},o($Vf,[2,33]),o($Vf,[2,34]),{17:32,24:[1,156],59:33},{27:[1,157],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},o($Vf,[2,40]),{27:[1,158]},o($VW,[2,111],{92:[1,159]}),{24:$Vk,25:$Vl,31:$Vm,39:160,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VX,[2,113],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($Vf,[2,49],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($Vf,[2,52],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($Vf,[2,53],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($Vf,[2,54],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($Vf,[2,55],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{58:[1,161],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},{24:$Vk,25:$Vl,31:$Vm,39:162,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:163,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:164,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:165,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:166,59:58,72:[1,167],78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:168,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:169,59:58,74:[1,170],78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:171,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:172,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:173,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:174,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:175,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:176,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,31:$Vm,39:177,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VN,[2,79]),o($VN,[2,81]),{24:$Vk,25:$Vl,31:$Vm,59:58,84:178,85:57,87:59,88:61,90:$Vp,91:$Vq},{24:$Vk,25:$Vl,26:180,27:[1,179],28:95,31:$Vm,39:97,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq,95:$Vy},{27:[1,181],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},o($VO,[2,90]),{32:[1,182],92:[1,183]},{32:[1,184]},o($VY,[2,97]),{24:[1,185]},{56:[1,186],57:[1,187]},o($Vf,[2,48],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{27:[1,188]},o($Vw,[2,21]),{32:[1,189]},{14:190,15:133,16:134,18:135,24:$Vr,32:[2,12],36:$V5},{17:191,24:$Vx,59:33},{10:[1,192]},{32:[1,193]},{32:[2,121],92:[1,194]},{56:[1,195]},{27:[1,196]},o($Vg,$Vh,{27:[1,197]}),{27:[2,108],92:[1,198]},{24:[1,200],80:[1,199]},{16:201,24:$Vr,36:$V5},o($Vf,[2,58],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{56:[1,202]},o($Vf,[2,118]),o($Vf,$Vs,{92:$Vv}),{16:39,18:22,24:$V1,31:$Ve,36:$V5,37:38,40:203,54:$Vb,55:$Vc,59:23},{24:$Vk,25:$Vl,31:$Vm,39:204,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VV,[2,123]),o($VT,[2,5],{16:10,37:11,18:22,59:23,8:81,9:82,11:83,12:84,7:205,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc}),{10:[1,206]},o($VU,[2,7]),{31:[1,207]},{24:$Vk,25:$Vl,31:$Vm,39:208,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($Vf,$Vs,{56:$Vt,57:$Vu,92:$Vv}),{16:39,18:22,24:$V1,31:$Ve,36:$V5,37:38,40:209,54:$Vb,55:$Vc,59:23},o($Vf,[2,41]),{24:$Vk,25:$Vl,26:210,28:95,31:$Vm,39:97,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq,95:$Vy},o($VX,[2,112],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o([10,25,27,32,50,56,58,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,92],[2,85]),{50:[1,211],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},o([10,27,32,50,58,68,69,92],[2,64],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o([10,27,32,50,58,68,69,70,92],[2,65],{71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($VZ,[2,66],{72:$VD,74:$VF,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V_,[2,67],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{24:$Vk,25:$Vl,31:$Vm,39:212,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VZ,[2,68],{72:$VD,74:$VF,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V_,[2,69],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{24:$Vk,25:$Vl,31:$Vm,39:213,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($VZ,[2,70],{72:$VD,74:$VF,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($VZ,[2,71],{72:$VD,74:$VF,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V$,[2,72],{79:$VK,80:$VL,81:$VM}),o($V$,[2,73],{79:$VK,80:$VL,81:$VM}),o($VN,[2,74]),o($VN,[2,77]),o($VN,[2,78]),o($VN,[2,83]),o($VO,[2,99]),{27:[1,214]},o($VO,[2,88]),o($VO,[2,91]),{86:$VP,93:215},o($VO,[2,92]),{56:[1,216]},{24:$Vk,25:$Vl,31:$Vm,39:217,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{58:[1,218]},{25:[1,219]},{10:[1,220]},{32:[2,11]},{10:[1,221]},o($V01,[2,14]),{10:[1,222]},{24:$VQ,34:223,98:137},{90:[1,224]},{31:[1,225]},{31:[1,226]},{16:142,24:$Vr,27:$VR,35:227,36:$V5,55:$VS,94:141},{24:[1,228]},o($V11,[2,104],{57:[1,229]}),{24:[1,230]},{24:$Vk,25:$Vl,31:$Vm,39:231,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($Vw,[2,27]),{27:[1,232],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},o($VT,[2,6]),o($VT,[2,9]),{43:233,48:235,49:$V21,52:234},{10:[1,237],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},o($Vw,[2,32],{47:238,97:$V31}),o($VW,[2,110]),{24:$Vk,25:$Vl,31:$Vm,39:240,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($V_,[2,76],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($V_,[2,75],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($VO,[2,100]),o($VY,[2,96]),{24:$Vk,25:$Vl,31:$Vm,39:241,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},o($Vf,[2,44],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{56:[1,242]},{24:$Vk,25:$Vl,28:243,31:$Vm,39:97,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq,95:$Vy},o($Vw,[2,22]),o($V01,[2,13]),o($Vw,[2,23]),{32:[2,120]},o($VY,[2,122]),{7:80,8:81,9:82,11:83,12:84,16:10,18:22,19:244,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,59:23},{7:80,8:81,9:82,11:83,12:84,16:10,18:22,19:245,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,59:23},{27:[2,107]},o($V11,[2,103]),{58:[1,246]},o($V11,[2,106]),o($Vf,[2,59],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{10:[1,247]},{32:[1,248]},{32:[2,39],53:[1,249]},o($V41,[2,37],{48:235,52:250,49:$V21}),{24:$Vk,25:$Vl,31:$Vm,39:251,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{9:17,13:89,16:91,18:22,24:$V1,36:$V5,37:90,45:252,54:$Vb,55:$Vc,59:23},o($Vw,[2,31]),{16:39,18:22,24:$V1,31:$Ve,36:$V5,37:38,40:254,46:[1,253],54:$Vb,55:$Vc,59:23},o([10,27,32,50,58,92],[2,63],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($VY,[2,98],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{24:$Vk,25:$Vl,31:$Vm,39:255,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{27:[1,256]},{32:[1,257]},{32:[1,258]},o($V11,[2,105]),o($Vw,[2,28]),o($Vw,[2,29]),{50:[1,259]},o($V41,[2,36]),{50:[1,260],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},{27:[1,261]},{25:[1,262]},o($Vw,[2,117]),o($Vf,[2,45],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($Vw,[2,20]),o($Vw,[2,24]),o($Vw,[2,25]),{7:80,8:81,9:82,11:83,12:84,16:10,18:22,19:263,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,59:23},{7:80,8:81,9:82,11:83,12:84,16:10,18:22,19:264,23:$V0,24:$V1,29:$V2,30:$V3,33:$V4,36:$V5,37:11,38:$V6,41:$V7,42:$V8,44:$V9,46:$Va,54:$Vb,55:$Vc,59:23},{16:39,18:22,24:$V1,31:$Ve,36:$V5,37:38,40:265,54:$Vb,55:$Vc,59:23},{24:$Vk,25:$Vl,31:$Vm,39:266,59:58,78:$Vn,82:54,83:$Vo,84:56,85:57,87:59,88:61,90:$Vp,91:$Vq},{32:[2,38]},{51:[1,267]},o($Vw,[2,30]),{27:[1,268],68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM},{10:[1,269]},{16:39,18:22,24:$V1,31:$Ve,36:$V5,37:38,40:270,54:$Vb,55:$Vc,59:23},o([32,49,53],[2,35]),{47:271,97:$V31},o($Vw,[2,116])],
defaultActions: {24:[2,1],190:[2,11],223:[2,120],227:[2,107],263:[2,38]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 90
break;
case 2:return 91
break;
case 3:return 29
break;
case 4:return 23
break;
case 5:return "if"
break;
case 6:return 41
break;
case 7:return "else"
break;
case 8:return 33
break;
case 9:return "return"
break;
case 10:return "void"
break;
case 11:return "case"
break;
case 12:return "printf"
break;
case 13:return "while"
break;
case 14:return "break"
break;
case 15:return "default"
break;
case 16:return "const"
break;
case 17:return "struct"
break;
case 18:return "switch"
break;
case 19:return "for"
break;
case 20:return 92
break;
case 21:return 10
break;
case 22:return 86
break;
case 23:return 50
break;
case 24:return 70
break;
case 25:return 95
break;
case 26:return 69
break;
case 27:return 76
break;
case 28:return 83
break;
case 29:return 73
break;
case 30:return 74
break;
case 31:return 71
break;
case 32:return 72
break;
case 33:return 75
break;
case 34:return 56
break;
case 35:return 64
break;
case 36:return 80
break;
case 37:return 79
break;
case 38:return 65
break;
case 39:return 81
break;
case 40:return 63
break;
case 41:return 61
break;
case 42:return 78
break;
case 43:return 60
break;
case 44:return 62
break;
case 45:return 77
break;
case 46:return '^'
break;
case 47:return 68
break;
case 48:return 31
break;
case 49:return 32
break;
case 50:return 57
break;
case 51:return 58
break;
case 52:return 25
break;
case 53:return 27
break;
case 54:return 24
break;
case 55:return 5
break;
case 56:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:typedef\b)/,/^(?:#define\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c_parser;
exports.Parser = c_parser.Parser;
exports.parse = function () { return c_parser.parse.apply(c_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}