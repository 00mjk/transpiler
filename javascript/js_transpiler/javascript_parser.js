/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var javascript_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,14],$V2=[1,19],$V3=[1,6],$V4=[1,20],$V5=[1,7],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,18],$Vb=[1,21],$Vc=[1,22],$Vd=[1,16],$Ve=[5,18],$Vf=[5,15,16,17,18,21,22,26,30,33,34,35,60,65,66,76],$Vg=[1,29],$Vh=[1,35],$Vi=[1,34],$Vj=[1,31],$Vk=[2,54],$Vl=[1,49],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,47],$Vt=[1,48],$Vu=[2,61],$Vv=[1,52],$Vw=[1,60],$Vx=[1,56],$Vy=[1,59],$Vz=[18,20,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,70,71],$VA=[2,62],$VB=[1,68],$VC=[2,69],$VD=[20,24],$VE=[1,69],$VF=[1,70],$VG=[1,71],$VH=[1,72],$VI=[1,73],$VJ=[1,74],$VK=[1,75],$VL=[1,76],$VM=[1,77],$VN=[1,78],$VO=[1,79],$VP=[1,80],$VQ=[1,81],$VR=[18,20,24,46,47,48,49,50,51,52,53,54,55,56,57,58,62,70],$VS=[2,86],$VT=[1,85],$VU=[24,62],$VV=[18,70],$VW=[1,103],$VX=[1,104],$VY=[1,134],$VZ=[1,133],$V_=[1,143],$V$=[18,20,24,46,47,48,49,50,51,52,53,62,70],$V01=[18,20,24,46,47,48,49,50,51,52,53,54,55,62,70],$V11=[1,168],$V21=[5,15,16,17,18,21,22,26,30,33,34,35,60,65,66,75,76],$V31=[16,18,32];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"statement_with_semicolon":19,";":20,"while":21,"(":22,"e":23,")":24,"bracket_statements":25,"for":26,"of":27,"dot_expr":28,"if_statement":29,"function":30,"parameters":31,"static":32,"return":33,"yield":34,"var":35,"=":36,"identifiers":37,"access_array":38,"++":39,"--":40,"+=":41,"-=":42,"*=":43,"/=":44,".":45,"||":46,"&&":47,"!==":48,"===":49,"<=":50,"<":51,">=":52,">":53,"+":54,"-":55,"*":56,"/":57,"%":58,"parentheses_expr":59,"[":60,"access_arr":61,"]":62,"exprs":63,"key_values":64,"NUMBER":65,"STRING_LITERAL":66,"type":67,"types":68,"parameter":69,",":70,"][":71,"key_value":72,":":73,"elif":74,"else":75,"if":76,"else_statement":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",20:";",21:"while",22:"(",24:")",26:"for",27:"of",30:"function",32:"static",33:"return",34:"yield",35:"var",36:"=",39:"++",40:"--",41:"+=",42:"-=",43:"*=",44:"/=",45:".",46:"||",47:"&&",48:"!==",49:"===",50:"<=",51:"<",52:">=",53:">",54:"+",55:"-",56:"*",57:"/",58:"%",60:"[",62:"]",65:"NUMBER",66:"STRING_LITERAL",70:",",71:"][",73:":",75:"else",76:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[6,2],[6,1],[6,5],[6,9],[6,9],[6,1],[6,8],[10,8],[10,7],[19,2],[19,2],[19,4],[19,2],[19,3],[19,3],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[28,3],[28,1],[38,4],[59,7],[59,3],[59,4],[59,1],[59,2],[59,3],[59,2],[59,3],[59,3],[59,1],[59,1],[59,1],[67,3],[67,4],[67,1],[69,1],[31,3],[31,1],[31,0],[61,3],[61,1],[63,3],[63,1],[64,3],[64,1],[72,3],[72,3],[68,3],[68,1],[74,7],[74,1],[77,2],[29,6],[29,5],[37,3],[37,1],[25,3],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 49: case 68: case 71:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 11: case 88:
this.$ = ["semicolon",$$[$0-1]];
break;
case 13:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 14:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 15:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["return",$$[$0]];
break;
case 21:
this.$ = ["yield",$$[$0]];
break;
case 22:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 24: case 25:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 26: case 27:
this.$ = [$$[$0],$$[$0-1]];
break;
case 28: case 29: case 30: case 31: case 33: case 34: case 37: case 38: case 39: case 40: case 41:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 35:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["*",$$[$0-2],$$[$0]];
break;
case 44: case 45:
this.$ = ["/",$$[$0-2],$$[$0]];
break;
case 46:
this.$ = ["-",$$[$0]];
break;
case 47:
this.$ = [".", $$[$0]];
break;
case 48: case 67: case 70: case 72: case 78: case 85:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 50:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 51:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 52:
this.$= ["function_call",$$[$0-2],[]];
break;
case 53:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 55:
this.$ = ["initializer_list","Object",[]];
break;
case 56:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 57:
this.$ = ["associative_array","Object","Object",[]];
break;
case 58:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 59:
this.$ = ["parentheses",$$[$0-1]];
break;
case 60: case 61: case 62:
this.$ = yytext;
break;
case 63:
this.$ = [$$[$0-2],"[]"];
break;
case 64:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 66:
this.$ = ["Object", $$[$0]];
break;
case 69:
this.$ = []
break;
case 73: case 75: case 79: case 86:
this.$ = [$$[$0]];
break;
case 74:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 76:
this.$ = [$$[$0-2],$$[$0]]
break;
case 77:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 80:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 82:
this.$ = ["else",$$[$0]];
break;
case 83:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 84:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 87:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc,76:$Vd},{1:[3]},{5:[1,23]},o($Ve,[2,3],{6:3,19:4,14:5,29:8,38:13,59:17,4:24,15:$V0,16:$V1,17:$V2,21:$V3,22:$V4,26:$V5,30:$V6,33:$V7,34:$V8,35:$V9,60:$Va,65:$Vb,66:$Vc,76:$Vd}),{20:[1,25]},o($Vf,[2,12]),{22:[1,26]},{22:[1,27]},o($Vf,[2,16]),{16:[1,28],22:$Vg},{16:$Vh,17:$V2,22:$V4,23:30,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:37,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:[1,38],37:39},{36:[1,40],60:$Vk},{22:$Vl,36:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,60:$Vu},{16:[1,50]},{22:[1,51]},{60:$Vv},{16:$Vh,17:$V2,22:$V4,23:55,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,62:[1,53],63:54,65:$Vb,66:$Vc},{16:$Vw,18:$Vx,64:57,66:$Vy,72:58},{16:$Vh,17:$V2,22:$V4,23:61,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},o($Vz,[2,60]),o($Vz,$VA),{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,11]),{16:$Vh,17:$V2,22:$V4,23:62,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:[1,63],17:$V2,19:64,22:$V4,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc},{22:[1,65]},{16:$VB,24:$VC,31:66,69:67},o($VD,[2,20],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),{16:$Vh,17:$V2,22:$V4,23:82,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},o($VR,[2,47]),o($VR,[2,49],{45:[1,83],60:$Vv}),{22:$Vg},o($Vz,$Vu,{22:$Vl}),o($Vz,$Vk),o($VD,[2,21],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,$VS,{36:[1,84],70:$VT}),o($VD,[2,23]),{16:$Vh,17:$V2,22:$V4,23:86,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:87,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},o($VD,[2,26]),o($VD,[2,27]),{16:$Vh,17:$V2,22:$V4,23:88,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:89,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:90,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:91,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,28:92,30:$Vi,38:36,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:55,24:[1,93],28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,63:94,65:$Vb,66:$Vc},{17:[1,95]},{16:$Vh,17:$V2,22:$V4,23:96,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,30:$Vi,38:36,59:98,60:$Va,61:97,65:$Vb,66:$Vc},o($Vz,[2,55]),{62:[1,99]},o($VU,[2,73],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,70:[1,100]}),o($Vz,[2,57]),{18:[1,101],70:[1,102]},o($VV,[2,75]),{73:$VW},{73:$VX},{24:[1,105],46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ},{24:[1,106],46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ},{22:$Vl,27:[1,107],36:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,60:$Vu},{20:[1,108]},{16:$VB,24:$VC,31:109,69:67},{24:[1,110]},{24:[2,68],70:[1,111]},o([24,70],[2,66]),{16:$Vh,17:$V2,22:$V4,23:112,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:113,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:114,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:115,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:116,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:117,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:118,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:119,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:120,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:121,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:122,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:123,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:124,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},o($VR,[2,46]),{16:$Vh,17:$V2,22:$V4,28:125,30:$Vi,38:36,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:126,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:[1,128],37:127},o($VD,[2,24],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,[2,25],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,[2,28],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,[2,29],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,[2,30],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,[2,31],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,[2,32]),o($Vz,[2,52]),{24:[1,129]},{7:130,8:131,10:132,16:$VY,32:$VZ},{24:[1,135],46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ},{62:[1,136]},{60:$Vv,62:[2,71],71:[1,137]},o($Vz,[2,56]),{16:$Vh,17:$V2,22:$V4,23:55,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,63:138,65:$Vb,66:$Vc},o($Vz,[2,58]),{16:$Vw,66:$Vy,72:139},{16:$Vh,17:$V2,22:$V4,23:140,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:141,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},o($Vz,[2,59]),{16:$V1,17:$V_,19:144,22:$V4,25:142,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,28:145,30:$Vi,38:36,59:33,60:$Va,65:$Vb,66:$Vc},{16:$Vh,17:$V2,22:$V4,23:146,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},{24:[1,147]},{17:[1,148]},{16:$VB,24:$VC,31:149,69:67},o([18,20,24,46,62,70],[2,33],{47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o([18,20,24,46,47,62,70],[2,34],{48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($V$,[2,35],{54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($V$,[2,36],{54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($V$,[2,37],{54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($V$,[2,38],{54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($V$,[2,39],{54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($V$,[2,40],{54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($V01,[2,41],{56:$VO,57:$VP,58:$VQ}),o($V01,[2,42],{56:$VO,57:$VP,58:$VQ}),o($VR,[2,43]),o($VR,[2,44]),o($VR,[2,45]),o($VR,[2,48]),o($VD,[2,22],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VD,[2,85]),o($VD,$VS,{70:$VT}),o($Vz,[2,53]),{18:[1,150]},{18:[2,4]},{8:151,10:132,16:$VY,18:[2,7],32:$VZ},{16:[1,152]},{22:[1,153]},{16:$V1,17:$V_,19:144,22:$V4,25:154,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc},o([18,20,24,36,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,70,71],[2,50]),{16:$Vh,17:$V2,22:$V4,30:$Vi,38:36,59:98,60:$Va,61:155,65:$Vb,66:$Vc},o($VU,[2,72]),o($VV,[2,74]),o($VV,[2,76],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($VV,[2,77],{46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),o($Vf,[2,13]),{4:157,6:3,9:156,14:5,15:$V0,16:[1,159],17:$V2,18:$Vx,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,64:57,65:$Vb,66:[1,158],72:58,76:$Vd},{20:[1,160]},{24:[1,161]},{20:[1,162],46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ},{17:[1,163]},{4:157,6:3,9:164,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc,76:$Vd},{24:[2,67]},o($Vf,[2,10]),{18:[2,6]},{22:[1,165]},{16:$VB,24:$VC,31:166,69:67},o($Vf,[2,84],{74:167,77:169,75:$V11}),{62:[2,70]},{18:[1,170]},{18:[2,5]},{60:$VA,73:$VW},{22:$Vl,36:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,60:$Vu,73:$VX},o($V21,[2,88]),{17:[1,171]},{16:$V1,17:$V2,19:172,22:$V4,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc},{4:157,6:3,9:173,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc,76:$Vd},{18:[1,174]},{16:$VB,24:$VC,31:175,69:67},{24:[1,176]},o($Vf,[2,83]),{16:$V1,17:$V_,19:144,22:$V4,25:178,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc,76:[1,177]},o($Vf,[2,81]),o($V21,[2,87]),{4:157,6:3,9:179,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc,76:$Vd},{24:[1,180]},{18:[1,181]},o($Vz,[2,51]),{24:[1,182]},{17:[1,183]},{22:[1,184]},o($Vf,[2,82]),{18:[1,185]},{16:$V1,17:$V_,19:144,22:$V4,25:186,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc},o($Vf,[2,17]),{17:[1,187]},{4:157,6:3,9:188,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc,76:$Vd},{16:$Vh,17:$V2,22:$V4,23:189,28:32,30:$Vi,38:36,55:$Vj,59:33,60:$Va,65:$Vb,66:$Vc},o($Vf,[2,14]),o($Vf,[2,15]),{4:157,6:3,9:190,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc,76:$Vd},{18:[1,191]},{24:[1,192],46:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ},{18:[1,193]},o($V31,[2,19]),{16:$V1,17:$V_,19:144,22:$V4,25:194,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,59:17,60:$Va,65:$Vb,66:$Vc},o($V31,[2,18]),{74:195,75:$V11,77:169},o($Vf,[2,80])],
defaultActions: {23:[2,1],131:[2,4],149:[2,67],151:[2,6],155:[2,70],157:[2,5]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 65
break;
case 2:return 66
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "class"
break;
case 6:return 76
break;
case 7:return 75
break;
case 8:return 33
break;
case 9:return 34
break;
case 10:return 21
break;
case 11:return 26
break;
case 12:return 35
break;
case 13:return 27
break;
case 14:return 70
break;
case 15:return 20
break;
case 16:return 45
break;
case 17:return 73
break;
case 18:return 47
break;
case 19:return 46
break;
case 20:return 52
break;
case 21:return 53
break;
case 22:return 50
break;
case 23:return 51
break;
case 24:return 49
break;
case 25:return 48
break;
case 26:return 36
break;
case 27:return 43
break;
case 28:return 56
break;
case 29:return 44
break;
case 30:return 57
break;
case 31:return 58
break;
case 32:return 42
break;
case 33:return 40
break;
case 34:return 55
break;
case 35:return 39
break;
case 36:return 41
break;
case 37:return 54
break;
case 38:return '^'
break;
case 39:return 17
break;
case 40:return 18
break;
case 41:return 71
break;
case 42:return 60
break;
case 43:return 62
break;
case 44:return 22
break;
case 45:return 24
break;
case 46:return 16
break;
case 47:return 5
break;
case 48:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = javascript_parser;
exports.Parser = javascript_parser.Parser;
exports.parse = function () { return javascript_parser.parse.apply(javascript_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}