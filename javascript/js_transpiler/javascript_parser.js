/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var javascript_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,16],$V2=[1,21],$V3=[1,6],$V4=[1,22],$V5=[1,7],$V6=[1,8],$V7=[1,14],$V8=[1,10],$V9=[1,11],$Va=[1,12],$Vb=[1,13],$Vc=[1,20],$Vd=[1,23],$Ve=[1,24],$Vf=[1,18],$Vg=[5,14,27],$Vh=[5,14,24,25,26,27,29,30,32,34,37,40,43,44,45,78,83,84,93],$Vi=[1,32],$Vj=[15,31],$Vk=[1,43],$Vl=[1,42],$Vm=[1,34],$Vn=[1,35],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[2,71],$Vs=[1,57],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[2,78],$VC=[1,60],$VD=[1,68],$VE=[1,64],$VF=[1,67],$VG=[13,15,27,31,38,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,80,88,89],$VH=[2,79],$VI=[1,78],$VJ=[2,86],$VK=[1,85],$VL=[1,79],$VM=[1,80],$VN=[1,81],$VO=[1,82],$VP=[1,83],$VQ=[1,84],$VR=[1,86],$VS=[1,87],$VT=[1,88],$VU=[1,89],$VV=[1,90],$VW=[1,91],$VX=[1,92],$VY=[1,93],$VZ=[1,94],$V_=[1,95],$V$=[13,15,27,31,38,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,80,88],$V01=[2,102],$V11=[1,102],$V21=[1,103],$V31=[31,80],$V41=[27,88],$V51=[1,121],$V61=[1,122],$V71=[1,158],$V81=[1,157],$V91=[1,168],$Va1=[13,15,27,31,57,58,80,88],$Vb1=[13,15,27,31,57,58,59,60,80,88],$Vc1=[13,15,27,31,38,57,58,59,60,61,62,63,64,65,66,67,80,88],$Vd1=[13,15,27,31,38,57,58,59,60,61,62,63,64,65,66,67,68,69,80,88],$Ve1=[1,185],$Vf1=[1,199],$Vg1=[18,27],$Vh1=[5,14,24,25,26,27,29,30,32,34,37,40,43,44,45,78,83,84,92,93],$Vi1=[25,27,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"case_statement":10,"case":11,"e":12,":":13,"break":14,";":15,"case_statements_":16,"case_statements":17,"default":18,"class_statement":19,"access_modifier":20,"public":21,"private":22,"class_":23,"class":24,"IDENTIFIER":25,"{":26,"}":27,"statement_with_semicolon":28,"switch":29,"(":30,")":31,"while":32,"bracket_statements":33,"for":34,"of":35,"dot_expr":36,"var":37,"in":38,"if_statement":39,"function":40,"parameters":41,"static":42,"continue":43,"return":44,"yield":45,"=":46,"identifiers":47,"access_array":48,"++":49,"--":50,"+=":51,"-=":52,"*=":53,"/=":54,".":55,"...":56,"||":57,"|":58,"&&":59,"&":60,"!==":61,"===":62,"instanceof":63,"<=":64,"<":65,">=":66,">":67,"+":68,"-":69,"*":70,"/":71,"%":72,"not_expr":73,"!":74,"typeof":75,"await":76,"parentheses_expr":77,"[":78,"access_arr":79,"]":80,"exprs":81,"key_values":82,"NUMBER":83,"STRING_LITERAL":84,"type":85,"types":86,"parameter":87,",":88,"][":89,"key_value":90,"elif":91,"else":92,"if":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"case",13:":",14:"break",15:";",18:"default",21:"public",22:"private",24:"class",25:"IDENTIFIER",26:"{",27:"}",29:"switch",30:"(",31:")",32:"while",34:"for",35:"of",37:"var",38:"in",40:"function",42:"static",43:"continue",44:"return",45:"yield",46:"=",49:"++",50:"--",51:"+=",52:"-=",53:"*=",54:"/=",55:".",56:"...",57:"||",58:"|",59:"&&",60:"&",61:"!==",62:"===",63:"instanceof",64:"<=",65:"<",66:">=",67:">",68:"+",69:"-",70:"*",71:"/",72:"%",74:"!",75:"typeof",76:"await",78:"[",80:"]",83:"NUMBER",84:"STRING_LITERAL",88:",",89:"][",92:"else",93:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[10,6],[16,2],[16,1],[17,4],[17,1],[8,2],[8,1],[20,1],[20,1],[23,5],[6,2],[6,1],[6,7],[6,5],[6,7],[6,8],[6,9],[6,1],[6,8],[19,8],[19,7],[28,1],[28,2],[28,2],[28,4],[28,2],[28,3],[28,3],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,1],[73,2],[73,2],[73,2],[73,1],[36,3],[36,1],[48,4],[77,7],[77,3],[77,4],[77,1],[77,2],[77,3],[77,2],[77,3],[77,3],[77,1],[77,1],[77,1],[85,3],[85,4],[85,1],[87,1],[41,3],[41,1],[41,0],[79,3],[79,1],[81,3],[81,1],[82,3],[82,1],[90,3],[90,3],[86,3],[86,1],[91,7],[91,2],[39,6],[39,5],[47,3],[47,1],[33,3],[33,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 7: case 11:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 12: case 66: case 85: case 88:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 6:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 9:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 15:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 16: case 104:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 20: case 21:
this.$ = ["foreach","Object",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 27: case 90: case 92: case 96: case 102:
this.$ = [$$[$0]];
break;
case 28:
this.$ = ["return",$$[$0]];
break;
case 29:
this.$ = ["yield",$$[$0]];
break;
case 30:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 32: case 33:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 34: case 35:
this.$ = [$$[$0],$$[$0-1]];
break;
case 36: case 37: case 38: case 39: case 42: case 43: case 44: case 45: case 50: case 51: case 52: case 53: case 54:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 40:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 41:
this.$=["unpack_array",$$[$0]]
break;
case 46:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = ['in',$$[$0-2],$$[$0]];
break;
case 55:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 56:
this.$ = ["*",$$[$0-2],$$[$0]];
break;
case 57: case 58:
this.$ = ["/",$$[$0-2],$$[$0]];
break;
case 59:
this.$ = ["-",$$[$0]];
break;
case 61:
this.$ = ["!", [".",$$[$0]]];
break;
case 62:
this.$ = [$$[$0-1], [".",$$[$0]]];
break;
case 63:
this.$ = ["await", [".",$$[$0]]]
break;
case 64:
this.$ = [".", $$[$0]];
break;
case 65: case 84: case 87: case 89: case 95: case 101:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 67:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 68:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 69:
this.$= ["function_call",$$[$0-2],[]];
break;
case 70:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 72:
this.$ = ["initializer_list","Object",[]];
break;
case 73:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 74:
this.$ = ["associative_array","Object","Object",[]];
break;
case 75:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 76:
this.$ = ["parentheses",$$[$0-1]];
break;
case 77: case 78: case 79:
this.$ = yytext;
break;
case 80:
this.$ = [$$[$0-2],"[]"];
break;
case 81:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 83:
this.$ = ["Object", $$[$0]];
break;
case 86:
this.$ = []
break;
case 91:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 93:
this.$ = [$$[$0-2],$$[$0]]
break;
case 94:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 97:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 98:
this.$ = ["else",$$[$0]];
break;
case 99:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 100:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 103:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:$Vf},{1:[3]},{5:[1,25]},o($Vg,[2,3],{6:3,28:4,23:5,39:9,48:15,77:19,4:26,24:$V0,25:$V1,26:$V2,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,40:$V8,43:$V9,44:$Va,45:$Vb,78:$Vc,83:$Vd,84:$Ve,93:$Vf}),{15:[1,27]},o($Vh,[2,17]),{30:[1,28]},{30:[1,29]},{30:[1,30]},o($Vh,[2,23]),{25:[1,31],30:$Vi},o($Vj,[2,27]),{12:33,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:45,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{25:[1,46],47:47},{46:[1,48],78:$Vr},{30:$Vs,46:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,78:$VB},{25:[1,58]},{30:[1,59]},{78:$VC},{12:63,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,80:[1,61],81:62,83:$Vd,84:$Ve},{25:$VD,27:$VE,82:65,84:$VF,90:66},{12:69,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},o($VG,[2,77]),o($VG,$VH),{1:[2,1]},o($Vg,[2,2]),o($Vh,[2,16]),{12:70,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:71,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{25:[1,72],26:$V2,28:74,30:$V4,37:[1,73],40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},{30:[1,75]},{25:$VI,31:$VJ,41:76,87:77},o($Vj,[2,28],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),{12:96,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:97,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},o($V$,[2,60]),{25:$Vk,26:$V2,30:$V4,36:98,40:$Vl,48:44,77:41,78:$Vc,83:$Vd,84:$Ve},{25:$Vk,26:$V2,30:$V4,36:99,40:$Vl,48:44,77:41,78:$Vc,83:$Vd,84:$Ve},{25:$Vk,26:$V2,30:$V4,36:100,40:$Vl,48:44,77:41,78:$Vc,83:$Vd,84:$Ve},o($V$,[2,64]),o($V$,[2,66],{55:[1,101],78:$VC}),{30:$Vi},o($VG,$VB,{30:$Vs}),o($VG,$Vr),o($Vj,[2,29],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,$V01,{46:$V11,88:$V21}),o($Vj,[2,31]),{12:104,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:105,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},o($Vj,[2,34]),o($Vj,[2,35]),{12:106,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:107,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:108,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:109,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{25:$Vk,26:$V2,30:$V4,36:110,40:$Vl,48:44,77:41,78:$Vc,83:$Vd,84:$Ve},{12:63,25:$Vk,26:$V2,30:$V4,31:[1,111],36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,81:112,83:$Vd,84:$Ve},{26:[1,113]},{12:114,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{25:$Vk,26:$V2,30:$V4,40:$Vl,48:44,77:116,78:$Vc,79:115,83:$Vd,84:$Ve},o($VG,[2,72]),{80:[1,117]},o($V31,[2,90],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,88:[1,118]}),o($VG,[2,74]),{27:[1,119],88:[1,120]},o($V41,[2,92]),{13:$V51},{13:$V61},{31:[1,123],38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_},{31:[1,124],38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_},{31:[1,125],38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_},{30:$Vs,35:[1,126],46:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,78:$VB},{25:[1,127],47:47},{15:[1,128]},{25:$VI,31:$VJ,41:129,87:77},{31:[1,130]},{31:[2,85],88:[1,131]},o([31,88],[2,83]),{12:132,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:133,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:134,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:135,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:136,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:137,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:138,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:139,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:140,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:141,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:142,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:143,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:144,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:145,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:146,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:147,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:148,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},o([13,15,27,31,80,88],[2,41],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($V$,[2,59]),o($V$,[2,61]),o($V$,[2,62]),o($V$,[2,63]),{25:$Vk,26:$V2,30:$V4,36:149,40:$Vl,48:44,77:41,78:$Vc,83:$Vd,84:$Ve},{12:150,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{25:[1,152],47:151},o($Vj,[2,32],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,[2,33],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,[2,36],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,[2,37],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,[2,38],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,[2,39],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,[2,40]),o($VG,[2,69]),{31:[1,153]},{7:154,8:155,19:156,25:$V71,42:$V81},{31:[1,159],38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_},{80:[1,160]},{78:$VC,80:[2,88],89:[1,161]},o($VG,[2,73]),{12:63,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,81:162,83:$Vd,84:$Ve},o($VG,[2,75]),{25:$VD,84:$VF,90:163},{12:164,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{12:165,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},o($VG,[2,76]),{26:[1,166]},{25:$V1,26:$V91,28:169,30:$V4,33:167,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},{25:$Vk,26:$V2,30:$V4,36:170,40:$Vl,48:44,77:41,78:$Vc,83:$Vd,84:$Ve},{15:$V01,38:[1,171],46:$V11,88:$V21},{12:172,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{31:[1,173]},{26:[1,174]},{25:$VI,31:$VJ,41:175,87:77},o($Va1,[2,42],{38:$VK,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Va1,[2,43],{38:$VK,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vb1,[2,44],{38:$VK,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vb1,[2,45],{38:$VK,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,46],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,47],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,48],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,49],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,50],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,51],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,52],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vc1,[2,53],{68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vd1,[2,54],{70:$VY,71:$VZ,72:$V_}),o($Vd1,[2,55],{70:$VY,71:$VZ,72:$V_}),o($V$,[2,56]),o($V$,[2,57]),o($V$,[2,58]),o($V$,[2,65]),o($Vj,[2,30],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($Vj,[2,101]),o($Vj,$V01,{88:$V21}),o($VG,[2,70]),{27:[1,176]},{27:[2,4]},{8:177,19:156,25:$V71,27:[2,12],42:$V81},{25:[1,178]},{30:[1,179]},{25:$V1,26:$V91,28:169,30:$V4,33:180,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},o([13,15,27,31,38,46,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,80,88,89],[2,67]),{25:$Vk,26:$V2,30:$V4,40:$Vl,48:44,77:116,78:$Vc,79:181,83:$Vd,84:$Ve},o($V31,[2,89]),o($V41,[2,91]),o($V41,[2,93],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),o($V41,[2,94],{38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_}),{10:184,11:$Ve1,16:183,17:182},o($Vh,[2,19]),{4:187,6:3,9:186,23:5,24:$V0,25:[1,189],26:$V2,27:$VE,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,82:65,83:$Vd,84:[1,188],90:66,93:$Vf},{15:[1,190]},{31:[1,191]},{25:$Vk,26:$V2,30:$V4,36:192,40:$Vl,48:44,77:41,78:$Vc,83:$Vd,84:$Ve},{15:[1,193],38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_},{26:[1,194]},{4:187,6:3,9:195,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:$Vf},{31:[2,84]},o($Vh,[2,15]),{27:[2,11]},{30:[1,196]},{25:$VI,31:$VJ,41:197,87:77},o($Vh,[2,100],{91:198,92:$Vf1}),{80:[2,87]},{27:[1,200]},{18:[1,201],27:[2,10]},o($Vg1,[2,8],{10:184,16:202,11:$Ve1}),{12:203,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{27:[1,204]},o([14,27],[2,5]),{13:$V51,78:$VH},{13:$V61,30:$Vs,46:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,78:$VB},o($Vh1,[2,104]),{25:$V1,26:$V91,28:169,30:$V4,33:205,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},{31:[1,206]},{25:$V1,26:$V2,28:207,30:$V4,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},{4:187,6:3,9:208,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:$Vf},{27:[1,209]},{25:$VI,31:$VJ,41:210,87:77},{31:[1,211]},o($Vh,[2,99]),{25:$V1,26:$V91,28:169,30:$V4,33:213,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:[1,212]},o($Vh,[2,18]),{13:[1,214]},o($Vg1,[2,7]),{13:[1,215],38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_},o($Vh1,[2,103]),o($Vh,[2,20]),{25:$V1,26:$V91,28:169,30:$V4,33:216,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},{31:[1,217]},{27:[1,218]},o($VG,[2,68]),{31:[1,219]},{26:[1,220]},{30:[1,221]},o($Vh,[2,98]),{4:187,6:3,9:222,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:$Vf},{4:187,6:3,9:223,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:$Vf},o($Vh,[2,21]),{25:$V1,26:$V91,28:169,30:$V4,33:224,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},o($Vh,[2,24]),{26:[1,225]},{4:187,6:3,9:226,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:$Vf},{12:227,25:$Vk,26:$V2,30:$V4,36:40,40:$Vl,48:44,56:$Vm,69:$Vn,73:36,74:$Vo,75:$Vp,76:$Vq,77:41,78:$Vc,83:$Vd,84:$Ve},{27:[2,9]},{14:[1,228]},o($Vh,[2,22]),{4:187,6:3,9:229,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,32:$V5,34:$V6,37:$V7,39:9,40:$V8,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve,93:$Vf},{27:[1,230]},{31:[1,231],38:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_},{15:[1,232]},{27:[1,233]},o($Vi1,[2,26]),{25:$V1,26:$V91,28:169,30:$V4,33:234,37:$V7,40:$Vl,43:$V9,44:$Va,45:$Vb,48:15,77:19,78:$Vc,83:$Vd,84:$Ve},o([11,18,27],[2,6]),o($Vi1,[2,25]),{91:235,92:$Vf1},o($Vh,[2,97])],
defaultActions: {25:[2,1],155:[2,4],175:[2,84],177:[2,11],181:[2,87],222:[2,9]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 83
break;
case 2:return 84
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "continue"
break;
case 6:return "typeof"
break;
case 7:return "class"
break;
case 8:return 93
break;
case 9:return 92
break;
case 10:return "case"
break;
case 11:return 18
break;
case 12:return 44
break;
case 13:return 45
break;
case 14:return 32
break;
case 15:return 29
break;
case 16:return 14
break;
case 17:return 34
break;
case 18:return 37
break;
case 19:return 35
break;
case 20:return 88
break;
case 21:return 15
break;
case 22:return 56
break;
case 23:return 55
break;
case 24:return 13
break;
case 25:return 59
break;
case 26:return 60
break;
case 27:return 57
break;
case 28:return 58
break;
case 29:return 66
break;
case 30:return 67
break;
case 31:return 64
break;
case 32:return 65
break;
case 33:return 62
break;
case 34:return 61
break;
case 35:return "!"
break;
case 36:return 46
break;
case 37:return 53
break;
case 38:return 70
break;
case 39:return 54
break;
case 40:return 71
break;
case 41:return 72
break;
case 42:return 52
break;
case 43:return 50
break;
case 44:return 69
break;
case 45:return 49
break;
case 46:return 51
break;
case 47:return 68
break;
case 48:return '^'
break;
case 49:return 26
break;
case 50:return 27
break;
case 51:return 89
break;
case 52:return 78
break;
case 53:return 80
break;
case 54:return 30
break;
case 55:return 31
break;
case 56:return 63
break;
case 57:return 38
break;
case 58:return 25
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:continue\b)/,/^(?:typeof\b)/,/^(?:class\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:instanceof\b)/,/^(?:in\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = javascript_parser;
exports.Parser = javascript_parser.Parser;
exports.parse = function () { return javascript_parser.parse.apply(javascript_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}