/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var javascript_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,14],$V2=[1,19],$V3=[1,6],$V4=[1,20],$V5=[1,7],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,18],$Vb=[1,21],$Vc=[1,22],$Vd=[1,16],$Ve=[5,18],$Vf=[5,15,16,17,18,21,22,26,30,33,34,35,63,68,69,79],$Vg=[1,29],$Vh=[1,38],$Vi=[1,37],$Vj=[1,31],$Vk=[1,33],$Vl=[1,34],$Vm=[2,57],$Vn=[1,52],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[2,64],$Vx=[1,55],$Vy=[1,63],$Vz=[1,59],$VA=[1,62],$VB=[18,20,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,73,74],$VC=[2,65],$VD=[1,71],$VE=[2,72],$VF=[20,24],$VG=[1,72],$VH=[1,73],$VI=[1,74],$VJ=[1,75],$VK=[1,76],$VL=[1,77],$VM=[1,78],$VN=[1,79],$VO=[1,80],$VP=[1,81],$VQ=[1,82],$VR=[1,83],$VS=[1,84],$VT=[18,20,24,46,47,48,49,50,51,52,53,54,55,56,57,58,65,73],$VU=[2,89],$VV=[1,90],$VW=[24,65],$VX=[18,73],$VY=[1,108],$VZ=[1,109],$V_=[1,139],$V$=[1,138],$V01=[1,148],$V11=[18,20,24,46,47,48,49,50,51,52,53,65,73],$V21=[18,20,24,46,47,48,49,50,51,52,53,54,55,65,73],$V31=[1,173],$V41=[5,15,16,17,18,21,22,26,30,33,34,35,63,68,69,78,79],$V51=[16,18,32];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"statement_with_semicolon":19,";":20,"while":21,"(":22,"e":23,")":24,"bracket_statements":25,"for":26,"of":27,"dot_expr":28,"if_statement":29,"function":30,"parameters":31,"static":32,"return":33,"yield":34,"var":35,"=":36,"identifiers":37,"access_array":38,"++":39,"--":40,"+=":41,"-=":42,"*=":43,"/=":44,".":45,"||":46,"&&":47,"!==":48,"===":49,"<=":50,"<":51,">=":52,">":53,"+":54,"-":55,"*":56,"/":57,"%":58,"not_expr":59,"!":60,"await":61,"parentheses_expr":62,"[":63,"access_arr":64,"]":65,"exprs":66,"key_values":67,"NUMBER":68,"STRING_LITERAL":69,"type":70,"types":71,"parameter":72,",":73,"][":74,"key_value":75,":":76,"elif":77,"else":78,"if":79,"else_statement":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",20:";",21:"while",22:"(",24:")",26:"for",27:"of",30:"function",32:"static",33:"return",34:"yield",35:"var",36:"=",39:"++",40:"--",41:"+=",42:"-=",43:"*=",44:"/=",45:".",46:"||",47:"&&",48:"!==",49:"===",50:"<=",51:"<",52:">=",53:">",54:"+",55:"-",56:"*",57:"/",58:"%",60:"!",61:"await",63:"[",65:"]",68:"NUMBER",69:"STRING_LITERAL",73:",",74:"][",76:":",78:"else",79:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[6,2],[6,1],[6,5],[6,9],[6,9],[6,1],[6,8],[10,8],[10,7],[19,2],[19,2],[19,4],[19,2],[19,3],[19,3],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[59,2],[59,2],[59,1],[28,3],[28,1],[38,4],[62,7],[62,3],[62,4],[62,1],[62,2],[62,3],[62,2],[62,3],[62,3],[62,1],[62,1],[62,1],[70,3],[70,4],[70,1],[72,1],[31,3],[31,1],[31,0],[64,3],[64,1],[66,3],[66,1],[67,3],[67,1],[75,3],[75,3],[71,3],[71,1],[77,7],[77,1],[80,2],[29,6],[29,5],[37,3],[37,1],[25,3],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 52: case 71: case 74:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 11: case 91:
this.$ = ["semicolon",$$[$0-1]];
break;
case 13:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 14:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 15:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["return",$$[$0]];
break;
case 21:
this.$ = ["yield",$$[$0]];
break;
case 22:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 24: case 25:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 26: case 27:
this.$ = [$$[$0],$$[$0-1]];
break;
case 28: case 29: case 30: case 31: case 33: case 34: case 37: case 38: case 39: case 40: case 41:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 35:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["*",$$[$0-2],$$[$0]];
break;
case 44: case 45:
this.$ = ["/",$$[$0-2],$$[$0]];
break;
case 46:
this.$ = ["-",$$[$0]];
break;
case 48:
this.$ = ["!", [".",$$[$0]]];
break;
case 49:
this.$ = ["await", [".",$$[$0]]]
break;
case 50:
this.$ = [".", $$[$0]];
break;
case 51: case 70: case 73: case 75: case 81: case 88:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 53:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 54:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 55:
this.$= ["function_call",$$[$0-2],[]];
break;
case 56:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 58:
this.$ = ["initializer_list","Object",[]];
break;
case 59:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 60:
this.$ = ["associative_array","Object","Object",[]];
break;
case 61:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 62:
this.$ = ["parentheses",$$[$0-1]];
break;
case 63: case 64: case 65:
this.$ = yytext;
break;
case 66:
this.$ = [$$[$0-2],"[]"];
break;
case 67:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 69:
this.$ = ["Object", $$[$0]];
break;
case 72:
this.$ = []
break;
case 76: case 78: case 82: case 89:
this.$ = [$$[$0]];
break;
case 77:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 79:
this.$ = [$$[$0-2],$$[$0]]
break;
case 80:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 83:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 85:
this.$ = ["else",$$[$0]];
break;
case 86:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 87:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 90:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc,79:$Vd},{1:[3]},{5:[1,23]},o($Ve,[2,3],{6:3,19:4,14:5,29:8,38:13,62:17,4:24,15:$V0,16:$V1,17:$V2,21:$V3,22:$V4,26:$V5,30:$V6,33:$V7,34:$V8,35:$V9,63:$Va,68:$Vb,69:$Vc,79:$Vd}),{20:[1,25]},o($Vf,[2,12]),{22:[1,26]},{22:[1,27]},o($Vf,[2,16]),{16:[1,28],22:$Vg},{16:$Vh,17:$V2,22:$V4,23:30,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:40,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:[1,41],37:42},{36:[1,43],63:$Vm},{22:$Vn,36:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,63:$Vw},{16:[1,53]},{22:[1,54]},{63:$Vx},{16:$Vh,17:$V2,22:$V4,23:58,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,65:[1,56],66:57,68:$Vb,69:$Vc},{16:$Vy,18:$Vz,67:60,69:$VA,75:61},{16:$Vh,17:$V2,22:$V4,23:64,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},o($VB,[2,63]),o($VB,$VC),{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,11]),{16:$Vh,17:$V2,22:$V4,23:65,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:[1,66],17:$V2,19:67,22:$V4,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc},{22:[1,68]},{16:$VD,24:$VE,31:69,72:70},o($VF,[2,20],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),{16:$Vh,17:$V2,22:$V4,23:85,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},o($VT,[2,47]),{16:$Vh,17:$V2,22:$V4,28:86,30:$Vi,38:39,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,28:87,30:$Vi,38:39,62:36,63:$Va,68:$Vb,69:$Vc},o($VT,[2,50]),o($VT,[2,52],{45:[1,88],63:$Vx}),{22:$Vg},o($VB,$Vw,{22:$Vn}),o($VB,$Vm),o($VF,[2,21],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,$VU,{36:[1,89],73:$VV}),o($VF,[2,23]),{16:$Vh,17:$V2,22:$V4,23:91,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:92,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},o($VF,[2,26]),o($VF,[2,27]),{16:$Vh,17:$V2,22:$V4,23:93,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:94,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:95,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:96,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,28:97,30:$Vi,38:39,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:58,24:[1,98],28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,66:99,68:$Vb,69:$Vc},{17:[1,100]},{16:$Vh,17:$V2,22:$V4,23:101,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,30:$Vi,38:39,62:103,63:$Va,64:102,68:$Vb,69:$Vc},o($VB,[2,58]),{65:[1,104]},o($VW,[2,76],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS,73:[1,105]}),o($VB,[2,60]),{18:[1,106],73:[1,107]},o($VX,[2,78]),{76:$VY},{76:$VZ},{24:[1,110],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS},{24:[1,111],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS},{22:$Vn,27:[1,112],36:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,63:$Vw},{20:[1,113]},{16:$VD,24:$VE,31:114,72:70},{24:[1,115]},{24:[2,71],73:[1,116]},o([24,73],[2,69]),{16:$Vh,17:$V2,22:$V4,23:117,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:118,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:119,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:120,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:121,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:122,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:123,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:124,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:125,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:126,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:127,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:128,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:129,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},o($VT,[2,46]),o($VT,[2,48]),o($VT,[2,49]),{16:$Vh,17:$V2,22:$V4,28:130,30:$Vi,38:39,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:131,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:[1,133],37:132},o($VF,[2,24],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,[2,25],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,[2,28],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,[2,29],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,[2,30],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,[2,31],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,[2,32]),o($VB,[2,55]),{24:[1,134]},{7:135,8:136,10:137,16:$V_,32:$V$},{24:[1,140],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS},{65:[1,141]},{63:$Vx,65:[2,74],74:[1,142]},o($VB,[2,59]),{16:$Vh,17:$V2,22:$V4,23:58,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,66:143,68:$Vb,69:$Vc},o($VB,[2,61]),{16:$Vy,69:$VA,75:144},{16:$Vh,17:$V2,22:$V4,23:145,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:146,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},o($VB,[2,62]),{16:$V1,17:$V01,19:149,22:$V4,25:147,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,28:150,30:$Vi,38:39,62:36,63:$Va,68:$Vb,69:$Vc},{16:$Vh,17:$V2,22:$V4,23:151,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},{24:[1,152]},{17:[1,153]},{16:$VD,24:$VE,31:154,72:70},o([18,20,24,46,65,73],[2,33],{47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o([18,20,24,46,47,65,73],[2,34],{48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($V11,[2,35],{54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($V11,[2,36],{54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($V11,[2,37],{54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($V11,[2,38],{54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($V11,[2,39],{54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($V11,[2,40],{54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($V21,[2,41],{56:$VQ,57:$VR,58:$VS}),o($V21,[2,42],{56:$VQ,57:$VR,58:$VS}),o($VT,[2,43]),o($VT,[2,44]),o($VT,[2,45]),o($VT,[2,51]),o($VF,[2,22],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VF,[2,88]),o($VF,$VU,{73:$VV}),o($VB,[2,56]),{18:[1,155]},{18:[2,4]},{8:156,10:137,16:$V_,18:[2,7],32:$V$},{16:[1,157]},{22:[1,158]},{16:$V1,17:$V01,19:149,22:$V4,25:159,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc},o([18,20,24,36,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,65,73,74],[2,53]),{16:$Vh,17:$V2,22:$V4,30:$Vi,38:39,62:103,63:$Va,64:160,68:$Vb,69:$Vc},o($VW,[2,75]),o($VX,[2,77]),o($VX,[2,79],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($VX,[2,80],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS}),o($Vf,[2,13]),{4:162,6:3,9:161,14:5,15:$V0,16:[1,164],17:$V2,18:$Vz,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,67:60,68:$Vb,69:[1,163],75:61,79:$Vd},{20:[1,165]},{24:[1,166]},{20:[1,167],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS},{17:[1,168]},{4:162,6:3,9:169,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc,79:$Vd},{24:[2,70]},o($Vf,[2,10]),{18:[2,6]},{22:[1,170]},{16:$VD,24:$VE,31:171,72:70},o($Vf,[2,87],{77:172,80:174,78:$V31}),{65:[2,73]},{18:[1,175]},{18:[2,5]},{63:$VC,76:$VY},{22:$Vn,36:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$Vu,45:$Vv,63:$Vw,76:$VZ},o($V41,[2,91]),{17:[1,176]},{16:$V1,17:$V2,19:177,22:$V4,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc},{4:162,6:3,9:178,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc,79:$Vd},{18:[1,179]},{16:$VD,24:$VE,31:180,72:70},{24:[1,181]},o($Vf,[2,86]),{16:$V1,17:$V01,19:149,22:$V4,25:183,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc,79:[1,182]},o($Vf,[2,84]),o($V41,[2,90]),{4:162,6:3,9:184,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc,79:$Vd},{24:[1,185]},{18:[1,186]},o($VB,[2,54]),{24:[1,187]},{17:[1,188]},{22:[1,189]},o($Vf,[2,85]),{18:[1,190]},{16:$V1,17:$V01,19:149,22:$V4,25:191,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc},o($Vf,[2,17]),{17:[1,192]},{4:162,6:3,9:193,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc,79:$Vd},{16:$Vh,17:$V2,22:$V4,23:194,28:35,30:$Vi,38:39,55:$Vj,59:32,60:$Vk,61:$Vl,62:36,63:$Va,68:$Vb,69:$Vc},o($Vf,[2,14]),o($Vf,[2,15]),{4:162,6:3,9:195,14:5,15:$V0,16:$V1,17:$V2,19:4,21:$V3,22:$V4,26:$V5,29:8,30:$V6,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc,79:$Vd},{18:[1,196]},{24:[1,197],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,52:$VM,53:$VN,54:$VO,55:$VP,56:$VQ,57:$VR,58:$VS},{18:[1,198]},o($V51,[2,19]),{16:$V1,17:$V01,19:149,22:$V4,25:199,30:$Vi,33:$V7,34:$V8,35:$V9,38:13,62:17,63:$Va,68:$Vb,69:$Vc},o($V51,[2,18]),{77:200,78:$V31,80:174},o($Vf,[2,83])],
defaultActions: {23:[2,1],136:[2,4],154:[2,70],156:[2,6],160:[2,73],162:[2,5]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 68
break;
case 2:return 69
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "class"
break;
case 6:return 79
break;
case 7:return 78
break;
case 8:return 33
break;
case 9:return 34
break;
case 10:return 21
break;
case 11:return 26
break;
case 12:return 35
break;
case 13:return 27
break;
case 14:return 73
break;
case 15:return 20
break;
case 16:return 45
break;
case 17:return 76
break;
case 18:return 47
break;
case 19:return 46
break;
case 20:return 52
break;
case 21:return 53
break;
case 22:return 50
break;
case 23:return 51
break;
case 24:return 49
break;
case 25:return 48
break;
case 26:return "!"
break;
case 27:return 36
break;
case 28:return 43
break;
case 29:return 56
break;
case 30:return 44
break;
case 31:return 57
break;
case 32:return 58
break;
case 33:return 42
break;
case 34:return 40
break;
case 35:return 55
break;
case 36:return 39
break;
case 37:return 41
break;
case 38:return 54
break;
case 39:return '^'
break;
case 40:return 17
break;
case 41:return 18
break;
case 42:return 74
break;
case 43:return 63
break;
case 44:return 65
break;
case 45:return 22
break;
case 46:return 24
break;
case 47:return 16
break;
case 48:return 5
break;
case 49:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = javascript_parser;
exports.Parser = javascript_parser.Parser;
exports.parse = function () { return javascript_parser.parse.apply(javascript_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}