/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var javascript_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,15],$V2=[1,20],$V3=[1,6],$V4=[1,21],$V5=[1,7],$V6=[1,8],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,19],$Vc=[1,22],$Vd=[1,23],$Ve=[1,17],$Vf=[5,14,27],$Vg=[5,14,24,25,26,27,29,30,33,34,38,41,42,43,71,76,77,86],$Vh=[1,31],$Vi=[1,40],$Vj=[1,39],$Vk=[1,33],$Vl=[1,35],$Vm=[1,36],$Vn=[2,63],$Vo=[1,54],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[2,70],$Vy=[1,57],$Vz=[1,65],$VA=[1,61],$VB=[1,64],$VC=[13,15,27,31,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,73,81,82],$VD=[2,71],$VE=[1,74],$VF=[2,78],$VG=[15,31],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[1,81],$VO=[1,82],$VP=[1,83],$VQ=[1,84],$VR=[1,85],$VS=[1,86],$VT=[1,87],$VU=[13,15,27,31,54,55,56,57,58,59,60,61,62,63,64,65,66,73,81],$VV=[2,95],$VW=[1,93],$VX=[31,73],$VY=[27,81],$VZ=[1,111],$V_=[1,112],$V$=[1,143],$V01=[1,142],$V11=[1,152],$V21=[13,15,27,31,54,55,56,57,58,59,60,61,73,81],$V31=[13,15,27,31,54,55,56,57,58,59,60,61,62,63,73,81],$V41=[1,174],$V51=[1,182],$V61=[5,14,24,25,26,27,29,30,33,34,38,41,42,43,71,76,77,85,86],$V71=[18,27],$V81=[25,27,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"case_statement":10,"case":11,"e":12,":":13,"break":14,";":15,"case_statements_":16,"case_statements":17,"default":18,"class_statement":19,"access_modifier":20,"public":21,"private":22,"class_":23,"class":24,"IDENTIFIER":25,"{":26,"}":27,"statement_with_semicolon":28,"while":29,"(":30,")":31,"bracket_statements":32,"switch":33,"for":34,"of":35,"dot_expr":36,"if_statement":37,"function":38,"parameters":39,"static":40,"return":41,"yield":42,"var":43,"=":44,"identifiers":45,"access_array":46,"++":47,"--":48,"+=":49,"-=":50,"*=":51,"/=":52,".":53,"||":54,"&&":55,"!==":56,"===":57,"<=":58,"<":59,">=":60,">":61,"+":62,"-":63,"*":64,"/":65,"%":66,"not_expr":67,"!":68,"await":69,"parentheses_expr":70,"[":71,"access_arr":72,"]":73,"exprs":74,"key_values":75,"NUMBER":76,"STRING_LITERAL":77,"type":78,"types":79,"parameter":80,",":81,"][":82,"key_value":83,"elif":84,"else":85,"if":86,"else_statement":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"case",13:":",14:"break",15:";",18:"default",21:"public",22:"private",24:"class",25:"IDENTIFIER",26:"{",27:"}",29:"while",30:"(",31:")",33:"switch",34:"for",35:"of",38:"function",40:"static",41:"return",42:"yield",43:"var",44:"=",47:"++",48:"--",49:"+=",50:"-=",51:"*=",52:"/=",53:".",54:"||",55:"&&",56:"!==",57:"===",58:"<=",59:"<",60:">=",61:">",62:"+",63:"-",64:"*",65:"/",66:"%",68:"!",69:"await",71:"[",73:"]",76:"NUMBER",77:"STRING_LITERAL",81:",",82:"][",85:"else",86:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[10,6],[16,2],[16,1],[17,4],[17,1],[8,2],[8,1],[20,1],[20,1],[23,5],[6,2],[6,1],[6,5],[6,7],[6,9],[6,9],[6,1],[6,8],[19,8],[19,7],[28,2],[28,2],[28,4],[28,2],[28,3],[28,3],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,1],[67,2],[67,2],[67,1],[36,3],[36,1],[46,4],[70,7],[70,3],[70,4],[70,1],[70,2],[70,3],[70,2],[70,3],[70,3],[70,1],[70,1],[70,1],[78,3],[78,4],[78,1],[80,1],[39,3],[39,1],[39,0],[72,3],[72,1],[74,3],[74,1],[75,3],[75,1],[83,3],[83,3],[79,3],[79,1],[84,7],[84,1],[87,2],[37,6],[37,5],[45,3],[45,1],[32,3],[32,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 7: case 11:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 12: case 58: case 77: case 80:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 6:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 9:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 15:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 16: case 97:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["return",$$[$0]];
break;
case 27:
this.$ = ["yield",$$[$0]];
break;
case 28:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 29:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 30: case 31:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 32: case 33:
this.$ = [$$[$0],$$[$0-1]];
break;
case 34: case 35: case 36: case 37: case 39: case 40: case 43: case 44: case 45: case 46: case 47:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 38:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 41:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 48:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ["*",$$[$0-2],$$[$0]];
break;
case 50: case 51:
this.$ = ["/",$$[$0-2],$$[$0]];
break;
case 52:
this.$ = ["-",$$[$0]];
break;
case 54:
this.$ = ["!", [".",$$[$0]]];
break;
case 55:
this.$ = ["await", [".",$$[$0]]]
break;
case 56:
this.$ = [".", $$[$0]];
break;
case 57: case 76: case 79: case 81: case 87: case 94:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 59:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 60:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 61:
this.$= ["function_call",$$[$0-2],[]];
break;
case 62:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 64:
this.$ = ["initializer_list","Object",[]];
break;
case 65:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 66:
this.$ = ["associative_array","Object","Object",[]];
break;
case 67:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 68:
this.$ = ["parentheses",$$[$0-1]];
break;
case 69: case 70: case 71:
this.$ = yytext;
break;
case 72:
this.$ = [$$[$0-2],"[]"];
break;
case 73:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 75:
this.$ = ["Object", $$[$0]];
break;
case 78:
this.$ = []
break;
case 82: case 84: case 88: case 95:
this.$ = [$$[$0]];
break;
case 83:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 85:
this.$ = [$$[$0-2],$$[$0]]
break;
case 86:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 89:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 91:
this.$ = ["else",$$[$0]];
break;
case 92:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 93:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 96:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{1:[3]},{5:[1,24]},o($Vf,[2,3],{6:3,28:4,23:5,37:9,46:14,70:18,4:25,24:$V0,25:$V1,26:$V2,29:$V3,30:$V4,33:$V5,34:$V6,38:$V7,41:$V8,42:$V9,43:$Va,71:$Vb,76:$Vc,77:$Vd,86:$Ve}),{15:[1,26]},o($Vg,[2,17]),{30:[1,27]},{30:[1,28]},{30:[1,29]},o($Vg,[2,22]),{25:[1,30],30:$Vh},{12:32,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:42,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{25:[1,43],45:44},{44:[1,45],71:$Vn},{30:$Vo,44:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,71:$Vx},{25:[1,55]},{30:[1,56]},{71:$Vy},{12:60,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,73:[1,58],74:59,76:$Vc,77:$Vd},{25:$Vz,27:$VA,75:62,77:$VB,83:63},{12:66,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},o($VC,[2,69]),o($VC,$VD),{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,16]),{12:67,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:68,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{25:[1,69],26:$V2,28:70,30:$V4,38:$Vj,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd},{30:[1,71]},{25:$VE,31:$VF,39:72,80:73},o($VG,[2,26],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),{12:88,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},o($VU,[2,53]),{25:$Vi,26:$V2,30:$V4,36:89,38:$Vj,46:41,70:38,71:$Vb,76:$Vc,77:$Vd},{25:$Vi,26:$V2,30:$V4,36:90,38:$Vj,46:41,70:38,71:$Vb,76:$Vc,77:$Vd},o($VU,[2,56]),o($VU,[2,58],{53:[1,91],71:$Vy}),{30:$Vh},o($VC,$Vx,{30:$Vo}),o($VC,$Vn),o($VG,[2,27],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,$VV,{44:[1,92],81:$VW}),o($VG,[2,29]),{12:94,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:95,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},o($VG,[2,32]),o($VG,[2,33]),{12:96,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:97,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:98,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:99,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{25:$Vi,26:$V2,30:$V4,36:100,38:$Vj,46:41,70:38,71:$Vb,76:$Vc,77:$Vd},{12:60,25:$Vi,26:$V2,30:$V4,31:[1,101],36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,74:102,76:$Vc,77:$Vd},{26:[1,103]},{12:104,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{25:$Vi,26:$V2,30:$V4,38:$Vj,46:41,70:106,71:$Vb,72:105,76:$Vc,77:$Vd},o($VC,[2,64]),{73:[1,107]},o($VX,[2,82],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,81:[1,108]}),o($VC,[2,66]),{27:[1,109],81:[1,110]},o($VY,[2,84]),{13:$VZ},{13:$V_},{31:[1,113],54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT},{31:[1,114],54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT},{31:[1,115],54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT},{30:$Vo,35:[1,116],44:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,71:$Vx},{15:[1,117]},{25:$VE,31:$VF,39:118,80:73},{31:[1,119]},{31:[2,77],81:[1,120]},o([31,81],[2,75]),{12:121,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:122,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:123,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:124,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:125,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:126,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:127,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:128,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:129,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:130,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:131,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:132,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:133,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},o($VU,[2,52]),o($VU,[2,54]),o($VU,[2,55]),{25:$Vi,26:$V2,30:$V4,36:134,38:$Vj,46:41,70:38,71:$Vb,76:$Vc,77:$Vd},{12:135,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{25:[1,137],45:136},o($VG,[2,30],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,[2,31],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,[2,34],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,[2,35],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,[2,36],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,[2,37],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,[2,38]),o($VC,[2,61]),{31:[1,138]},{7:139,8:140,19:141,25:$V$,40:$V01},{31:[1,144],54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT},{73:[1,145]},{71:$Vy,73:[2,80],82:[1,146]},o($VC,[2,65]),{12:60,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,74:147,76:$Vc,77:$Vd},o($VC,[2,67]),{25:$Vz,77:$VB,83:148},{12:149,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{12:150,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},o($VC,[2,68]),{25:$V1,26:$V11,28:153,30:$V4,32:151,38:$Vj,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd},{26:[1,154]},{25:$Vi,26:$V2,30:$V4,36:155,38:$Vj,46:41,70:38,71:$Vb,76:$Vc,77:$Vd},{12:156,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{31:[1,157]},{26:[1,158]},{25:$VE,31:$VF,39:159,80:73},o([13,15,27,31,54,73,81],[2,39],{55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o([13,15,27,31,54,55,73,81],[2,40],{56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V21,[2,41],{62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V21,[2,42],{62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V21,[2,43],{62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V21,[2,44],{62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V21,[2,45],{62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V21,[2,46],{62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V31,[2,47],{64:$VR,65:$VS,66:$VT}),o($V31,[2,48],{64:$VR,65:$VS,66:$VT}),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,57]),o($VG,[2,28],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VG,[2,94]),o($VG,$VV,{81:$VW}),o($VC,[2,62]),{27:[1,160]},{27:[2,4]},{8:161,19:141,25:$V$,27:[2,12],40:$V01},{25:[1,162]},{30:[1,163]},{25:$V1,26:$V11,28:153,30:$V4,32:164,38:$Vj,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd},o([13,15,27,31,44,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,73,81,82],[2,59]),{25:$Vi,26:$V2,30:$V4,38:$Vj,46:41,70:106,71:$Vb,72:165,76:$Vc,77:$Vd},o($VX,[2,81]),o($VY,[2,83]),o($VY,[2,85],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($VY,[2,86],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($Vg,[2,18]),{4:167,6:3,9:166,23:5,24:$V0,25:[1,169],26:$V2,27:$VA,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,75:62,76:$Vc,77:[1,168],83:63,86:$Ve},{15:[1,170]},{10:173,11:$V41,16:172,17:171},{31:[1,175]},{15:[1,176],54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT},{26:[1,177]},{4:167,6:3,9:178,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{31:[2,76]},o($Vg,[2,15]),{27:[2,11]},{30:[1,179]},{25:$VE,31:$VF,39:180,80:73},o($Vg,[2,93],{84:181,87:183,85:$V51}),{73:[2,79]},{27:[1,184]},o([14,27],[2,5]),{13:$VZ,71:$VD},{13:$V_,30:$Vo,44:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,71:$Vx},o($V61,[2,97]),{27:[1,185]},{18:[1,186],27:[2,10]},o($V71,[2,8],{10:173,16:187,11:$V41}),{12:188,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{26:[1,189]},{25:$V1,26:$V2,28:190,30:$V4,38:$Vj,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd},{4:167,6:3,9:191,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{27:[1,192]},{25:$VE,31:$VF,39:193,80:73},{31:[1,194]},o($Vg,[2,92]),{25:$V1,26:$V11,28:153,30:$V4,32:196,38:$Vj,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:[1,195]},o($Vg,[2,90]),o($V61,[2,96]),o($Vg,[2,19]),{13:[1,197]},o($V71,[2,7]),{13:[1,198],54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT},{4:167,6:3,9:199,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{31:[1,200]},{27:[1,201]},o($VC,[2,60]),{31:[1,202]},{26:[1,203]},{30:[1,204]},o($Vg,[2,91]),{4:167,6:3,9:205,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{4:167,6:3,9:206,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{27:[1,207]},{25:$V1,26:$V11,28:153,30:$V4,32:208,38:$Vj,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd},o($Vg,[2,23]),{26:[1,209]},{4:167,6:3,9:210,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{12:211,25:$Vi,26:$V2,30:$V4,36:37,38:$Vj,46:41,63:$Vk,67:34,68:$Vl,69:$Vm,70:38,71:$Vb,76:$Vc,77:$Vd},{27:[2,9]},{14:[1,212]},o($Vg,[2,20]),o($Vg,[2,21]),{4:167,6:3,9:213,23:5,24:$V0,25:$V1,26:$V2,28:4,29:$V3,30:$V4,33:$V5,34:$V6,37:9,38:$V7,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd,86:$Ve},{27:[1,214]},{31:[1,215],54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT},{15:[1,216]},{27:[1,217]},o($V81,[2,25]),{25:$V1,26:$V11,28:153,30:$V4,32:218,38:$Vj,41:$V8,42:$V9,43:$Va,46:14,70:18,71:$Vb,76:$Vc,77:$Vd},o([11,18,27],[2,6]),o($V81,[2,24]),{84:219,85:$V51,87:183},o($Vg,[2,89])],
defaultActions: {24:[2,1],140:[2,4],159:[2,76],161:[2,11],165:[2,79],205:[2,9]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 76
break;
case 2:return 77
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "class"
break;
case 6:return 86
break;
case 7:return 85
break;
case 8:return "case"
break;
case 9:return 18
break;
case 10:return 41
break;
case 11:return 42
break;
case 12:return 29
break;
case 13:return 33
break;
case 14:return 14
break;
case 15:return 34
break;
case 16:return 43
break;
case 17:return 35
break;
case 18:return 81
break;
case 19:return 15
break;
case 20:return 53
break;
case 21:return 13
break;
case 22:return 55
break;
case 23:return 54
break;
case 24:return 60
break;
case 25:return 61
break;
case 26:return 58
break;
case 27:return 59
break;
case 28:return 57
break;
case 29:return 56
break;
case 30:return "!"
break;
case 31:return 44
break;
case 32:return 51
break;
case 33:return 64
break;
case 34:return 52
break;
case 35:return 65
break;
case 36:return 66
break;
case 37:return 50
break;
case 38:return 48
break;
case 39:return 63
break;
case 40:return 47
break;
case 41:return 49
break;
case 42:return 62
break;
case 43:return '^'
break;
case 44:return 26
break;
case 45:return 27
break;
case 46:return 82
break;
case 47:return 71
break;
case 48:return 73
break;
case 49:return 30
break;
case 50:return 31
break;
case 51:return 25
break;
case 52:return 5
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = javascript_parser;
exports.Parser = javascript_parser.Parser;
exports.parse = function () { return javascript_parser.parse.apply(javascript_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}