/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var javascript_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,15],$V2=[1,20],$V3=[1,6],$V4=[1,21],$V5=[1,7],$V6=[1,8],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,19],$Vc=[1,22],$Vd=[1,23],$Ve=[1,17],$Vf=[5,14,25],$Vg=[5,14,22,23,24,25,27,28,31,32,36,39,40,41,69,74,75,84],$Vh=[1,31],$Vi=[1,40],$Vj=[1,39],$Vk=[1,33],$Vl=[1,35],$Vm=[1,36],$Vn=[2,61],$Vo=[1,54],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[2,68],$Vy=[1,57],$Vz=[1,65],$VA=[1,61],$VB=[1,64],$VC=[13,15,25,29,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,79,80],$VD=[2,69],$VE=[1,74],$VF=[2,76],$VG=[15,29],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[1,81],$VO=[1,82],$VP=[1,83],$VQ=[1,84],$VR=[1,85],$VS=[1,86],$VT=[1,87],$VU=[13,15,25,29,52,53,54,55,56,57,58,59,60,61,62,63,64,71,79],$VV=[2,93],$VW=[1,93],$VX=[29,71],$VY=[25,79],$VZ=[1,111],$V_=[1,112],$V$=[1,143],$V01=[1,142],$V11=[1,152],$V21=[13,15,25,29,52,53,54,55,56,57,58,59,71,79],$V31=[13,15,25,29,52,53,54,55,56,57,58,59,60,61,71,79],$V41=[1,173],$V51=[1,181],$V61=[5,14,22,23,24,25,27,28,31,32,36,39,40,41,69,74,75,83,84],$V71=[23,25,38];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"case_statement":10,"case":11,"e":12,":":13,"break":14,";":15,"case_statements":16,"class_statement":17,"access_modifier":18,"public":19,"private":20,"class_":21,"class":22,"IDENTIFIER":23,"{":24,"}":25,"statement_with_semicolon":26,"while":27,"(":28,")":29,"bracket_statements":30,"switch":31,"for":32,"of":33,"dot_expr":34,"if_statement":35,"function":36,"parameters":37,"static":38,"return":39,"yield":40,"var":41,"=":42,"identifiers":43,"access_array":44,"++":45,"--":46,"+=":47,"-=":48,"*=":49,"/=":50,".":51,"||":52,"&&":53,"!==":54,"===":55,"<=":56,"<":57,">=":58,">":59,"+":60,"-":61,"*":62,"/":63,"%":64,"not_expr":65,"!":66,"await":67,"parentheses_expr":68,"[":69,"access_arr":70,"]":71,"exprs":72,"key_values":73,"NUMBER":74,"STRING_LITERAL":75,"type":76,"types":77,"parameter":78,",":79,"][":80,"key_value":81,"elif":82,"else":83,"if":84,"else_statement":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"case",13:":",14:"break",15:";",19:"public",20:"private",22:"class",23:"IDENTIFIER",24:"{",25:"}",27:"while",28:"(",29:")",31:"switch",32:"for",33:"of",36:"function",38:"static",39:"return",40:"yield",41:"var",42:"=",45:"++",46:"--",47:"+=",48:"-=",49:"*=",50:"/=",51:".",52:"||",53:"&&",54:"!==",55:"===",56:"<=",57:"<",58:">=",59:">",60:"+",61:"-",62:"*",63:"/",64:"%",66:"!",67:"await",69:"[",71:"]",74:"NUMBER",75:"STRING_LITERAL",79:",",80:"][",83:"else",84:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[10,6],[16,2],[16,1],[8,2],[8,1],[18,1],[18,1],[21,5],[6,2],[6,1],[6,5],[6,7],[6,9],[6,9],[6,1],[6,8],[17,8],[17,7],[26,2],[26,2],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,1],[65,2],[65,2],[65,1],[34,3],[34,1],[44,4],[68,7],[68,3],[68,4],[68,1],[68,2],[68,3],[68,2],[68,3],[68,3],[68,1],[68,1],[68,1],[76,3],[76,4],[76,1],[78,1],[37,3],[37,1],[37,0],[70,3],[70,1],[72,3],[72,1],[73,3],[73,1],[81,3],[81,3],[77,3],[77,1],[82,7],[82,1],[85,2],[35,6],[35,5],[43,3],[43,1],[30,3],[30,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 7: case 9:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 10: case 56: case 75: case 78:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 6:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 13:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 14: case 95:
this.$ = ["semicolon",$$[$0-1]];
break;
case 16:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 22:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["return",$$[$0]];
break;
case 25:
this.$ = ["yield",$$[$0]];
break;
case 26:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 28: case 29:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 30: case 31:
this.$ = [$$[$0],$$[$0-1]];
break;
case 32: case 33: case 34: case 35: case 37: case 38: case 41: case 42: case 43: case 44: case 45:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 36:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 39:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 46:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ["*",$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = ["/",$$[$0-2],$$[$0]];
break;
case 50:
this.$ = ["-",$$[$0]];
break;
case 52:
this.$ = ["!", [".",$$[$0]]];
break;
case 53:
this.$ = ["await", [".",$$[$0]]]
break;
case 54:
this.$ = [".", $$[$0]];
break;
case 55: case 74: case 77: case 79: case 85: case 92:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 57:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 58:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 59:
this.$= ["function_call",$$[$0-2],[]];
break;
case 60:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 62:
this.$ = ["initializer_list","Object",[]];
break;
case 63:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 64:
this.$ = ["associative_array","Object","Object",[]];
break;
case 65:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 66:
this.$ = ["parentheses",$$[$0-1]];
break;
case 67: case 68: case 69:
this.$ = yytext;
break;
case 70:
this.$ = [$$[$0-2],"[]"];
break;
case 71:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 73:
this.$ = ["Object", $$[$0]];
break;
case 76:
this.$ = []
break;
case 80: case 82: case 86: case 93:
this.$ = [$$[$0]];
break;
case 81:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 83:
this.$ = [$$[$0-2],$$[$0]]
break;
case 84:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 87:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 89:
this.$ = ["else",$$[$0]];
break;
case 90:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 91:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 94:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,21:5,22:$V0,23:$V1,24:$V2,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:$Ve},{1:[3]},{5:[1,24]},o($Vf,[2,3],{6:3,26:4,21:5,35:9,44:14,68:18,4:25,22:$V0,23:$V1,24:$V2,27:$V3,28:$V4,31:$V5,32:$V6,36:$V7,39:$V8,40:$V9,41:$Va,69:$Vb,74:$Vc,75:$Vd,84:$Ve}),{15:[1,26]},o($Vg,[2,15]),{28:[1,27]},{28:[1,28]},{28:[1,29]},o($Vg,[2,20]),{23:[1,30],28:$Vh},{12:32,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:42,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{23:[1,43],43:44},{42:[1,45],69:$Vn},{28:$Vo,42:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,69:$Vx},{23:[1,55]},{28:[1,56]},{69:$Vy},{12:60,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,71:[1,58],72:59,74:$Vc,75:$Vd},{23:$Vz,25:$VA,73:62,75:$VB,81:63},{12:66,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},o($VC,[2,67]),o($VC,$VD),{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,14]),{12:67,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:68,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{23:[1,69],24:$V2,26:70,28:$V4,36:$Vj,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd},{28:[1,71]},{23:$VE,29:$VF,37:72,78:73},o($VG,[2,24],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),{12:88,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},o($VU,[2,51]),{23:$Vi,24:$V2,28:$V4,34:89,36:$Vj,44:41,68:38,69:$Vb,74:$Vc,75:$Vd},{23:$Vi,24:$V2,28:$V4,34:90,36:$Vj,44:41,68:38,69:$Vb,74:$Vc,75:$Vd},o($VU,[2,54]),o($VU,[2,56],{51:[1,91],69:$Vy}),{28:$Vh},o($VC,$Vx,{28:$Vo}),o($VC,$Vn),o($VG,[2,25],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,$VV,{42:[1,92],79:$VW}),o($VG,[2,27]),{12:94,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:95,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},o($VG,[2,30]),o($VG,[2,31]),{12:96,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:97,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:98,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:99,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{23:$Vi,24:$V2,28:$V4,34:100,36:$Vj,44:41,68:38,69:$Vb,74:$Vc,75:$Vd},{12:60,23:$Vi,24:$V2,28:$V4,29:[1,101],34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,72:102,74:$Vc,75:$Vd},{24:[1,103]},{12:104,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{23:$Vi,24:$V2,28:$V4,36:$Vj,44:41,68:106,69:$Vb,70:105,74:$Vc,75:$Vd},o($VC,[2,62]),{71:[1,107]},o($VX,[2,80],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT,79:[1,108]}),o($VC,[2,64]),{25:[1,109],79:[1,110]},o($VY,[2,82]),{13:$VZ},{13:$V_},{29:[1,113],52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT},{29:[1,114],52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT},{29:[1,115],52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT},{28:$Vo,33:[1,116],42:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,69:$Vx},{15:[1,117]},{23:$VE,29:$VF,37:118,78:73},{29:[1,119]},{29:[2,75],79:[1,120]},o([29,79],[2,73]),{12:121,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:122,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:123,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:124,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:125,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:126,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:127,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:128,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:129,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:130,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:131,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:132,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:133,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},o($VU,[2,50]),o($VU,[2,52]),o($VU,[2,53]),{23:$Vi,24:$V2,28:$V4,34:134,36:$Vj,44:41,68:38,69:$Vb,74:$Vc,75:$Vd},{12:135,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{23:[1,137],43:136},o($VG,[2,28],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,[2,29],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,[2,32],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,[2,33],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,[2,34],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,[2,35],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,[2,36]),o($VC,[2,59]),{29:[1,138]},{7:139,8:140,17:141,23:$V$,38:$V01},{29:[1,144],52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT},{71:[1,145]},{69:$Vy,71:[2,78],80:[1,146]},o($VC,[2,63]),{12:60,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,72:147,74:$Vc,75:$Vd},o($VC,[2,65]),{23:$Vz,75:$VB,81:148},{12:149,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{12:150,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},o($VC,[2,66]),{23:$V1,24:$V11,26:153,28:$V4,30:151,36:$Vj,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd},{24:[1,154]},{23:$Vi,24:$V2,28:$V4,34:155,36:$Vj,44:41,68:38,69:$Vb,74:$Vc,75:$Vd},{12:156,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{29:[1,157]},{24:[1,158]},{23:$VE,29:$VF,37:159,78:73},o([13,15,25,29,52,71,79],[2,37],{53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o([13,15,25,29,52,53,71,79],[2,38],{54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($V21,[2,39],{60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($V21,[2,40],{60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($V21,[2,41],{60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($V21,[2,42],{60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($V21,[2,43],{60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($V21,[2,44],{60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($V31,[2,45],{62:$VR,63:$VS,64:$VT}),o($V31,[2,46],{62:$VR,63:$VS,64:$VT}),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,55]),o($VG,[2,26],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VG,[2,92]),o($VG,$VV,{79:$VW}),o($VC,[2,60]),{25:[1,160]},{25:[2,4]},{8:161,17:141,23:$V$,25:[2,10],38:$V01},{23:[1,162]},{28:[1,163]},{23:$V1,24:$V11,26:153,28:$V4,30:164,36:$Vj,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd},o([13,15,25,29,42,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,79,80],[2,57]),{23:$Vi,24:$V2,28:$V4,36:$Vj,44:41,68:106,69:$Vb,70:165,74:$Vc,75:$Vd},o($VX,[2,79]),o($VY,[2,81]),o($VY,[2,83],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($VY,[2,84],{52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT}),o($Vg,[2,16]),{4:167,6:3,9:166,21:5,22:$V0,23:[1,169],24:$V2,25:$VA,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,73:62,74:$Vc,75:[1,168],81:63,84:$Ve},{15:[1,170]},{10:172,11:$V41,16:171},{29:[1,174]},{15:[1,175],52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT},{24:[1,176]},{4:167,6:3,9:177,21:5,22:$V0,23:$V1,24:$V2,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:$Ve},{29:[2,74]},o($Vg,[2,13]),{25:[2,9]},{28:[1,178]},{23:$VE,29:$VF,37:179,78:73},o($Vg,[2,91],{82:180,85:182,83:$V51}),{71:[2,77]},{25:[1,183]},o([14,25],[2,5]),{13:$VZ,69:$VD},{13:$V_,28:$Vo,42:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,69:$Vx},o($V61,[2,95]),{25:[1,184]},{10:172,11:$V41,16:185,25:[2,8]},{12:186,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{24:[1,187]},{23:$V1,24:$V2,26:188,28:$V4,36:$Vj,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd},{4:167,6:3,9:189,21:5,22:$V0,23:$V1,24:$V2,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:$Ve},{25:[1,190]},{23:$VE,29:$VF,37:191,78:73},{29:[1,192]},o($Vg,[2,90]),{23:$V1,24:$V11,26:153,28:$V4,30:194,36:$Vj,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:[1,193]},o($Vg,[2,88]),o($V61,[2,94]),o($Vg,[2,17]),{25:[2,7]},{13:[1,195],52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT},{4:167,6:3,9:196,21:5,22:$V0,23:$V1,24:$V2,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:$Ve},{29:[1,197]},{25:[1,198]},o($VC,[2,58]),{29:[1,199]},{24:[1,200]},{28:[1,201]},o($Vg,[2,89]),{4:167,6:3,9:202,21:5,22:$V0,23:$V1,24:$V2,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:$Ve},{25:[1,203]},{23:$V1,24:$V11,26:153,28:$V4,30:204,36:$Vj,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd},o($Vg,[2,21]),{24:[1,205]},{4:167,6:3,9:206,21:5,22:$V0,23:$V1,24:$V2,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:$Ve},{12:207,23:$Vi,24:$V2,28:$V4,34:37,36:$Vj,44:41,61:$Vk,65:34,66:$Vl,67:$Vm,68:38,69:$Vb,74:$Vc,75:$Vd},{14:[1,208]},o($Vg,[2,18]),o($Vg,[2,19]),{4:167,6:3,9:209,21:5,22:$V0,23:$V1,24:$V2,26:4,27:$V3,28:$V4,31:$V5,32:$V6,35:9,36:$V7,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd,84:$Ve},{25:[1,210]},{29:[1,211],52:$VH,53:$VI,54:$VJ,55:$VK,56:$VL,57:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,63:$VS,64:$VT},{15:[1,212]},{25:[1,213]},o($V71,[2,23]),{23:$V1,24:$V11,26:153,28:$V4,30:214,36:$Vj,39:$V8,40:$V9,41:$Va,44:14,68:18,69:$Vb,74:$Vc,75:$Vd},o([11,25],[2,6]),o($V71,[2,22]),{82:215,83:$V51,85:182},o($Vg,[2,87])],
defaultActions: {24:[2,1],140:[2,4],159:[2,74],161:[2,9],165:[2,77],185:[2,7]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 74
break;
case 2:return 75
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return "class"
break;
case 6:return 84
break;
case 7:return 83
break;
case 8:return "case"
break;
case 9:return 39
break;
case 10:return 40
break;
case 11:return 27
break;
case 12:return 32
break;
case 13:return 41
break;
case 14:return 33
break;
case 15:return 79
break;
case 16:return 15
break;
case 17:return 51
break;
case 18:return 13
break;
case 19:return 53
break;
case 20:return 52
break;
case 21:return 58
break;
case 22:return 59
break;
case 23:return 56
break;
case 24:return 57
break;
case 25:return 55
break;
case 26:return 54
break;
case 27:return "!"
break;
case 28:return 42
break;
case 29:return 49
break;
case 30:return 62
break;
case 31:return 50
break;
case 32:return 63
break;
case 33:return 64
break;
case 34:return 48
break;
case 35:return 46
break;
case 36:return 61
break;
case 37:return 45
break;
case 38:return 47
break;
case 39:return 60
break;
case 40:return '^'
break;
case 41:return 24
break;
case 42:return 25
break;
case 43:return 80
break;
case 44:return 69
break;
case 45:return 71
break;
case 46:return 28
break;
case 47:return 29
break;
case 48:return 23
break;
case 49:return 5
break;
case 50:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = javascript_parser;
exports.Parser = javascript_parser.Parser;
exports.parse = function () { return javascript_parser.parse.apply(javascript_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}