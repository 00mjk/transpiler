/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mysql_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,10],$V2=[1,9],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,11],$Va=[1,12],$Vb=[5,27,39,40,94,95,97,98],$Vc=[1,35],$Vd=[1,33],$Ve=[1,36],$Vf=[1,26],$Vg=[1,28],$Vh=[1,37],$Vi=[1,38],$Vj=[18,21,23,90],$Vk=[2,77],$Vl=[1,43],$Vm=[11,18,19,26,72,77,85,86],$Vn=[5,16,18,25,27,37,38,39,40,43,44,46,47,59,61,94,95,97,98],$Vo=[1,57],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[1,63],$VC=[11,21,27,35,36,41,42,53,60,63,64,65,66,67,68,69,70,71,72,73,74,75,82,90],$VD=[11,19,21,27,35,36,41,42,53,60,63,64,65,66,67,68,69,70,71,72,73,74,75,80,82,90],$VE=[1,71],$VF=[1,77],$VG=[1,78],$VH=[16,18,25,37,38,43,44,46,47,59,61],$VI=[21,27],$VJ=[1,120],$VK=[2,83],$VL=[1,118],$VM=[1,119],$VN=[1,123],$VO=[1,124],$VP=[11,21,27,35,36,41,42,53,60,63,64,65,66,68,70,82,90],$VQ=[11,21,27,35,36,41,42,53,60,63,64,65,66,67,68,69,70,82,90],$VR=[11,21,27,35,36,41,42,53,60,63,64,65,66,67,68,69,70,71,72,82,90],$VS=[1,135],$VT=[1,136],$VU=[1,137],$VV=[1,138],$VW=[18,19,26,72,77,85,86],$VX=[21,90],$VY=[39,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"struct_statements":7,"struct_statement":8,"type":9,"identifiers":10,";":11,"statements":12,"access_modifier":13,"public":14,"private":15,"CREATE":16,"FUNCTION":17,"IDENTIFIER":18,"(":19,"parameters":20,")":21,"RETURNS":22,"BEGIN":23,"end_":24,"void":25,"{":26,"}":27,"statement_with_semicolon":28,"while_":29,"e":30,"do_":31,"if_":32,"then_":33,"elif":34,"DO":35,"do":36,"WHILE":37,"while":38,"END":39,"end":40,"then":41,"THEN":42,"IF":43,"if":44,"set_":45,"set":46,"SET":47,"repeat_":48,"REPEAT":49,"repeat":50,"case_statement":51,"case":52,":":53,"break":54,"case_statements_":55,"case_statements":56,"default":57,"exprs":58,"RETURN":59,"=":60,"DECLARE":61,"access_array":62,"?":63,"||":64,"&&":65,"<=":66,"<":67,">=":68,">":69,"<>":70,"+":71,"-":72,"%":73,"*":74,"/":75,"not_expr":76,"!":77,"dot_expr":78,"parentheses_expr":79,".":80,"[":81,"]":82,"function_call":83,"parentheses_expr_":84,"NUMBER":85,"STRING_LITERAL":86,"parameter":87,"out":88,"inout":89,",":90,"expr":91,"types":92,"elseif_":93,"ELSEIF":94,"elseif":95,"else_":96,"else":97,"ELSE":98,"bracket_statements":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",14:"public",15:"private",16:"CREATE",17:"FUNCTION",18:"IDENTIFIER",19:"(",21:")",22:"RETURNS",23:"BEGIN",25:"void",26:"{",27:"}",35:"DO",36:"do",37:"WHILE",38:"while",39:"END",40:"end",41:"then",42:"THEN",43:"IF",44:"if",46:"set",47:"SET",49:"REPEAT",50:"repeat",52:"case",53:":",54:"break",57:"default",59:"RETURN",60:"=",61:"DECLARE",63:"?",64:"||",65:"&&",66:"<=",67:"<",68:">=",69:">",70:"<>",71:"+",72:"-",73:"%",74:"*",75:"/",77:"!",80:".",81:"[",82:"]",85:"NUMBER",86:"STRING_LITERAL",88:"out",89:"inout",90:",",94:"ELSEIF",95:"elseif",97:"else",98:"ELSE"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[8,3],[12,1],[13,1],[13,1],[6,11],[6,8],[6,2],[6,7],[6,8],[6,7],[31,1],[31,1],[29,1],[29,1],[24,1],[24,1],[33,1],[33,1],[32,1],[32,1],[45,1],[45,1],[48,1],[48,1],[51,6],[55,2],[55,1],[56,4],[56,1],[28,3],[28,4],[28,2],[28,4],[28,3],[28,4],[28,4],[30,5],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,4],[30,4],[30,3],[30,3],[30,2],[30,1],[76,2],[76,1],[78,3],[78,1],[62,4],[79,1],[79,1],[79,3],[79,1],[84,2],[84,3],[84,1],[84,1],[84,1],[83,3],[83,4],[9,1],[9,1],[87,3],[87,3],[87,2],[20,3],[20,1],[20,0],[58,3],[58,1],[91,1],[92,3],[92,1],[93,1],[93,1],[96,1],[96,1],[34,5],[34,2],[10,3],[10,1],[99,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 4: case 31:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 5: case 32: case 63: case 82:
this.$ =
 [$$[$0]];
break;
case 6:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 7:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 11:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 12: case 97:
this.$ = ["semicolon",$$[$0-1]];
break;
case 13:
this.$ = ["while",$$[$0-5],$$[$0-3]];
break;
case 14:
this.$ = ["if",$$[$0-6],$$[$0-4],$$[$0-3]];
break;
case 15:
this.$ = ["if",$$[$0-5],$$[$0-3]];
break;
case 30:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 33:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 35: case 74:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 36: case 75:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 37:
this.$ = ["return",$$[$0]];
break;
case 38:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ["initialize_empty_vars",$$[$0],[$$[$0-1]]];
break;
case 40: case 41:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 43: case 44: case 45: case 46: case 47: case 48: case 51: case 52: case 53: case 56: case 57:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ["==",$$[$0-2],$$[$0]];
break;
case 50:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 54:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 55:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 58:
this.$ = ["-",$$[$0]];
break;
case 60:
this.$ = ["!", [".",$$[$0]]];
break;
case 61:
this.$ = [".", $$[$0]];
break;
case 62: case 81: case 84: case 87: case 95:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 64:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 67:
this.$ = ["parentheses",$$[$0-1]];
break;
case 69:
this.$ = ["initializer_list","Object",[]];
break;
case 70:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 71: case 72: case 73:
this.$ = yytext;
break;
case 78:
this.$ = ["out_parameter",$$[$0],$$[$0-1]];
break;
case 79:
this.$ = ["ref_parameter",$$[$0],$$[$0-1]];
break;
case 80:
this.$ = [$$[$0],$$[$0-1]];
break;
case 83:
this.$ = [];
break;
case 85: case 86: case 88: case 96:
this.$ = [$$[$0]];
break;
case 93:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 94:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,9:5,16:$V0,18:$V1,25:$V2,28:6,29:7,32:8,37:$V3,38:$V4,43:$V5,44:$V6,45:13,46:$V7,47:$V8,59:$V9,61:$Va},{1:[3]},{5:[1,20]},o($Vb,[2,3],{6:3,9:5,28:6,29:7,32:8,45:13,4:21,16:$V0,18:$V1,25:$V2,37:$V3,38:$V4,43:$V5,44:$V6,46:$V7,47:$V8,59:$V9,61:$Va}),{17:[1,22]},{18:[1,23]},{11:[1,24]},{18:$Vc,19:$Vd,26:$Ve,30:25,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:39,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($Vj,[2,76]),{18:$Vk,19:[1,40]},{18:$Vc,19:$Vd,26:$Ve,30:41,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{9:42,18:$Vl,25:$V2},{18:[1,45],62:44},o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,24]),o($Vm,[2,25]),{18:[2,26]},{18:[2,27]},{1:[2,1]},o($Vb,[2,2]),{18:[1,46]},{19:[1,47],60:[1,48]},o($Vn,[2,12]),{31:49,35:[1,64],36:[1,65],60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},{18:$Vc,19:$Vd,26:$Ve,30:66,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VC,[2,59]),{18:$Vc,19:$Vd,26:$Ve,62:31,78:67,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VC,[2,61]),o($VC,[2,63],{19:[1,69],80:[1,68]}),o($VD,[2,65]),o($VD,[2,66]),{18:$Vc,19:$Vd,26:$Ve,30:70,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VD,[2,68]),o($VD,[2,72],{81:$VE}),{18:$Vc,19:$Vd,26:$Ve,27:[1,72],30:75,58:73,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi,91:74},o($VD,[2,71]),o($VD,[2,73]),{33:76,41:$VF,42:$VG,60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},{18:$Vc,19:$Vd,21:[1,79],26:$Ve,30:75,58:80,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi,91:74},{11:[2,37],60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},{18:[1,81]},o($Vj,$Vk),{60:[1,82]},{60:[1,83],81:$VE},{19:[1,84]},{25:[1,85]},{18:$Vc,19:$Vd,26:$Ve,30:86,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{4:88,6:3,9:5,12:87,16:$V0,18:$V1,25:$V2,28:6,29:7,32:8,37:$V3,38:$V4,43:$V5,44:$V6,45:13,46:$V7,47:$V8,59:$V9,61:$Va},{18:$Vc,19:$Vd,26:$Ve,30:89,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:90,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:91,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:92,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:93,62:31,67:[1,94],72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:95,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:96,62:31,69:[1,97],72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:98,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:99,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:100,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:101,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:102,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:103,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:104,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VH,[2,16]),o($VH,[2,17]),o($VC,[2,58]),o($VC,[2,60]),{18:$Vc,19:$Vd,26:$Ve,62:31,78:105,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,21:[1,106],26:$Ve,30:75,58:107,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi,91:74},{21:[1,108],60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},{18:$Vc,19:$Vd,26:$Ve,30:109,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VD,[2,69]),{27:[1,110]},o($VI,[2,85],{90:[1,111]}),o([21,27,90],[2,86],{60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),{4:88,6:3,9:5,12:112,16:$V0,18:$V1,25:$V2,28:6,29:7,32:8,37:$V3,38:$V4,43:$V5,44:$V6,45:13,46:$V7,47:$V8,59:$V9,61:$Va},o($VH,[2,22]),o($VH,[2,23]),{11:[2,35]},{21:[1,113]},{11:[2,39]},{18:$Vc,19:$Vd,26:$Ve,30:114,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$Vc,19:$Vd,26:$Ve,30:115,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{18:$VJ,20:116,21:$VK,87:117,88:$VL,89:$VM},{21:[1,121]},{11:[2,38],60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},{24:122,39:$VN,40:$VO},o([27,39,40,94,95,97,98],[2,7]),{53:[1,125],60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},o([11,21,27,35,36,41,42,53,63,64,82,90],[2,43],{60:$Vo,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o([11,21,27,35,36,41,42,53,63,64,65,82,90],[2,44],{60:$Vo,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o($VP,[2,45],{67:$Vt,69:$Vv,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o($VQ,[2,46],{71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),{18:$Vc,19:$Vd,26:$Ve,30:126,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VP,[2,47],{67:$Vt,69:$Vv,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o($VQ,[2,48],{71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),{18:$Vc,19:$Vd,26:$Ve,30:127,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VP,[2,49],{67:$Vt,69:$Vv,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o($VP,[2,50],{67:$Vt,69:$Vv,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o($VR,[2,51],{73:$Vz,74:$VA,75:$VB}),o($VR,[2,52],{73:$Vz,74:$VA,75:$VB}),o($VC,[2,53]),o($VC,[2,56]),o($VC,[2,57]),o($VC,[2,62]),o($VD,[2,74]),{21:[1,128]},o($VD,[2,67]),{60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,82:[1,129]},o($VD,[2,70]),{18:$Vc,19:$Vd,26:$Ve,30:75,58:130,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi,91:74},{24:132,34:131,39:$VN,40:$VO,93:133,94:$VS,95:$VT,96:134,97:$VU,98:$VV},{11:[2,36]},{11:[2,40],60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},{11:[2,41],60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},{21:[1,139]},{21:[2,82],90:[1,140]},{18:[1,141]},{18:[1,142]},{9:143,18:$Vl,25:$V2},{26:[1,144]},{29:145,37:$V3,38:$V4},o($Vn,[2,20]),o($Vn,[2,21]),{18:$Vc,19:$Vd,26:$Ve,30:146,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},o($VQ,[2,55],{71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o($VQ,[2,54],{71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),o($VD,[2,75]),o($VD,[2,64]),o($VI,[2,84]),{24:147,39:$VN,40:$VO},{32:148,43:$V5,44:$V6},{18:$Vc,19:$Vd,26:$Ve,30:149,62:31,72:$Vf,76:27,77:$Vg,78:29,79:30,83:32,84:34,85:$Vh,86:$Vi},{4:88,6:3,9:5,12:150,16:$V0,18:$V1,25:$V2,28:6,29:7,32:8,37:$V3,38:$V4,43:$V5,44:$V6,45:13,46:$V7,47:$V8,59:$V9,61:$Va},o($VW,[2,89]),o($VW,[2,90]),o($VH,[2,91]),o($VH,[2,92]),{22:[1,151]},{18:$VJ,20:152,21:$VK,87:117,88:$VL,89:$VM},{9:153,18:$Vl,25:$V2},{9:154,18:$Vl,25:$V2},o($VX,[2,80]),{4:88,6:3,9:5,12:155,16:$V0,18:$V1,25:$V2,28:6,29:7,32:8,37:$V3,38:$V4,43:$V5,44:$V6,45:13,46:$V7,47:$V8,59:$V9,61:$Va},{11:[1,156]},o([11,21,27,35,36,41,42,53,82,90],[2,42],{60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB}),{32:157,43:$V5,44:$V6},{11:[1,158]},{33:159,41:$VF,42:$VG,60:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB},o($VY,[2,94]),{9:160,18:$Vl,25:$V2},{21:[2,81]},o($VX,[2,78]),o($VX,[2,79]),{27:[1,161]},o($Vn,[2,13]),{11:[1,162]},o($Vn,[2,15]),{4:88,6:3,9:5,12:163,16:$V0,18:$V1,25:$V2,28:6,29:7,32:8,37:$V3,38:$V4,43:$V5,44:$V6,45:13,46:$V7,47:$V8,59:$V9,61:$Va},{23:[1,164]},o($Vn,[2,11]),o($Vn,[2,14]),{34:165,93:133,94:$VS,95:$VT,96:134,97:$VU,98:$VV},{4:88,6:3,9:5,12:166,16:$V0,18:$V1,25:$V2,28:6,29:7,32:8,37:$V3,38:$V4,43:$V5,44:$V6,45:13,46:$V7,47:$V8,59:$V9,61:$Va},o($VY,[2,93]),{24:167,39:$VN,40:$VO},o($Vn,[2,10])],
defaultActions: {18:[2,26],19:[2,27],20:[2,1],79:[2,35],81:[2,39],113:[2,36],152:[2,81]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 85
break;
case 2:return 86
break;
case 3:return 16
break;
case 4:return 61
break;
case 5:return 17
break;
case 6:return 22
break;
case 7:return 49
break;
case 8:return 50
break;
case 9:return 23
break;
case 10:return 42
break;
case 11:return 41
break;
case 12:return 39
break;
case 13:return 47
break;
case 14:return 46
break;
case 15:return "if"
break;
case 16:return "IF"
break;
case 17:return 36
break;
case 18:return 35
break;
case 19:return "else"
break;
case 20:return "ELSE"
break;
case 21:return "ELSEIF"
break;
case 22:return "elseif"
break;
case 23:return "RETURN"
break;
case 24:return "void"
break;
case 25:return "case"
break;
case 26:return "printf"
break;
case 27:return "while"
break;
case 28:return "WHILE"
break;
case 29:return "break"
break;
case 30:return "default"
break;
case 31:return "const"
break;
case 32:return "struct"
break;
case 33:return "switch"
break;
case 34:return 89
break;
case 35:return 88
break;
case 36:return "for"
break;
case 37:return 90
break;
case 38:return 11
break;
case 39:return 80
break;
case 40:return 53
break;
case 41:return 65
break;
case 42:return '&'
break;
case 43:return 64
break;
case 44:return 70
break;
case 45:return 77
break;
case 46:return 68
break;
case 47:return 69
break;
case 48:return 66
break;
case 49:return 67
break;
case 50:return 60
break;
case 51:return '*='
break;
case 52:return 74
break;
case 53:return 73
break;
case 54:return '/='
break;
case 55:return 75
break;
case 56:return '-='
break;
case 57:return '--'
break;
case 58:return 72
break;
case 59:return '++'
break;
case 60:return '+='
break;
case 61:return 71
break;
case 62:return '^'
break;
case 63:return 63
break;
case 64:return 26
break;
case 65:return 27
break;
case 66:return 81
break;
case 67:return 82
break;
case 68:return 19
break;
case 69:return 21
break;
case 70:return 18
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:CREATE\b)/,/^(?:DECLARE\b)/,/^(?:FUNCTION\b)/,/^(?:RETURNS\b)/,/^(?:REPEAT\b)/,/^(?:repeat\b)/,/^(?:BEGIN\b)/,/^(?:THEN\b)/,/^(?:then\b)/,/^(?:END\b)/,/^(?:SET\b)/,/^(?:set\b)/,/^(?:if\b)/,/^(?:IF\b)/,/^(?:do\b)/,/^(?:DO\b)/,/^(?:else\b)/,/^(?:ELSE\b)/,/^(?:ELSEIF\b)/,/^(?:elseif\b)/,/^(?:RETURN\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:WHILE\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:inout\b)/,/^(?:out\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:<>)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mysql_parser;
exports.Parser = mysql_parser.Parser;
exports.parse = function () { return mysql_parser.parse.apply(mysql_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}