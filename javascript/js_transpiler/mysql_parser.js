/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mysql_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,4],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,9],$V7=[1,17],$V8=[7,37,38,53,96],$V9=[1,30],$Va=[1,23],$Vb=[1,25],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[2,79],$Vg=[1,39],$Vh=[4,13,20,72,77,85,87,88],$Vi=[4,7,18,35,36,37,38,41,42,53,55,89,96],$Vj=[1,54],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[13,22,33,34,39,40,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,82,86,93],$VB=[13,20,22,33,34,39,40,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,82,86,93],$VC=[1,74],$VD=[1,75],$VE=[4,18,35,36,41,42,55,89],$VF=[22,86],$VG=[2,85],$VH=[1,116],$VI=[1,117],$VJ=[1,120],$VK=[1,121],$VL=[13,22,33,34,39,40,59,60,61,62,82,86,93],$VM=[13,22,33,34,39,40,59,60,61,62,63,64,82,86,93],$VN=[13,22,33,34,39,40,56,59,60,61,62,63,64,65,67,69,70,82,86,93],$VO=[13,22,33,34,39,40,56,59,60,61,62,63,64,65,66,67,68,69,70,82,86,93],$VP=[13,22,33,34,39,40,56,59,60,61,62,63,64,65,66,67,68,69,70,71,72,82,86,93],$VQ=[1,130],$VR=[1,129],$VS=[22,93],$VT=[37,38];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"IDENTIFIER":3,"identifier":4,"expressions":5,"statements_":6,"EOF":7,"statement":8,"struct_statements":9,"struct_statement":10,"type":11,"identifiers":12,";":13,"statements":14,"access_modifier":15,"public":16,"private":17,"CREATE":18,"FUNCTION":19,"(":20,"parameters":21,")":22,"RETURNS":23,"BEGIN":24,"end_":25,"statement_with_semicolon":26,"while_":27,"e":28,"do_":29,"if_":30,"then_":31,"elif":32,"DO":33,"do":34,"WHILE":35,"while":36,"END":37,"end":38,"then":39,"THEN":40,"IF":41,"if":42,"set_":43,"set":44,"SET":45,"repeat_":46,"REPEAT":47,"repeat":48,"case_statement":49,"when":50,"case_statements_":51,"case_statements":52,"else":53,"exprs":54,"RETURN":55,"=":56,"access_array":57,":=":58,"?":59,":":60,"||":61,"OR":62,"&&":63,"AND":64,"<=":65,"<":66,">=":67,">":68,"!=":69,"<>":70,"+":71,"-":72,"%":73,"*":74,"/":75,"not_expr":76,"!":77,"dot_expr":78,"parentheses_expr":79,".":80,"[":81,"]":82,"function_call":83,"parentheses_expr_":84,"{":85,"}":86,"NUMBER":87,"STRING_LITERAL":88,"void":89,"parameter":90,"out":91,"inout":92,",":93,"expr":94,"types":95,"elseif":96,"bracket_statements":97,"$accept":0,"$end":1},
terminals_: {2:"error",4:"identifier",7:"EOF",13:";",16:"public",17:"private",18:"CREATE",19:"FUNCTION",20:"(",22:")",23:"RETURNS",24:"BEGIN",33:"DO",34:"do",35:"WHILE",36:"while",37:"END",38:"end",39:"then",40:"THEN",41:"IF",42:"if",44:"set",45:"SET",47:"REPEAT",48:"repeat",50:"when",53:"else",55:"RETURN",56:"=",58:":=",59:"?",60:":",61:"||",62:"OR",63:"&&",64:"AND",65:"<=",66:"<",67:">=",68:">",69:"!=",70:"<>",71:"+",72:"-",73:"%",74:"*",75:"/",77:"!",80:".",81:"[",82:"]",85:"{",86:"}",87:"NUMBER",88:"STRING_LITERAL",89:"void",91:"out",92:"inout",93:",",96:"elseif"},
productions_: [0,[3,1],[5,2],[6,2],[6,1],[9,2],[9,1],[10,3],[14,1],[15,1],[15,1],[8,11],[8,2],[8,7],[8,8],[8,7],[29,1],[29,1],[27,1],[27,1],[25,1],[25,1],[31,1],[31,1],[30,1],[30,1],[43,1],[43,1],[46,1],[46,1],[49,4],[51,2],[51,1],[52,3],[52,1],[26,3],[26,4],[26,2],[26,4],[26,3],[26,3],[28,5],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,2],[28,1],[76,2],[76,1],[78,3],[78,1],[57,4],[79,1],[79,1],[79,3],[79,1],[84,2],[84,3],[84,1],[84,1],[84,1],[83,3],[83,4],[11,1],[11,1],[90,3],[90,3],[90,2],[21,3],[21,1],[21,0],[54,3],[54,1],[94,1],[95,3],[95,1],[32,5],[32,2],[12,3],[12,1],[97,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = yytext.toLowerCase()
break;
case 2:
return ["top_level_statements",$$[$0-1]]
break;
case 3: case 5: case 31:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 4: case 6: case 32: case 65: case 84:
this.$ =
 [$$[$0]];
break;
case 7:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 8:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 12: case 95:
this.$ = ["semicolon",$$[$0-1]];
break;
case 13:
this.$ = ["while",$$[$0-5],$$[$0-3]];
break;
case 14:
this.$ = ["if",$$[$0-6],$$[$0-4],$$[$0-3]];
break;
case 15:
this.$ = ["if",$$[$0-5],$$[$0-3]];
break;
case 30:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 33:
this.$ = $$[$0-2].concat([["default",$$[$01]]])
break;
case 35: case 76:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 36: case 77:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 37:
this.$ = ["return",$$[$0]];
break;
case 38:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 39: case 40:
this.$ = ["set_var",$$[$0-1],$$[$01]];
break;
case 41:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 42: case 44: case 46: case 47: case 48: case 49: case 53: case 54: case 55: case 58: case 59:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 50:
this.$ = ["==",$$[$0-2],$$[$0]];
break;
case 51: case 52:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 56:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 57:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 60:
this.$ = ["-",$$[$0]];
break;
case 62:
this.$ = ["!", [".",$$[$0]]];
break;
case 63:
this.$ = [".", $$[$0]];
break;
case 64: case 83: case 86: case 89: case 93:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 66:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 69:
this.$ = ["parentheses",$$[$0-1]];
break;
case 71:
this.$ = ["initializer_list","Object",[]];
break;
case 72:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 73: case 74: case 75:
this.$ = yytext;
break;
case 80:
this.$ = ["out_parameter",$$[$0],$$[$0-1]];
break;
case 81:
this.$ = ["ref_parameter",$$[$0],$$[$0-1]];
break;
case 82:
this.$ = [$$[$0],$$[$0-1]];
break;
case 85:
this.$ = [];
break;
case 87: case 88: case 90: case 94:
this.$ = [$$[$0]];
break;
case 91:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 92:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:8,4:$V0,5:1,6:2,8:3,11:10,18:$V1,26:5,27:6,30:7,35:$V2,36:$V3,41:$V4,42:$V5,55:$V6,57:11,89:$V7},{1:[3]},{7:[1,18]},o($V8,[2,4],{8:3,26:5,27:6,30:7,3:8,11:10,57:11,6:19,4:$V0,18:$V1,35:$V2,36:$V3,41:$V4,42:$V5,55:$V6,89:$V7}),{19:[1,20]},{13:[1,21]},{3:32,4:$V0,20:$V9,28:22,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:36,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{4:$Vf,20:[1,37],58:[1,38],81:$Vg},{3:32,4:$V0,20:$V9,28:40,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:41,4:$V0},{58:[1,42]},o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,24]),o($Vh,[2,25]),o([4,13,20,22,24,33,34,39,40,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,82,86,89,93],[2,1]),o([4,22,24,93],[2,78]),{1:[2,2]},o($V8,[2,3]),{3:43,4:$V0},o($Vi,[2,12]),{29:44,33:[1,62],34:[1,63],56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},{3:32,4:$V0,20:$V9,28:64,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},o($VA,[2,61]),{3:32,4:$V0,20:$V9,57:28,78:65,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},o($VA,[2,63]),o($VA,[2,65],{20:[1,67],80:[1,66]}),o($VB,[2,67]),o($VB,[2,68]),{3:32,4:$V0,20:$V9,28:68,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},o($VB,[2,70]),o($VB,[2,74],{81:$Vg}),{3:32,4:$V0,20:$V9,28:72,54:70,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,86:[1,69],87:$Vd,88:$Ve,94:71},o($VB,[2,73]),o($VB,[2,75]),{31:73,39:$VC,40:$VD,56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},{3:32,4:$V0,20:$V9,22:[1,76],28:72,54:77,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve,94:71},{3:32,4:$V0,20:$V9,28:78,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:79,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{13:[2,37],56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},{56:[1,80]},{3:32,4:$V0,20:$V9,28:81,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{20:[1,82]},{3:8,4:$V0,6:84,8:3,11:10,14:83,18:$V1,26:5,27:6,30:7,35:$V2,36:$V3,41:$V4,42:$V5,55:$V6,57:11,89:$V7},{3:32,4:$V0,20:$V9,28:85,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:86,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:87,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:88,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:89,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:90,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:91,57:28,66:[1,92],72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:93,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:94,57:28,68:[1,95],72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:96,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:97,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:98,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:99,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:100,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:101,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:102,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,28:103,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},o($VE,[2,16]),o($VE,[2,17]),o($VA,[2,60]),o($VA,[2,62]),{3:32,4:$V0,20:$V9,57:28,78:104,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:32,4:$V0,20:$V9,22:[1,105],28:72,54:106,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve,94:71},{22:[1,107],56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},o($VB,[2,71]),{86:[1,108]},o($VF,[2,87],{93:[1,109]}),o([22,86,93],[2,88],{56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),{3:8,4:$V0,6:84,8:3,11:10,14:110,18:$V1,26:5,27:6,30:7,35:$V2,36:$V3,41:$V4,42:$V5,55:$V6,57:11,89:$V7},o($VE,[2,22]),o($VE,[2,23]),{13:[2,35]},{22:[1,111]},{13:[2,40],56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},{56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,82:[1,112]},{3:32,4:$V0,20:$V9,28:113,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{13:[2,39],56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},{3:118,4:$V0,21:114,22:$VG,90:115,91:$VH,92:$VI},{25:119,37:$VJ,38:$VK},o([37,38,53,96],[2,8]),{56:$Vj,59:$Vk,60:[1,122],61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},o($VL,[2,42],{56:$Vj,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VL,[2,43],{56:$Vj,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VM,[2,44],{56:$Vj,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VM,[2,45],{56:$Vj,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VN,[2,46],{66:$Vq,68:$Vs,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VO,[2,47],{71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),{3:32,4:$V0,20:$V9,28:123,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},o($VN,[2,48],{66:$Vq,68:$Vs,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VO,[2,49],{71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),{3:32,4:$V0,20:$V9,28:124,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},o($VN,[2,50],{66:$Vq,68:$Vs,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VN,[2,51],{66:$Vq,68:$Vs,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VN,[2,52],{66:$Vq,68:$Vs,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VP,[2,53],{73:$Vx,74:$Vy,75:$Vz}),o($VP,[2,54],{73:$Vx,74:$Vy,75:$Vz}),o($VA,[2,55]),o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,64]),o($VB,[2,76]),{22:[1,125]},o($VB,[2,69]),o($VB,[2,72]),{3:32,4:$V0,20:$V9,28:72,54:126,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve,94:71},{25:128,32:127,37:$VJ,38:$VK,53:$VQ,96:$VR},{13:[2,36]},o([13,20,22,33,34,39,40,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,82,86,93],[2,66]),{13:[2,38],56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},{22:[1,131]},{22:[2,84],93:[1,132]},{3:133,4:$V0},{3:134,4:$V0},{3:136,4:$V0,11:135,89:$V7},{27:137,35:$V2,36:$V3},o($Vi,[2,20]),o($Vi,[2,21]),{3:32,4:$V0,20:$V9,28:138,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},o($VO,[2,57],{71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VO,[2,56],{71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),o($VB,[2,77]),o($VF,[2,86]),{25:139,37:$VJ,38:$VK},{30:140,41:$V4,42:$V5},{3:32,4:$V0,20:$V9,28:141,57:28,72:$Va,76:24,77:$Vb,78:26,79:27,83:29,84:31,85:$Vc,87:$Vd,88:$Ve},{3:8,4:$V0,6:84,8:3,11:10,14:142,18:$V1,26:5,27:6,30:7,35:$V2,36:$V3,41:$V4,42:$V5,55:$V6,57:11,89:$V7},{23:[1,143]},{3:118,4:$V0,21:144,22:$VG,90:115,91:$VH,92:$VI},{3:136,4:$V0,11:145,89:$V7},{3:136,4:$V0,11:146,89:$V7},o($VS,[2,82]),o([22,24,93],$Vf),{13:[1,147]},o([13,22,33,34,39,40,60,82,86,93],[2,41],{56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz}),{30:148,41:$V4,42:$V5},{13:[1,149]},{31:150,39:$VC,40:$VD,56:$Vj,59:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz},o($VT,[2,92]),{3:136,4:$V0,11:151,89:$V7},{22:[2,83]},o($VS,[2,80]),o($VS,[2,81]),o($Vi,[2,13]),{13:[1,152]},o($Vi,[2,15]),{3:8,4:$V0,6:84,8:3,11:10,14:153,18:$V1,26:5,27:6,30:7,35:$V2,36:$V3,41:$V4,42:$V5,55:$V6,57:11,89:$V7},{24:[1,154]},o($Vi,[2,14]),{32:155,53:$VQ,96:$VR},{3:8,4:$V0,6:84,8:3,11:10,14:156,18:$V1,26:5,27:6,30:7,35:$V2,36:$V3,41:$V4,42:$V5,55:$V6,57:11,89:$V7},o($VT,[2,91]),{25:157,37:$VJ,38:$VK},o($Vi,[2,11])],
defaultActions: {18:[2,2],76:[2,35],111:[2,36],144:[2,83]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 87
break;
case 2:return 88
break;
case 3:return 18
break;
case 4:return 'DECLARE'
break;
case 5:return 19
break;
case 6:return 23
break;
case 7:return 47
break;
case 8:return 48
break;
case 9:return 24
break;
case 10:return 40
break;
case 11:return 39
break;
case 12:return 50
break;
case 13:return 64
break;
case 14:return 62
break;
case 15:return 37
break;
case 16:return 45
break;
case 17:return 44
break;
case 18:return "if"
break;
case 19:return "IF"
break;
case 20:return 34
break;
case 21:return 33
break;
case 22:return "else"
break;
case 23:return "elseif"
break;
case 24:return "void"
break;
case 25:return "case"
break;
case 26:return "printf"
break;
case 27:return "while"
break;
case 28:return "break"
break;
case 29:return "default"
break;
case 30:return "const"
break;
case 31:return "struct"
break;
case 32:return "switch"
break;
case 33:return 92
break;
case 34:return 91
break;
case 35:return "for"
break;
case 36:return 93
break;
case 37:return 13
break;
case 38:return 80
break;
case 39:return 60
break;
case 40:return 63
break;
case 41:return '&'
break;
case 42:return 61
break;
case 43:return 70
break;
case 44:return 69
break;
case 45:return 77
break;
case 46:return 67
break;
case 47:return 68
break;
case 48:return 65
break;
case 49:return 66
break;
case 50:return 56
break;
case 51:return '*='
break;
case 52:return 74
break;
case 53:return 73
break;
case 54:return '/='
break;
case 55:return 75
break;
case 56:return '-='
break;
case 57:return '--'
break;
case 58:return 72
break;
case 59:return '++'
break;
case 60:return '+='
break;
case 61:return 71
break;
case 62:return '^'
break;
case 63:return 59
break;
case 64:return 85
break;
case 65:return 86
break;
case 66:return 81
break;
case 67:return 82
break;
case 68:return 20
break;
case 69:return 22
break;
case 70:return 4
break;
case 71:return 7
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:CREATE\b)/,/^(?:DECLARE\b)/,/^(?:FUNCTION\b)/,/^(?:RETURNS\b)/,/^(?:REPEAT\b)/,/^(?:repeat\b)/,/^(?:BEGIN\b)/,/^(?:THEN\b)/,/^(?:then\b)/,/^(?:when\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:END\b)/,/^(?:SET\b)/,/^(?:set\b)/,/^(?:if\b)/,/^(?:IF\b)/,/^(?:do\b)/,/^(?:DO\b)/,/^(?:else\b)/,/^(?:elseif\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:inout\b)/,/^(?:out\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:<>)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mysql_parser;
exports.Parser = mysql_parser.Parser;
exports.parse = function () { return mysql_parser.parse.apply(mysql_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}