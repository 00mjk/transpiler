/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mysql_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,4],$V2=[1,9],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,19],$V8=[1,20],$V9=[1,11],$Va=[1,12],$Vb=[7,28,40,41,56,97,98,100],$Vc=[1,34],$Vd=[1,37],$Ve=[1,27],$Vf=[1,29],$Vg=[1,38],$Vh=[1,39],$Vi=[4,22,24,93],$Vj=[2,81],$Vk=[4,13,20,27,75,80,88,89],$Vl=[4,7,18,26,28,38,39,40,41,44,45,47,48,56,58,60,97,98,100],$Vm=[1,60],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,61],$Vx=[1,62],$Vy=[1,63],$Vz=[1,64],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[13,22,28,36,37,42,43,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,93],$VE=[13,20,22,28,36,37,42,43,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,83,85,93],$VF=[1,75],$VG=[1,81],$VH=[1,82],$VI=[4,18,26,38,39,44,45,47,48,58,60],$VJ=[22,28],$VK=[2,87],$VL=[1,125],$VM=[1,126],$VN=[1,130],$VO=[1,131],$VP=[13,22,28,36,37,42,43,62,63,64,65,85,93],$VQ=[13,22,28,36,37,42,43,62,63,64,65,66,67,85,93],$VR=[13,22,28,36,37,42,43,59,62,63,64,65,66,67,68,70,72,73,85,93],$VS=[13,22,28,36,37,42,43,59,62,63,64,65,66,67,68,69,70,71,72,73,85,93],$VT=[13,22,28,36,37,42,43,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,85,93],$VU=[1,144],$VV=[1,142],$VW=[1,143],$VX=[1,145],$VY=[4,20,27,75,80,88,89],$VZ=[22,93],$V_=[40,41];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"IDENTIFIER":3,"identifier":4,"expressions":5,"statements_":6,"EOF":7,"statement":8,"struct_statements":9,"struct_statement":10,"type":11,"identifiers":12,";":13,"statements":14,"access_modifier":15,"public":16,"private":17,"CREATE":18,"FUNCTION":19,"(":20,"parameters":21,")":22,"RETURNS":23,"BEGIN":24,"end_":25,"void":26,"{":27,"}":28,"statement_with_semicolon":29,"while_":30,"e":31,"do_":32,"if_":33,"then_":34,"elif":35,"DO":36,"do":37,"WHILE":38,"while":39,"END":40,"end":41,"then":42,"THEN":43,"IF":44,"if":45,"set_":46,"set":47,"SET":48,"repeat_":49,"REPEAT":50,"repeat":51,"case_statement":52,"when":53,"case_statements_":54,"case_statements":55,"else":56,"exprs":57,"RETURN":58,"=":59,"DECLARE":60,"access_array":61,"?":62,":":63,"||":64,"OR":65,"&&":66,"AND":67,"<=":68,"<":69,">=":70,">":71,"!=":72,"<>":73,"+":74,"-":75,"%":76,"*":77,"/":78,"not_expr":79,"!":80,"dot_expr":81,"parentheses_expr":82,".":83,"[":84,"]":85,"function_call":86,"parentheses_expr_":87,"NUMBER":88,"STRING_LITERAL":89,"parameter":90,"out":91,"inout":92,",":93,"expr":94,"types":95,"elseif_":96,"ELSEIF":97,"elseif":98,"else_":99,"ELSE":100,"bracket_statements":101,"$accept":0,"$end":1},
terminals_: {2:"error",4:"identifier",7:"EOF",13:";",16:"public",17:"private",18:"CREATE",19:"FUNCTION",20:"(",22:")",23:"RETURNS",24:"BEGIN",26:"void",27:"{",28:"}",36:"DO",37:"do",38:"WHILE",39:"while",40:"END",41:"end",42:"then",43:"THEN",44:"IF",45:"if",47:"set",48:"SET",50:"REPEAT",51:"repeat",53:"when",56:"else",58:"RETURN",59:"=",60:"DECLARE",62:"?",63:":",64:"||",65:"OR",66:"&&",67:"AND",68:"<=",69:"<",70:">=",71:">",72:"!=",73:"<>",74:"+",75:"-",76:"%",77:"*",78:"/",80:"!",83:".",84:"[",85:"]",88:"NUMBER",89:"STRING_LITERAL",91:"out",92:"inout",93:",",97:"ELSEIF",98:"elseif",100:"ELSE"},
productions_: [0,[3,1],[5,2],[6,2],[6,1],[9,2],[9,1],[10,3],[14,1],[15,1],[15,1],[8,11],[8,8],[8,2],[8,7],[8,8],[8,7],[32,1],[32,1],[30,1],[30,1],[25,1],[25,1],[34,1],[34,1],[33,1],[33,1],[46,1],[46,1],[49,1],[49,1],[52,4],[54,2],[54,1],[55,3],[55,1],[29,3],[29,4],[29,2],[29,4],[29,3],[29,4],[29,4],[31,5],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,4],[31,4],[31,3],[31,3],[31,2],[31,1],[79,2],[79,1],[81,3],[81,1],[61,4],[82,1],[82,1],[82,3],[82,1],[87,2],[87,3],[87,1],[87,1],[87,1],[86,3],[86,4],[11,1],[11,1],[90,3],[90,3],[90,2],[21,3],[21,1],[21,0],[57,3],[57,1],[94,1],[95,3],[95,1],[96,1],[96,1],[99,1],[99,1],[35,5],[35,2],[12,3],[12,1],[101,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = yytext.toLowerCase()
break;
case 2:
return ["top_level_statements",$$[$0-1]]
break;
case 3: case 5: case 32:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 4: case 6: case 33: case 67: case 86:
this.$ =
 [$$[$0]];
break;
case 7:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 8:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 12:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 13: case 101:
this.$ = ["semicolon",$$[$0-1]];
break;
case 14:
this.$ = ["while",$$[$0-5],$$[$0-3]];
break;
case 15:
this.$ = ["if",$$[$0-6],$$[$0-4],$$[$0-3]];
break;
case 16:
this.$ = ["if",$$[$0-5],$$[$0-3]];
break;
case 31:
this.$ = ["case",$$[$0-2],$$[$0]]
break;
case 34:
this.$ = $$[$0-2].concat([["default",$$[$01]]])
break;
case 36: case 78:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 37: case 79:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 38:
this.$ = ["return",$$[$0]];
break;
case 39:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["initialize_empty_vars",$$[$0],[$$[$0-1]]];
break;
case 41: case 42:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 44: case 46: case 48: case 49: case 50: case 51: case 55: case 56: case 57: case 60: case 61:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 52:
this.$ = ["==",$$[$0-2],$$[$0]];
break;
case 53: case 54:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 58:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 59:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 62:
this.$ = ["-",$$[$0]];
break;
case 64:
this.$ = ["!", [".",$$[$0]]];
break;
case 65:
this.$ = [".", $$[$0]];
break;
case 66: case 85: case 88: case 91: case 99:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 68:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 71:
this.$ = ["parentheses",$$[$0-1]];
break;
case 73:
this.$ = ["initializer_list","Object",[]];
break;
case 74:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 75: case 76: case 77:
this.$ = yytext;
break;
case 82:
this.$ = ["out_parameter",$$[$0],$$[$0-1]];
break;
case 83:
this.$ = ["ref_parameter",$$[$0],$$[$0-1]];
break;
case 84:
this.$ = [$$[$0],$$[$0-1]];
break;
case 87:
this.$ = [];
break;
case 89: case 90: case 92: case 100:
this.$ = [$$[$0]];
break;
case 97:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 98:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:10,4:$V0,5:1,6:2,8:3,11:5,18:$V1,26:$V2,29:6,30:7,33:8,38:$V3,39:$V4,44:$V5,45:$V6,46:13,47:$V7,48:$V8,58:$V9,60:$Va},{1:[3]},{7:[1,21]},o($Vb,[2,4],{8:3,11:5,29:6,30:7,33:8,3:10,46:13,6:22,4:$V0,18:$V1,26:$V2,38:$V3,39:$V4,44:$V5,45:$V6,47:$V7,48:$V8,58:$V9,60:$Va}),{19:[1,23]},{3:24,4:$V0},{13:[1,25]},{3:36,4:$V0,20:$Vc,27:$Vd,31:26,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:40,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($Vi,[2,80]),{4:$Vj,20:[1,41]},{3:36,4:$V0,20:$Vc,27:$Vd,31:42,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:44,4:$V0,11:43,26:$V2},{3:46,4:$V0,61:45},o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,25]),o($Vk,[2,26]),o([4,13,20,22,24,26,28,36,37,42,43,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,83,84,85,93],[2,1]),{4:[2,27]},{4:[2,28]},{1:[2,2]},o($Vb,[2,3]),{3:47,4:$V0},{20:[1,48],59:[1,49]},o($Vl,[2,13]),{32:50,36:[1,68],37:[1,69],59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},{3:36,4:$V0,20:$Vc,27:$Vd,31:70,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VD,[2,63]),{3:36,4:$V0,20:$Vc,27:$Vd,61:32,81:71,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VD,[2,65]),o($VD,[2,67],{20:[1,73],83:[1,72]}),o($VE,[2,69]),o($VE,[2,70]),{3:36,4:$V0,20:$Vc,27:$Vd,31:74,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VE,[2,72]),o($VE,[2,76],{84:$VF}),{3:36,4:$V0,20:$Vc,27:$Vd,28:[1,76],31:79,57:77,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh,94:78},o($VE,[2,75]),o($VE,[2,77]),{34:80,42:$VG,43:$VH,59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},{3:36,4:$V0,20:$Vc,22:[1,83],27:$Vd,31:79,57:84,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh,94:78},{13:[2,38],59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},{3:85,4:$V0},o($Vi,$Vj),{59:[1,86]},{59:[1,87],84:$VF},{20:[1,88]},{26:[1,89]},{3:36,4:$V0,20:$Vc,27:$Vd,31:90,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:10,4:$V0,6:92,8:3,11:5,14:91,18:$V1,26:$V2,29:6,30:7,33:8,38:$V3,39:$V4,44:$V5,45:$V6,46:13,47:$V7,48:$V8,58:$V9,60:$Va},{3:36,4:$V0,20:$Vc,27:$Vd,31:93,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:94,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:95,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:96,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:97,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:98,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:99,61:32,69:[1,100],75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:101,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:102,61:32,71:[1,103],75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:104,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:105,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:106,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:107,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:108,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:109,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:110,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:111,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VI,[2,17]),o($VI,[2,18]),o($VD,[2,62]),o($VD,[2,64]),{3:36,4:$V0,20:$Vc,27:$Vd,61:32,81:112,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,22:[1,113],27:$Vd,31:79,57:114,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh,94:78},{22:[1,115],59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},{3:36,4:$V0,20:$Vc,27:$Vd,31:116,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VE,[2,73]),{28:[1,117]},o($VJ,[2,89],{93:[1,118]}),o([22,28,93],[2,90],{59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),{3:10,4:$V0,6:92,8:3,11:5,14:119,18:$V1,26:$V2,29:6,30:7,33:8,38:$V3,39:$V4,44:$V5,45:$V6,46:13,47:$V7,48:$V8,58:$V9,60:$Va},o($VI,[2,23]),o($VI,[2,24]),{13:[2,36]},{22:[1,120]},{13:[2,40]},{3:36,4:$V0,20:$Vc,27:$Vd,31:121,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:36,4:$V0,20:$Vc,27:$Vd,31:122,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:127,4:$V0,21:123,22:$VK,90:124,91:$VL,92:$VM},{22:[1,128]},{13:[2,39],59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},{25:129,40:$VN,41:$VO},o([28,40,41,56,97,98,100],[2,8]),{59:$Vm,62:$Vn,63:[1,132],64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},o($VP,[2,44],{59:$Vm,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VP,[2,45],{59:$Vm,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VQ,[2,46],{59:$Vm,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VQ,[2,47],{59:$Vm,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VR,[2,48],{69:$Vt,71:$Vv,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VS,[2,49],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),{3:36,4:$V0,20:$Vc,27:$Vd,31:133,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VR,[2,50],{69:$Vt,71:$Vv,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VS,[2,51],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),{3:36,4:$V0,20:$Vc,27:$Vd,31:134,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VR,[2,52],{69:$Vt,71:$Vv,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VR,[2,53],{69:$Vt,71:$Vv,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VR,[2,54],{69:$Vt,71:$Vv,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VT,[2,55],{76:$VA,77:$VB,78:$VC}),o($VT,[2,56],{76:$VA,77:$VB,78:$VC}),o($VD,[2,57]),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,66]),o($VE,[2,78]),{22:[1,135]},o($VE,[2,71]),{59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,85:[1,136]},o($VE,[2,74]),{3:36,4:$V0,20:$Vc,27:$Vd,31:79,57:137,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh,94:78},{25:139,35:138,40:$VN,41:$VO,56:$VU,96:140,97:$VV,98:$VW,99:141,100:$VX},{13:[2,37]},{13:[2,41],59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},{13:[2,42],59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},{22:[1,146]},{22:[2,86],93:[1,147]},{3:148,4:$V0},{3:149,4:$V0},{3:44,4:$V0,11:150,26:$V2},{27:[1,151]},{30:152,38:$V3,39:$V4},o($Vl,[2,21]),o($Vl,[2,22]),{3:36,4:$V0,20:$Vc,27:$Vd,31:153,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},o($VS,[2,59],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VS,[2,58],{74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VE,[2,79]),o($VE,[2,68]),o($VJ,[2,88]),{25:154,40:$VN,41:$VO},{33:155,44:$V5,45:$V6},{3:36,4:$V0,20:$Vc,27:$Vd,31:156,61:32,75:$Ve,79:28,80:$Vf,81:30,82:31,86:33,87:35,88:$Vg,89:$Vh},{3:10,4:$V0,6:92,8:3,11:5,14:157,18:$V1,26:$V2,29:6,30:7,33:8,38:$V3,39:$V4,44:$V5,45:$V6,46:13,47:$V7,48:$V8,58:$V9,60:$Va},o($VY,[2,93]),o($VY,[2,94]),o($VI,[2,95]),o($VI,[2,96]),{23:[1,158]},{3:127,4:$V0,21:159,22:$VK,90:124,91:$VL,92:$VM},{3:44,4:$V0,11:160,26:$V2},{3:44,4:$V0,11:161,26:$V2},o($VZ,[2,84]),{3:10,4:$V0,6:92,8:3,11:5,14:162,18:$V1,26:$V2,29:6,30:7,33:8,38:$V3,39:$V4,44:$V5,45:$V6,46:13,47:$V7,48:$V8,58:$V9,60:$Va},{13:[1,163]},o([13,22,28,36,37,42,43,63,85,93],[2,43],{59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),{33:164,44:$V5,45:$V6},{13:[1,165]},{34:166,42:$VG,43:$VH,59:$Vm,62:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC},o($V_,[2,98]),{3:44,4:$V0,11:167,26:$V2},{22:[2,85]},o($VZ,[2,82]),o($VZ,[2,83]),{28:[1,168]},o($Vl,[2,14]),{13:[1,169]},o($Vl,[2,16]),{3:10,4:$V0,6:92,8:3,11:5,14:170,18:$V1,26:$V2,29:6,30:7,33:8,38:$V3,39:$V4,44:$V5,45:$V6,46:13,47:$V7,48:$V8,58:$V9,60:$Va},{24:[1,171]},o($Vl,[2,12]),o($Vl,[2,15]),{35:172,56:$VU,96:140,97:$VV,98:$VW,99:141,100:$VX},{3:10,4:$V0,6:92,8:3,11:5,14:173,18:$V1,26:$V2,29:6,30:7,33:8,38:$V3,39:$V4,44:$V5,45:$V6,46:13,47:$V7,48:$V8,58:$V9,60:$Va},o($V_,[2,97]),{25:174,40:$VN,41:$VO},o($Vl,[2,11])],
defaultActions: {19:[2,27],20:[2,28],21:[2,2],83:[2,36],85:[2,40],120:[2,37],159:[2,85]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 88
break;
case 2:return 89
break;
case 3:return 18
break;
case 4:return 60
break;
case 5:return 19
break;
case 6:return 23
break;
case 7:return 50
break;
case 8:return 51
break;
case 9:return 24
break;
case 10:return 43
break;
case 11:return 42
break;
case 12:return 53
break;
case 13:return 67
break;
case 14:return 65
break;
case 15:return 40
break;
case 16:return 48
break;
case 17:return 47
break;
case 18:return "if"
break;
case 19:return "IF"
break;
case 20:return 37
break;
case 21:return 36
break;
case 22:return "else"
break;
case 23:return "ELSE"
break;
case 24:return "ELSEIF"
break;
case 25:return "elseif"
break;
case 26:return "RETURN"
break;
case 27:return "void"
break;
case 28:return "case"
break;
case 29:return "printf"
break;
case 30:return "while"
break;
case 31:return "WHILE"
break;
case 32:return "break"
break;
case 33:return "default"
break;
case 34:return "const"
break;
case 35:return "struct"
break;
case 36:return "switch"
break;
case 37:return 92
break;
case 38:return 91
break;
case 39:return "for"
break;
case 40:return 93
break;
case 41:return 13
break;
case 42:return 83
break;
case 43:return 63
break;
case 44:return 66
break;
case 45:return '&'
break;
case 46:return 64
break;
case 47:return 73
break;
case 48:return 72
break;
case 49:return 80
break;
case 50:return 70
break;
case 51:return 71
break;
case 52:return 68
break;
case 53:return 69
break;
case 54:return 59
break;
case 55:return '*='
break;
case 56:return 77
break;
case 57:return 76
break;
case 58:return '/='
break;
case 59:return 78
break;
case 60:return '-='
break;
case 61:return '--'
break;
case 62:return 75
break;
case 63:return '++'
break;
case 64:return '+='
break;
case 65:return 74
break;
case 66:return '^'
break;
case 67:return 62
break;
case 68:return 27
break;
case 69:return 28
break;
case 70:return 84
break;
case 71:return 85
break;
case 72:return 20
break;
case 73:return 22
break;
case 74:return 4
break;
case 75:return 7
break;
case 76:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:CREATE\b)/,/^(?:DECLARE\b)/,/^(?:FUNCTION\b)/,/^(?:RETURNS\b)/,/^(?:REPEAT\b)/,/^(?:repeat\b)/,/^(?:BEGIN\b)/,/^(?:THEN\b)/,/^(?:then\b)/,/^(?:when\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:END\b)/,/^(?:SET\b)/,/^(?:set\b)/,/^(?:if\b)/,/^(?:IF\b)/,/^(?:do\b)/,/^(?:DO\b)/,/^(?:else\b)/,/^(?:ELSE\b)/,/^(?:ELSEIF\b)/,/^(?:elseif\b)/,/^(?:RETURN\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:WHILE\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:inout\b)/,/^(?:out\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:<>)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mysql_parser;
exports.Parser = mysql_parser.Parser;
exports.parse = function () { return mysql_parser.parse.apply(mysql_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}