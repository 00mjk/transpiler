/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var octave_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,17],$V2=[1,5],$V3=[1,6],$V4=[1,13],$V5=[1,8],$V6=[1,9],$V7=[1,22],$V8=[1,10],$V9=[1,11],$Va=[1,20],$Vb=[1,16],$Vc=[1,19],$Vd=[1,21],$Ve=[5,9,13,17,19,23,28,79,80],$Vf=[1,37],$Vg=[1,32],$Vh=[1,33],$Vi=[1,35],$Vj=[25,66],$Vk=[2,57],$Vl=[2,65],$Vm=[1,48],$Vn=[1,47],$Vo=[14,15,16,18,20,21,25,26,29,31,32,33,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,68,69,72,73,75,77],$Vp=[14,15,16,18,20,21,25,26,29,31,32,33,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,72,73,75,77],$Vq=[1,56],$Vr=[1,55],$Vs=[5,9,13,14,15,17,18,19,20,21,23,26,28,29,31,32,33,67,69,72,75,79,80],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[2,71],$VM=[1,98],$VN=[73,77],$VO=[16,68],$VP=[16,77],$VQ=[1,141],$VR=[14,15,16,18,20,21,25,26,29,31,32,33,43,44,46,47,67,68,69,72,73,75,77],$VS=[14,15,16,18,20,21,25,26,29,31,32,33,43,44,46,47,48,49,67,68,69,72,73,75,77],$VT=[14,15,16,18,20,21,25,26,29,31,32,33,43,44,46,47,48,49,50,51,52,53,54,55,56,57,67,68,69,72,73,75,77],$VU=[14,15,16,18,20,21,25,26,29,31,32,33,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,67,68,69,72,73,75,77],$VV=[13,17],$VW=[1,159],$VX=[1,160];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"case_statement":8,"case":9,"e":10,"case_statements_":11,"case_statements":12,"otherwise":13,"switch":14,"(":15,")":16,"endswitch":17,"while":18,"endwhile":19,"function":20,"IDENTIFIER":21,"parameters":22,"endfunction":23,"statement_with_semicolon":24,";":25,"if":26,"elif":27,"endif":28,"import":29,"from":30,"STRING_LITERAL":31,"continue":32,"return":33,"access_array":34,"=":35,"++":36,"--":37,"+=":38,"-=":39,"*=":40,"/=":41,"dot_expr":42,"?":43,":":44,"...":45,"||":46,"|":47,"&&":48,"&":49,"!==":50,"===":51,"in":52,"instanceof":53,"<=":54,"<":55,">=":56,">":57,"+":58,"-":59,"*":60,"/":61,"%":62,"not_expr":63,"!":64,"parentheses_expr":65,".":66,"[":67,"]":68,"@":69,"parentheses_expr_":70,"exprs":71,"{":72,"}":73,"key_values":74,"NUMBER":75,"parameter":76,",":77,"key_value":78,"elseif":79,"else":80,"identifiers":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"case",13:"otherwise",14:"switch",15:"(",16:")",17:"endswitch",18:"while",19:"endwhile",20:"function",21:"IDENTIFIER",23:"endfunction",25:";",26:"if",28:"endif",29:"import",30:"from",31:"STRING_LITERAL",32:"continue",33:"return",35:"=",36:"++",37:"--",38:"+=",39:"-=",40:"*=",41:"/=",43:"?",44:":",45:"...",46:"||",47:"|",48:"&&",49:"&",50:"!==",51:"===",52:"in",53:"instanceof",54:"<=",55:"<",56:">=",57:">",58:"+",59:"-",60:"*",61:"/",62:"%",64:"!",66:".",67:"[",68:"]",69:"@",72:"{",73:"}",75:"NUMBER",77:",",79:"elseif",80:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,3],[11,2],[11,1],[12,3],[12,1],[6,6],[6,6],[6,7],[6,2],[6,7],[6,6],[24,4],[24,1],[24,2],[24,3],[24,3],[24,2],[24,2],[24,3],[24,3],[24,3],[24,3],[24,1],[10,5],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,1],[63,2],[63,1],[42,3],[42,1],[34,4],[65,5],[65,3],[65,4],[65,1],[65,3],[65,1],[70,2],[70,3],[70,2],[70,3],[70,1],[70,1],[70,1],[76,3],[76,1],[22,3],[22,1],[22,0],[71,3],[71,1],[74,3],[74,1],[78,3],[78,3],[27,6],[27,2],[81,3],[81,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 52: case 70:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 8:
this.$ = $$[$0-2].concat([["default",$$[$0]]])
break;
case 10:
this.$ = ["switch",$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["semicolon",$$[$0-1]];
break;
case 14:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 15:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["import_from",$$[$0-2],$$[$0]];
break;
case 17: case 73: case 75: case 81:
this.$ = [$$[$0]];
break;
case 18:
this.$ = ["return",$$[$0]];
break;
case 19: case 20:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 21: case 22:
this.$ = [$$[$0],$$[$0-1]];
break;
case 23: case 24: case 25: case 26: case 30: case 31: case 32: case 33: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 27:
this.$ = [".",$$[$0]]
break;
case 28:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 29:
this.$=["unpack_array",$$[$0]]
break;
case 34:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 35:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 36: case 37:
this.$ = ['in',$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ["-",$$[$0]];
break;
case 49:
this.$ = ["!", [".",$$[$0]]];
break;
case 50:
this.$ = [".", $$[$0]];
break;
case 51: case 69: case 72: case 80:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 53:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 54:
this.$ = ["anonymous_function","Object",$$[$0-2],["statements",[["semicolon",["return",$$[$0]]]]]];
break;
case 55:
this.$= ["function_call",$$[$0-2],[]];
break;
case 56:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 58:
this.$ = ["parentheses",$$[$0-1]];
break;
case 60:
this.$ = ["associative_array","Object","Object",[]];
break;
case 61:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 62:
this.$ = ["initializer_list","Object",[]];
break;
case 63:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 64: case 65: case 66:
this.$ = yytext;
break;
case 67:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 68:
this.$ = ["Object", $$[$0]];
break;
case 71:
this.$ = []
break;
case 74:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 76:
this.$ = [$$[$0-2],$$[$0]]
break;
case 77:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 78:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 79:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{1:[3]},{5:[1,23]},o($Ve,[2,3],{6:3,24:7,34:12,42:14,65:15,70:18,4:24,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,67:$Va,69:$Vb,72:$Vc,75:$Vd}),{15:[1,25]},{15:[1,26]},{21:[1,27]},{25:[1,28]},{15:[1,29]},{21:[1,30]},{25:[2,17]},{10:31,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($Vj,$Vk,{35:[1,39]}),o($Vj,$Vl,{15:$Vm,35:[1,40],36:[1,41],37:[1,42],38:[1,43],39:[1,44],40:[1,45],41:[1,46],67:$Vn}),{25:[2,27]},o($Vo,[2,52],{66:[1,49]}),{15:[1,50]},{10:51,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($Vp,[2,59]),{21:$Vq,31:$Vr,73:[1,52],74:53,78:54},{10:59,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,68:[1,57],69:$Vb,70:18,71:58,72:$Vc,75:$Vd},o($Vp,[2,64]),o($Vp,[2,66]),{1:[2,1]},o($Ve,[2,2]),{10:60,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:61,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{15:[1,62]},o($Vs,[2,13]),{10:63,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{30:[1,64]},{25:[2,18],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{10:83,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:84,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($Vo,[2,48]),{15:$V1,21:$Vf,31:$V7,34:38,42:85,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($Vo,[2,50]),o([14,16,18,20,21,25,26,29,31,32,33,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,68,69,72,73,75,77],$Vl,{15:$Vm,67:$Vn}),o($Vp,$Vk),{10:86,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:87,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{25:[2,21]},{25:[2,22]},{10:88,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:89,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:90,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:91,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:92,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:59,15:$V1,16:[1,93],21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,71:94,72:$Vc,75:$Vd},{15:$V1,21:$Vf,31:$V7,34:38,42:95,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{16:$VL,21:$VM,22:96,76:97},{16:[1,99],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vp,[2,60]),{73:[1,100],77:[1,101]},o($VN,[2,75]),{44:[1,102]},{44:[1,103]},o($Vp,[2,62]),{68:[1,104]},o($VO,[2,73],{43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,77:[1,105]}),{16:[1,106],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{16:[1,107],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{16:$VL,21:$VM,22:108,76:97},{16:[1,109],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{31:[1,110]},{10:111,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:112,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:113,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:114,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:115,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:116,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:117,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:118,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:119,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:120,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:121,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:122,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:123,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:124,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:125,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:126,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:127,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:128,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o([14,15,16,18,20,21,25,26,29,31,32,33,43,44,67,68,69,72,73,75,77],[2,29],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($Vo,[2,47]),o($Vo,[2,49]),{25:[2,19],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{25:[2,20],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{25:[2,23],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{25:[2,24],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{25:[2,25],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{25:[2,26],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,68:[1,129]},o($Vp,[2,55]),{16:[1,130]},o($Vo,[2,51]),{16:[1,131]},{16:[2,70],77:[1,132]},o($VP,[2,68],{35:[1,133]}),o($Vp,[2,58]),o($Vp,[2,61]),{21:$Vq,31:$Vr,78:134},{10:135,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{10:136,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($Vp,[2,63]),{10:59,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,71:137,72:$Vc,75:$Vd},{8:140,9:$VQ,11:139,12:138},{4:143,6:3,7:142,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{16:[1,144]},{4:143,6:3,7:145,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{25:[2,16]},{43:$Vt,44:[1,146],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($VR,[2,30],{48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VR,[2,31],{48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VS,[2,32],{50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VS,[2,33],{50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,34],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,35],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,36],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,37],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,38],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,39],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,40],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VT,[2,41],{58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VU,[2,42],{60:$VI,61:$VJ,62:$VK}),o($VU,[2,43],{60:$VI,61:$VJ,62:$VK}),o($Vo,[2,44]),o($Vo,[2,45]),o($Vo,[2,46]),o([14,15,16,18,20,21,25,26,29,31,32,33,35,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,72,73,75,77],[2,53]),o($Vp,[2,56]),{21:[1,148],31:$V7,67:$Va,70:147,72:$Vc,75:$Vd},{16:$VL,21:$VM,22:149,76:97},{10:150,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($VN,[2,74]),o($VN,[2,76],{43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VN,[2,77],{43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VO,[2,72]),{17:[1,151]},{13:[1,152],17:[2,9]},o($VV,[2,7],{8:140,11:153,9:$VQ}),{10:154,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{19:[1,155]},o([9,13,17,19,23,28,79,80],[2,4]),{4:143,6:3,7:156,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{27:157,28:[1,158],79:$VW,80:$VX},{10:161,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($Vp,[2,54]),o($Vp,$Vl),{16:[2,69]},o($VP,[2,67],{43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($Vs,[2,10]),{4:143,6:3,7:162,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($VV,[2,6]),{4:143,6:3,7:163,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o($Vs,[2,11]),{23:[1,164]},{28:[1,165]},o($Vs,[2,15]),{15:[1,166]},{4:143,6:3,7:167,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},o([14,15,16,18,20,21,25,26,29,31,32,33,44,67,68,69,72,73,75,77],[2,28],{43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{17:[2,8]},o([9,13,17],[2,5]),o($Vs,[2,12]),o($Vs,[2,14]),{10:168,15:$V1,21:$Vf,31:$V7,34:38,42:36,45:$Vg,59:$Vh,63:34,64:$Vi,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{28:[2,79]},{16:[1,169],43:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{4:143,6:3,7:170,14:$V0,15:$V1,18:$V2,20:$V3,21:$V4,24:7,26:$V5,29:$V6,31:$V7,32:$V8,33:$V9,34:12,42:14,65:15,67:$Va,69:$Vb,70:18,72:$Vc,75:$Vd},{27:171,79:$VW,80:$VX},{28:[2,78]}],
defaultActions: {10:[2,17],14:[2,27],23:[2,1],41:[2,21],42:[2,22],110:[2,16],149:[2,69],162:[2,8],167:[2,79],171:[2,78]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 75
break;
case 2:return 31
break;
case 3:return "$"
break;
case 4:return "@"
break;
case 5:return "import"
break;
case 6:return "from"
break;
case 7:return "endfunction"
break;
case 8:return "endwhile"
break;
case 9:return "endfor"
break;
case 10:return "endswitch"
break;
case 11:return "endif"
break;
case 12:return "function"
break;
case 13:return "continue"
break;
case 14:return "typeof"
break;
case 15:return "class"
break;
case 16:return 'const'
break;
case 17:return 79
break;
case 18:return 26
break;
case 19:return 80
break;
case 20:return "case"
break;
case 21:return 13
break;
case 22:return 33
break;
case 23:return 'yield'
break;
case 24:return 18
break;
case 25:return 14
break;
case 26:return 'break'
break;
case 27:return 'for'
break;
case 28:return 'var'
break;
case 29:return 'of'
break;
case 30:return 77
break;
case 31:return 25
break;
case 32:return 45
break;
case 33:return 66
break;
case 34:return 44
break;
case 35:return 48
break;
case 36:return 49
break;
case 37:return 46
break;
case 38:return 47
break;
case 39:return 56
break;
case 40:return 57
break;
case 41:return 54
break;
case 42:return 55
break;
case 43:return 51
break;
case 44:return 50
break;
case 45:return "!"
break;
case 46:return 35
break;
case 47:return 62
break;
case 48:return 40
break;
case 49:return 60
break;
case 50:return 41
break;
case 51:return 61
break;
case 52:return 39
break;
case 53:return 37
break;
case 54:return 59
break;
case 55:return 36
break;
case 56:return 38
break;
case 57:return 58
break;
case 58:return '^'
break;
case 59:return 72
break;
case 60:return 73
break;
case 61:return 67
break;
case 62:return 68
break;
case 63:return 43
break;
case 64:return 15
break;
case 65:return 16
break;
case 66:return 53
break;
case 67:return 52
break;
case 68:return 21
break;
case 69:return 5
break;
case 70:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:@)/,/^(?:import\b)/,/^(?:from\b)/,/^(?:endfunction\b)/,/^(?:endwhile\b)/,/^(?:endfor\b)/,/^(?:endswitch\b)/,/^(?:endif\b)/,/^(?:function\b)/,/^(?:continue\b)/,/^(?:typeof\b)/,/^(?:class\b)/,/^(?:const\b)/,/^(?:elseif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:case\b)/,/^(?:otherwise\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:switch\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:!)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:\()/,/^(?:\))/,/^(?:instanceof\b)/,/^(?:in\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = octave_parser;
exports.Parser = octave_parser.Parser;
exports.parse = function () { return octave_parser.parse.apply(octave_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}