/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var scala_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,15],$V2=[1,20],$V3=[1,11],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,13],$V8=[1,17],$V9=[1,19],$Va=[1,21],$Vb=[1,22],$Vc=[5,8,9,10,20,31,34,37,45,53,76,78,79],$Vd=[5,8,9,10,12,20,31,34,37,45,53,76,78,79,81],$Ve=[1,42],$Vf=[1,38],$Vg=[1,32],$Vh=[1,34],$Vi=[1,37],$Vj=[14,73],$Vk=[2,75],$Vl=[5,8,9,10,12,20,30,31,34,37,45,53,76,78,79,81],$Vm=[1,52],$Vn=[1,51],$Vo=[1,56],$Vp=[5,8,9,10,12,14,16,20,30,31,34,36,37,45,51,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,76,78,79,81,85],$Vq=[2,76],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[5,8,9,10,12,16,20,30,31,34,37,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,78,79,81,85],$VH=[5,8,9,10,12,16,20,30,31,34,36,37,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,78,79,81,85],$VI=[5,8,9,10,12,16,20,30,31,34,36,37,45,51,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,78,79,81,85],$VJ=[12,85],$VK=[1,101],$VL=[1,105],$VM=[1,109],$VN=[2,88],$VO=[1,133],$VP=[1,135],$VQ=[1,134],$VR=[1,151],$VS=[5,8,9,10,12,16,20,30,31,34,37,45,53,55,56,57,58,59,60,61,62,74,76,78,79,81,85],$VT=[5,8,9,10,12,16,20,30,31,34,37,45,53,55,56,57,58,59,60,61,62,63,64,65,74,76,78,79,81,85],$VU=[5,8,9,10,12,16,20,30,31,34,37,45,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,74,76,78,79,81,85],$VV=[16,22,85],$VW=[1,175],$VX=[12,81],$VY=[9,10,20,31,34,37,45,53,76,78,79],$VZ=[12,20];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"class":8,"IDENTIFIER":9,"{":10,"class_statements":11,"}":12,"extends":13,"(":14,"parameters":15,")":16,"initialize_var1":17,"class_statements_":18,"class_statement":19,"def":20,":":21,"=":22,"statements":23,"initialize_var_":24,"initialize_var":25,"statements_":26,"statements_without_vars":27,"initialize_vars":28,"statement_with_semicolon":29,";":30,"while":31,"e":32,"bracket_statements":33,"for":34,"dot_expr":35,"<-":36,"if":37,"elif":38,"case_statement":39,"parentheses_expr":40,"=>":41,"case_statements_":42,"case_statements":43,"_":44,"return":45,"access_array":46,"+=":47,"-=":48,"*=":49,"/=":50,".":51,"function_call":52,"var":53,"type":54,"or":55,"and":56,"<=":57,"<":58,">=":59,"==":60,"!=":61,">":62,"+":63,"-":64,"..":65,"*":66,"/":67,"%":68,"^":69,"not_expr":70,"!":71,"parentheses_expr_":72,"[":73,"]":74,"exprs":75,"Array":76,"key_values":77,"NUMBER":78,"STRING_LITERAL":79,"function":80,"end":81,"types":82,"->":83,"parameter":84,",":85,"else":86,"identifiers":87,"key_value":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"class",9:"IDENTIFIER",10:"{",12:"}",13:"extends",14:"(",16:")",20:"def",21:":",22:"=",30:";",31:"while",34:"for",36:"<-",37:"if",41:"=>",44:"_",45:"return",47:"+=",48:"-=",49:"*=",50:"/=",51:".",53:"var",55:"or",56:"and",57:"<=",58:"<",59:">=",60:"==",61:"!=",62:">",63:"+",64:"-",65:"..",66:"*",67:"/",68:"%",69:"^",71:"!",73:"[",74:"]",76:"Array",78:"NUMBER",79:"STRING_LITERAL",80:"function",81:"end",83:"->",85:",",86:"else"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,5],[6,7],[6,8],[6,1],[11,1],[18,2],[18,1],[19,11],[19,9],[19,7],[17,1],[25,1],[26,1],[26,2],[27,2],[27,1],[28,2],[28,1],[23,1],[7,1],[7,2],[7,5],[7,9],[7,6],[7,5],[7,11],[39,3],[42,2],[42,1],[43,4],[43,1],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[24,6],[24,4],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[70,2],[70,1],[35,3],[35,1],[46,4],[52,3],[52,4],[72,3],[72,4],[72,3],[72,1],[72,1],[72,1],[40,6],[40,3],[40,1],[40,1],[40,1],[54,1],[54,4],[54,5],[84,3],[15,3],[15,1],[15,0],[75,3],[75,1],[82,3],[82,1],[38,9],[38,4],[87,3],[87,1],[77,3],[77,1],[88,3],[33,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 21:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 11: case 20: case 22: case 33: case 67: case 87:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["class_extends","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["scala_class","public",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 8:
this.$ = ["semicolon",$$[$0]]
break;
case 9:
this.$ = ["class_statements",$$[$0]]
break;
case 10: case 19: case 32:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 12:
this.$ = ["instance_method","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-1]];
break;
case 13:
this.$ = ["instance_method","public","Object",$$[$0-7],$$[$0-5],$$[$0-1]];
break;
case 14:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],["statements",[$$[$0]]]];
break;
case 15:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 16:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 18:
this.$ = [["lexically_scoped_vars",$$[$0-1],["statements",$$[$0]]]]
break;
case 23:
this.$ = ["statements",$$[$0]]
break;
case 24:
this.$ = ["semicolon",$$[$0]];
break;
case 25:
this.$ = ["semicolon",$$[$0-1]];
break;
case 26:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 28:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 29:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["function","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-1]];
break;
case 31:
this.$ = ["case",$$[$0-2],["statements",[$$[$0]]]]
break;
case 34:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 36:
this.$ = ["return",$$[$0]];
break;
case 37: case 38:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 39: case 40: case 41: case 42: case 49: case 50: case 51: case 52: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 43:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 45:
this.$ = [$$[$0-2],$$[$0-4],$$[$0]];
break;
case 46:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 47:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 48:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 62:
this.$ = ["-",$$[$0]];
break;
case 64:
this.$ = ["!", [".",$$[$0]]];
break;
case 65:
this.$ = [".", $$[$0]];
break;
case 66: case 86: case 89: case 91: case 95:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 68:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 69:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 70:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 71:
this.$ = ["initializer_list","Object",[]];
break;
case 72:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 73:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 74: case 75: case 76:
this.$ = yytext;
break;
case 77:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 78:
this.$ = ["parentheses",$$[$0-1]];
break;
case 83:
this.$ = [$$[$0-1],"[]"]
break;
case 84:
this.$ = ["function_type",$$[$0-3],$$[$0]]
break;
case 85:
this.$ = [$$[$0],$$[$0-2]];
break;
case 88:
this.$ = [];
break;
case 90: case 92: case 96: case 98:
this.$ = [$$[$0]];
break;
case 93:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 94:
this.$ = ["else",$$[$0-1]];
break;
case 97:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 99:
this.$ = [$$[$0-2],$$[$0]]
break;
case 100:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,9:$V1,10:$V2,17:6,20:$V3,24:12,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},{1:[3]},{5:[1,23],6:24,7:4,8:$V0,9:$V1,10:$V2,17:6,20:$V3,24:12,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),{9:[1,25]},o($Vc,[2,8]),o($Vd,[2,24],{30:[1,26]}),{14:[1,27]},{14:[1,28]},{14:[1,29]},{9:[1,30]},o($Vc,[2,15]),{9:$Ve,10:$V2,14:$Vf,32:31,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{22:[1,43]},o($Vj,$Vk,{22:[1,44],47:[1,45],48:[1,46],49:[1,47],50:[1,48],51:[1,49]}),o($Vl,[2,44]),{9:[1,50]},{14:$Vm,73:$Vn},{14:[1,53]},{77:54,79:$Vo,88:55},o($Vp,[2,74]),o($Vp,$Vq),{1:[2,1]},o($Vc,[2,2]),{10:[1,57],13:[1,58],14:[1,59]},o($Vd,[2,25]),{9:$Ve,10:$V2,14:$Vf,32:60,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,35:61,40:36,46:39,52:40,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:62,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{14:[1,63]},o($Vl,[2,36],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),{9:$Ve,10:$V2,14:$Vf,32:79,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},o($VG,[2,63]),{9:$Ve,10:$V2,14:$Vf,35:80,40:36,46:39,52:40,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},o($VG,[2,65]),o($VH,[2,67],{51:[1,81]}),{14:[1,82]},{9:$Ve,10:$V2,14:$Vf,32:83,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},o($VI,[2,79]),o($VI,[2,80]),o($VI,[2,81],{14:$Vm,73:$Vn}),o($Vp,$Vk),{9:$Ve,10:$V2,14:$Vf,32:84,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:85,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:86,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:87,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:88,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:89,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,35:90,40:36,46:39,52:40,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{21:[1,91],22:[1,92]},{9:$Ve,10:$V2,14:$Vf,32:93,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,16:[1,94],32:96,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,75:95,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,16:[1,97],32:96,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,75:98,76:$V9,78:$Va,79:$Vb,80:$Vi},{12:[1,99],85:[1,100]},o($VJ,[2,98]),{22:$VK},{11:102,18:103,19:104,20:$VL},{9:[1,106]},{9:$VM,15:107,16:$VN,84:108},{16:[1,110],55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF},{36:[1,111]},{16:[1,112],55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF},{9:$VM,15:113,16:$VN,84:108},{9:$Ve,10:$V2,14:$Vf,32:114,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:115,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:116,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:117,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:118,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:119,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:120,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:121,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:122,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:123,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:124,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:125,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:126,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:127,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$Ve,10:$V2,14:$Vf,32:128,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},o($VG,[2,62]),o($VG,[2,64]),{9:$Ve,10:$V2,14:$Vf,35:129,40:36,46:39,52:40,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:$VM,15:130,16:$VN,84:108},{16:[1,131],55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF},o($Vl,[2,37],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($Vl,[2,38],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($Vl,[2,39],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($Vl,[2,40],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($Vl,[2,41],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($Vl,[2,42],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($Vl,[2,43]),{9:$VO,14:$VP,54:132,76:$VQ},{9:$Ve,10:$V2,14:$Vf,32:136,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,74:[1,137]},o($VI,[2,69]),{16:[1,138]},{16:[2,90],55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,85:[1,139]},o($Vp,[2,71]),{16:[1,140]},o($Vp,[2,73]),{79:$Vo,88:141},{9:$Ve,10:$V2,14:$Vf,32:142,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{12:[1,143]},{12:[2,9]},{12:[2,11],18:144,19:104,20:$VL},{9:[1,145]},{10:[1,146]},{16:[1,147]},{16:[2,87],85:[1,148]},{21:[1,149]},{10:$VR,33:150},{9:$Ve,10:$V2,14:$Vf,35:152,40:36,46:39,52:40,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{10:$VR,33:153},{16:[1,154]},o([5,8,9,10,12,16,20,30,31,34,37,45,53,55,74,76,78,79,81,85],[2,47],{56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o([5,8,9,10,12,16,20,30,31,34,37,45,53,55,56,74,76,78,79,81,85],[2,48],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VS,[2,49],{63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VS,[2,50],{63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VS,[2,51],{63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VS,[2,52],{63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VS,[2,53],{63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VS,[2,54],{63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,55],{66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,56],{66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,57],{66:$VC,67:$VD,68:$VE,69:$VF}),o($VU,[2,58],{69:$VF}),o($VU,[2,59],{69:$VF}),o($VU,[2,60],{69:$VF}),o($VG,[2,61]),o($VH,[2,66]),{16:[1,155]},o($VI,[2,78]),{22:[1,156]},o($VV,[2,82]),{73:[1,157]},{9:$VO,14:$VP,54:159,76:$VQ,82:158},o($Vc,[2,46],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o([5,8,9,10,12,16,20,22,30,31,34,36,37,45,51,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,78,79,81,85],[2,68]),o($VI,[2,70]),{9:$Ve,10:$V2,14:$Vf,32:96,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,75:160,76:$V9,78:$Va,79:$Vb,80:$Vi},o($Vp,[2,72]),o($VJ,[2,97]),o($VJ,[2,99],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($Vc,[2,5]),{12:[2,10]},{14:[1,161]},{11:162,18:103,19:104,20:$VL},{10:[1,163]},{9:$VM,15:164,16:$VN,84:108},{9:[1,165]},o($Vd,[2,26]),{7:170,9:$V1,10:$V2,20:$V3,23:166,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},{16:[1,173]},o($Vd,[2,29],{38:174,86:$VW}),{21:[1,176]},{7:170,9:$V1,10:$V2,20:$V3,23:177,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},{9:$Ve,10:$V2,14:$Vf,32:178,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{9:[1,179]},{16:[1,180]},{16:[2,92],85:[1,181]},{16:[2,89]},{9:$VM,15:182,16:$VN,84:108},{12:[1,183]},{11:184,18:103,19:104,20:$VL},{16:[2,86]},o([16,85],[2,85]),{12:[1,185]},o($VX,[2,23]),o($VX,[2,17]),{7:170,9:$V1,10:$V2,20:$V3,24:172,25:187,27:186,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},o($VX,[2,20],{29:7,46:14,52:16,72:18,7:170,27:188,9:$V1,10:$V2,20:$V3,31:$V4,34:$V5,37:$V6,45:$V7,76:$V9,78:$Va,79:$Vb}),o($VY,[2,22]),o($VY,[2,16]),{10:[1,189]},o($Vd,[2,28]),{10:[1,191],37:[1,190]},{9:[1,192]},{81:[1,193]},o($Vc,[2,45],{55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),{74:[1,194]},{83:[1,195]},{9:$VO,14:$VP,54:159,76:$VQ,82:196},{16:[1,197]},o($Vc,[2,6]),{12:[1,198]},o([5,8,9,10,12,20,31,34,37,45,53,76,78,79,81,86],[2,100]),o($VX,[2,18]),o($VY,[2,21]),o($VX,[2,19]),{7:170,9:$V1,10:$V2,20:$V3,23:199,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},{14:[1,200]},{7:170,9:$V1,10:$V2,20:$V3,23:201,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},{22:[1,202]},o($VI,[2,77]),o($VV,[2,83]),{9:$VO,14:$VP,54:203,76:$VQ},{16:[2,91]},{21:[1,204],22:[1,205]},o($Vc,[2,7]),{12:[1,206]},{9:$Ve,10:$V2,14:$Vf,32:207,35:35,40:36,46:39,52:40,64:$Vg,70:33,71:$Vh,72:41,76:$V9,78:$Va,79:$Vb,80:$Vi},{12:[1,208]},{10:[1,209]},o($VV,[2,84]),{9:[1,210]},{7:212,9:$V1,10:[1,211],20:$V3,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,72:18,76:$V9,78:$Va,79:$Vb},o($Vd,[2,27]),{16:[1,213],55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF},o($Vd,[2,94]),{7:170,9:$V1,10:$V2,20:$V3,23:214,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},{22:[1,215]},{7:170,9:$V1,10:$V2,20:$V3,23:216,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,77:54,78:$Va,79:[1,217],88:55},o($VZ,[2,14]),{10:[1,218]},{12:[1,219]},{10:[1,220]},{12:[1,221]},o($Vj,$Vq,{22:$VK}),{7:170,9:$V1,10:$V2,20:$V3,23:222,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},o($Vd,[2,30]),{7:170,9:$V1,10:$V2,20:$V3,23:223,24:172,25:171,26:167,27:168,28:169,29:7,31:$V4,34:$V5,37:$V6,45:$V7,46:14,52:16,53:$V8,72:18,76:$V9,78:$Va,79:$Vb},o($VZ,[2,13]),{12:[1,224]},{12:[1,225]},{38:226,86:$VW},o($VZ,[2,12]),o($Vd,[2,93])],
defaultActions: {23:[2,1],103:[2,9],144:[2,10],160:[2,89],164:[2,86],196:[2,91]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 78
break;
case 2:return 79
break;
case 3:return "$"
break;
case 4:return "def"
break;
case 5:return "end"
break;
case 6:return 76
break;
case 7:return 8
break;
case 8:return 37
break;
case 9:return 86
break;
case 10:return 45
break;
case 11:return 31
break;
case 12:return 'match'
break;
case 13:return 34
break;
case 14:return 53
break;
case 15:return 'of'
break;
case 16:return 'not'
break;
case 17:return 85
break;
case 18:return 65
break;
case 19:return 51
break;
case 20:return 21
break;
case 21:return 30
break;
case 22:return 56
break;
case 23:return 55
break;
case 24:return 59
break;
case 25:return 62
break;
case 26:return 36
break;
case 27:return 57
break;
case 28:return 58
break;
case 29:return 61
break;
case 30:return 41
break;
case 31:return 60
break;
case 32:return 22
break;
case 33:return 49
break;
case 34:return 66
break;
case 35:return 50
break;
case 36:return 67
break;
case 37:return 68
break;
case 38:return 48
break;
case 39:return 64
break;
case 40:return 47
break;
case 41:return 63
break;
case 42:return 69
break;
case 43:return 10
break;
case 44:return 12
break;
case 45:return 73
break;
case 46:return 74
break;
case 47:return 14
break;
case 48:return 16
break;
case 49:return 44
break;
case 50:return 'pairs'
break;
case 51:return 'in'
break;
case 52:return 'do'
break;
case 53:return 9
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:Array\b)/,/^(?:class\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:match\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<-)/,/^(?:<=)/,/^(?:<)/,/^(?:!=)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = scala_parser;
exports.Parser = scala_parser.Parser;
exports.parse = function () { return scala_parser.parse.apply(scala_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}