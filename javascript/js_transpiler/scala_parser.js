/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var scala_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,7],$V2=[1,8],$V3=[1,17],$V4=[1,9],$V5=[1,10],$V6=[1,13],$V7=[1,11],$V8=[1,16],$V9=[1,18],$Va=[1,19],$Vb=[5,8,16,21,24,26,28,29,39,70,72,73],$Vc=[5,8,16,21,24,25,26,28,29,39,70,72,73,75],$Vd=[1,34],$Ve=[1,38],$Vf=[1,28],$Vg=[1,30],$Vh=[1,33],$Vi=[2,64],$Vj=[5,8,15,16,21,24,25,26,28,29,39,70,72,73,75],$Vk=[1,47],$Vl=[1,46],$Vm=[1,51],$Vn=[5,8,15,16,17,19,21,23,24,25,26,28,29,39,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,70,72,73,75,79],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[5,8,15,16,19,21,24,25,26,28,29,39,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,75,79],$VE=[5,8,15,16,19,21,23,24,25,26,28,29,39,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,75,79],$VF=[5,8,15,16,19,21,23,24,25,26,28,29,39,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,75,79],$VG=[25,79],$VH=[2,77],$VI=[1,97],$VJ=[1,123],$VK=[5,8,15,16,19,21,24,25,26,28,29,39,47,49,50,51,52,53,54,55,56,68,70,72,73,75,79],$VL=[5,8,15,16,19,21,24,25,26,28,29,39,47,49,50,51,52,53,54,55,56,57,58,59,68,70,72,73,75,79],$VM=[5,8,15,16,19,21,24,25,26,28,29,39,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,68,70,72,73,75,79],$VN=[1,137],$VO=[1,140],$VP=[25,75],$VQ=[16,21,24,26,28,29,39,47,70,72,73],$VR=[1,164],$VS=[1,162],$VT=[1,163],$VU=[19,32,79];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"initialize_var1":8,"statements_":9,"statements_without_vars":10,"initialize_vars":11,"initialize_var":12,"statements":13,"statement_with_semicolon":14,";":15,"while":16,"(":17,"e":18,")":19,"bracket_statements":20,"for":21,"dot_expr":22,"<-":23,"{":24,"}":25,"if":26,"elif":27,"def":28,"IDENTIFIER":29,"parameters":30,":":31,"=":32,"case_statement":33,"parentheses_expr":34,"=>":35,"case_statements_":36,"case_statements":37,"_":38,"return":39,"access_array":40,"+=":41,"-=":42,"*=":43,"/=":44,".":45,"function_call":46,"var":47,"type":48,"or":49,"and":50,"<=":51,"<":52,">=":53,"==":54,"!=":55,">":56,"+":57,"-":58,"..":59,"*":60,"/":61,"%":62,"^":63,"not_expr":64,"!":65,"parentheses_expr_":66,"[":67,"]":68,"exprs":69,"Array":70,"key_values":71,"NUMBER":72,"STRING_LITERAL":73,"function":74,"end":75,"types":76,"->":77,"parameter":78,",":79,"else":80,"identifiers":81,"key_value":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"initialize_var1",15:";",16:"while",17:"(",19:")",21:"for",23:"<-",24:"{",25:"}",26:"if",28:"def",29:"IDENTIFIER",31:":",32:"=",35:"=>",38:"_",39:"return",41:"+=",42:"-=",43:"*=",44:"/=",45:".",47:"var",49:"or",50:"and",51:"<=",52:"<",53:">=",54:"==",55:"!=",56:">",57:"+",58:"-",59:"..",60:"*",61:"/",62:"%",63:"^",65:"!",67:"[",68:"]",70:"Array",72:"NUMBER",73:"STRING_LITERAL",74:"function",75:"end",77:"->",79:",",80:"else"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,1],[9,2],[10,2],[10,1],[11,2],[11,1],[13,1],[7,1],[7,2],[7,5],[7,9],[7,6],[7,5],[7,11],[33,3],[36,2],[36,1],[37,4],[37,1],[14,2],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,1],[12,6],[12,4],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,1],[64,2],[64,1],[22,3],[22,1],[40,4],[46,3],[46,4],[66,3],[66,4],[66,3],[66,1],[66,1],[66,1],[34,6],[34,3],[34,1],[34,1],[34,1],[48,1],[48,4],[48,5],[78,3],[30,3],[30,1],[30,0],[69,3],[69,1],[76,3],[76,1],[27,9],[27,4],[81,3],[81,1],[71,3],[71,1],[82,3],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 10:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 9: case 11: case 22: case 56: case 76:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = ["semicolon",$$[$0]]
break;
case 7:
this.$ = [["lexically_scoped_vars",$$[$0-1],$$[$0]]]
break;
case 8: case 21:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 12:
this.$ = ["statements",$$[$0]]
break;
case 13:
this.$ = ["semicolon",$$[$0]];
break;
case 14:
this.$ = ["semicolon",$$[$0-1]];
break;
case 15:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 17:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 18:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["function","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-1]];
break;
case 20:
this.$ = ["case",$$[$0-2],["statements",[$$[$0]]]]
break;
case 23:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 25:
this.$ = ["return",$$[$0]];
break;
case 26: case 27:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 28: case 29: case 30: case 31: case 38: case 39: case 40: case 41: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 34:
this.$ = ["initialize_var",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 35:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 37:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 51:
this.$ = ["-",$$[$0]];
break;
case 53:
this.$ = ["!", [".",$$[$0]]];
break;
case 54:
this.$ = [".", $$[$0]];
break;
case 55: case 75: case 78: case 80: case 84:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 57:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 58:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 59:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 60:
this.$ = ["initializer_list","Object",[]];
break;
case 61:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 62:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 63: case 64: case 65:
this.$ = yytext;
break;
case 66:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 67:
this.$ = ["parentheses",$$[$0-1]];
break;
case 72:
this.$ = [$$[$0-1],"[]"]
break;
case 73:
this.$ = ["function_type",$$[$0-3],$$[$0]]
break;
case 74:
this.$ = [$$[$0],$$[$0-2]];
break;
case 77:
this.$ = [];
break;
case 79: case 81: case 85: case 87:
this.$ = [$$[$0]];
break;
case 82:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 83:
this.$ = ["else",$$[$0-1]];
break;
case 86:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 88:
this.$ = [$$[$0-2],$$[$0]]
break;
case 89:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,66:15,70:$V8,72:$V9,73:$Va},{1:[3]},{5:[1,20],6:21,7:4,8:$V0,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,66:15,70:$V8,72:$V9,73:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vc,[2,13],{15:[1,22]}),{17:[1,23]},{17:[1,24]},{17:[1,25]},{29:[1,26]},{17:$Vd,18:27,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{32:[1,39]},o([17,67],$Vi,{32:[1,40],41:[1,41],42:[1,42],43:[1,43],44:[1,44],45:[1,45]}),o($Vj,[2,33]),{17:$Vk,67:$Vl},{17:[1,48]},{71:49,73:$Vm,82:50},o($Vn,[2,63]),o($Vn,[2,65]),{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,14]),{17:$Vd,18:52,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,22:53,24:$V3,29:$Ve,34:32,40:35,46:36,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:54,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:[1,55]},o($Vj,[2,25],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),{17:$Vd,18:71,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},o($VD,[2,52]),{17:$Vd,22:72,24:$V3,29:$Ve,34:32,40:35,46:36,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},o($VD,[2,54]),o($VE,[2,56],{45:[1,73]}),{17:[1,74]},{17:$Vd,18:75,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},o($VF,[2,68]),o($VF,[2,69]),o($VF,[2,70],{17:$Vk,67:$Vl}),o($Vn,$Vi),{17:$Vd,18:76,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:77,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:78,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:79,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:80,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:81,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,22:82,24:$V3,29:$Ve,34:32,40:35,46:36,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:83,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:86,19:[1,84],22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,69:85,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:86,19:[1,87],22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,69:88,70:$V8,72:$V9,73:$Va,74:$Vh},{25:[1,89],79:[1,90]},o($VG,[2,87]),{32:[1,91]},{19:[1,92],49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{23:[1,93]},{19:[1,94],49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{19:$VH,29:$VI,30:95,78:96},{17:$Vd,18:98,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:99,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:100,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:101,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:102,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:103,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:104,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:105,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:106,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:107,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:108,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:109,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:110,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:111,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{17:$Vd,18:112,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},o($VD,[2,51]),o($VD,[2,53]),{17:$Vd,22:113,24:$V3,29:$Ve,34:32,40:35,46:36,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{19:$VH,29:$VI,30:114,78:96},{19:[1,115],49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($Vj,[2,26],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vj,[2,27],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vj,[2,28],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vj,[2,29],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vj,[2,30],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vj,[2,31],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vj,[2,32]),{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,68:[1,116]},o($VF,[2,58]),{19:[1,117]},{19:[2,79],49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,79:[1,118]},o($Vn,[2,60]),{19:[1,119]},o($Vn,[2,62]),{73:$Vm,82:120},{17:$Vd,18:121,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{20:122,24:$VJ},{17:$Vd,22:124,24:$V3,29:$Ve,34:32,40:35,46:36,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{20:125,24:$VJ},{19:[1,126]},{19:[2,76],79:[1,127]},{31:[1,128]},o([5,8,15,16,19,21,24,25,26,28,29,39,47,49,68,70,72,73,75,79],[2,36],{50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o([5,8,15,16,19,21,24,25,26,28,29,39,47,49,50,68,70,72,73,75,79],[2,37],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VK,[2,38],{57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VK,[2,39],{57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VK,[2,40],{57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VK,[2,41],{57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VK,[2,42],{57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VK,[2,43],{57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VL,[2,44],{60:$Vz,61:$VA,62:$VB,63:$VC}),o($VL,[2,45],{60:$Vz,61:$VA,62:$VB,63:$VC}),o($VL,[2,46],{60:$Vz,61:$VA,62:$VB,63:$VC}),o($VM,[2,47],{63:$VC}),o($VM,[2,48],{63:$VC}),o($VM,[2,49],{63:$VC}),o($VD,[2,50]),o($VE,[2,55]),{19:[1,129]},o($VF,[2,67]),o([5,8,15,16,19,21,23,24,25,26,28,29,32,39,45,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,70,72,73,75,79],[2,57]),o($VF,[2,59]),{17:$Vd,18:86,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,69:130,70:$V8,72:$V9,73:$Va,74:$Vh},o($Vn,[2,61]),o($VG,[2,86]),o($VG,[2,88],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vc,[2,15]),{7:135,9:132,10:133,11:134,12:136,13:131,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,47:$VN,66:15,70:$V8,72:$V9,73:$Va},{19:[1,138]},o($Vc,[2,18],{27:139,80:$VO}),{31:[1,141]},{19:$VH,29:$VI,30:142,78:96},{29:[1,143]},{7:135,9:132,10:133,11:134,12:136,13:144,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,47:$VN,66:15,70:$V8,72:$V9,73:$Va},{19:[2,78]},{25:[1,145]},o($VP,[2,12]),o($VP,[2,6]),{7:135,10:146,12:147,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,47:$VN,66:15,70:$V8,72:$V9,73:$Va},o($VP,[2,9],{14:6,40:12,46:14,66:15,7:135,10:148,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,70:$V8,72:$V9,73:$Va}),o($VQ,[2,11]),{29:[1,149]},{24:[1,150]},o($Vc,[2,17]),{24:[1,152],26:[1,151]},{29:[1,153]},{19:[2,75]},o([19,79],[2,74]),{75:[1,154]},o([5,8,16,21,24,25,26,28,29,39,70,72,73,75,80],[2,89]),o($VP,[2,7]),o($VQ,[2,10]),o($VP,[2,8]),{31:[1,155],32:[1,156]},{7:135,9:132,10:133,11:134,12:136,13:157,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,47:$VN,66:15,70:$V8,72:$V9,73:$Va},{17:[1,158]},{7:135,9:132,10:133,11:134,12:136,13:159,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,47:$VN,66:15,70:$V8,72:$V9,73:$Va},{32:[1,160]},o($VF,[2,66]),{17:$VR,29:$VS,48:161,70:$VT},{17:$Vd,18:165,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{25:[1,166]},{17:$Vd,18:167,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{25:[1,168]},{24:[1,169]},{32:[1,170]},o($VU,[2,71]),{67:[1,171]},{17:$VR,29:$VS,48:173,70:$VT,76:172},o($VQ,[2,35],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vc,[2,16]),{19:[1,174],49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($Vc,[2,83]),{7:135,9:132,10:133,11:134,12:136,13:175,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,47:$VN,66:15,70:$V8,72:$V9,73:$Va},{17:$Vd,18:176,22:31,24:$V3,29:$Ve,34:32,40:35,46:36,58:$Vf,64:29,65:$Vg,66:37,70:$V8,72:$V9,73:$Va,74:$Vh},{29:[1,177]},{19:[1,178]},{19:[2,81],79:[1,179]},{24:[1,180]},{25:[1,181]},o($VQ,[2,34],{49:$Vo,50:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),{68:[1,182]},{77:[1,183]},{17:$VR,29:$VS,48:173,70:$VT,76:184},{7:135,9:132,10:133,11:134,12:136,13:185,14:6,16:$V1,21:$V2,24:$V3,26:$V4,28:$V5,29:$V6,39:$V7,40:12,46:14,47:$VN,66:15,70:$V8,72:$V9,73:$Va},o($Vc,[2,19]),o($VU,[2,72]),{17:$VR,29:$VS,48:186,70:$VT},{19:[2,80]},{25:[1,187]},o($VU,[2,73]),{27:188,80:$VO},o($Vc,[2,82])],
defaultActions: {20:[2,1],130:[2,78],142:[2,75],184:[2,80]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 72
break;
case 2:return 73
break;
case 3:return "$"
break;
case 4:return "def"
break;
case 5:return "end"
break;
case 6:return 70
break;
case 7:return 26
break;
case 8:return 80
break;
case 9:return 39
break;
case 10:return 16
break;
case 11:return 'match'
break;
case 12:return 21
break;
case 13:return 47
break;
case 14:return 'of'
break;
case 15:return 'not'
break;
case 16:return 79
break;
case 17:return 59
break;
case 18:return 45
break;
case 19:return 31
break;
case 20:return 15
break;
case 21:return 50
break;
case 22:return 49
break;
case 23:return 53
break;
case 24:return 56
break;
case 25:return 23
break;
case 26:return 51
break;
case 27:return 52
break;
case 28:return 55
break;
case 29:return 35
break;
case 30:return 54
break;
case 31:return 32
break;
case 32:return 43
break;
case 33:return 60
break;
case 34:return 44
break;
case 35:return 61
break;
case 36:return 62
break;
case 37:return 42
break;
case 38:return 58
break;
case 39:return 41
break;
case 40:return 57
break;
case 41:return 63
break;
case 42:return 24
break;
case 43:return 25
break;
case 44:return 67
break;
case 45:return 68
break;
case 46:return 17
break;
case 47:return 19
break;
case 48:return 38
break;
case 49:return 'pairs'
break;
case 50:return 'in'
break;
case 51:return 'do'
break;
case 52:return 29
break;
case 53:return 5
break;
case 54:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:Array\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:match\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<-)/,/^(?:<=)/,/^(?:<)/,/^(?:!=)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = scala_parser;
exports.Parser = scala_parser.Parser;
exports.parse = function () { return scala_parser.parse.apply(scala_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}