/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var scala_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,19],$V3=[1,9],$V4=[1,10],$V5=[1,14],$V6=[1,12],$V7=[1,16],$V8=[1,18],$V9=[1,20],$Va=[1,21],$Vb=[5,17,22,25,27,29,30,40,48,71,73,74],$Vc=[5,17,22,25,26,27,29,30,40,48,71,73,74,76],$Vd=[1,36],$Ve=[1,40],$Vf=[1,30],$Vg=[1,32],$Vh=[1,35],$Vi=[2,66],$Vj=[5,16,17,22,25,26,27,29,30,40,48,71,73,74,76],$Vk=[1,50],$Vl=[1,49],$Vm=[1,54],$Vn=[5,16,17,18,20,22,24,25,26,27,29,30,40,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,71,73,74,76,80],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[5,16,17,20,22,25,26,27,29,30,40,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,73,74,76,80],$VE=[5,16,17,20,22,24,25,26,27,29,30,40,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,73,74,76,80],$VF=[5,16,17,20,22,24,25,26,27,29,30,40,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,73,74,76,80],$VG=[26,80],$VH=[2,79],$VI=[1,102],$VJ=[1,124],$VK=[1,122],$VL=[1,123],$VM=[1,133],$VN=[5,16,17,20,22,25,26,27,29,30,40,48,50,51,52,53,54,55,56,57,69,71,73,74,76,80],$VO=[5,16,17,20,22,25,26,27,29,30,40,48,50,51,52,53,54,55,56,57,58,59,60,69,71,73,74,76,80],$VP=[5,16,17,20,22,25,26,27,29,30,40,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,69,71,73,74,76,80],$VQ=[20,33,80],$VR=[1,154],$VS=[26,76],$VT=[17,22,25,27,29,30,40,48,71,73,74];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"initialize_var1":8,"initialize_var_":9,"initialize_var":10,"statements_":11,"statements_without_vars":12,"initialize_vars":13,"statements":14,"statement_with_semicolon":15,";":16,"while":17,"(":18,"e":19,")":20,"bracket_statements":21,"for":22,"dot_expr":23,"<-":24,"{":25,"}":26,"if":27,"elif":28,"def":29,"IDENTIFIER":30,"parameters":31,":":32,"=":33,"case_statement":34,"parentheses_expr":35,"=>":36,"case_statements_":37,"case_statements":38,"_":39,"return":40,"access_array":41,"+=":42,"-=":43,"*=":44,"/=":45,".":46,"function_call":47,"var":48,"type":49,"or":50,"and":51,"<=":52,"<":53,">=":54,"==":55,"!=":56,">":57,"+":58,"-":59,"..":60,"*":61,"/":62,"%":63,"^":64,"not_expr":65,"!":66,"parentheses_expr_":67,"[":68,"]":69,"exprs":70,"Array":71,"key_values":72,"NUMBER":73,"STRING_LITERAL":74,"function":75,"end":76,"types":77,"->":78,"parameter":79,",":80,"else":81,"identifiers":82,"key_value":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:";",17:"while",18:"(",20:")",22:"for",24:"<-",25:"{",26:"}",27:"if",29:"def",30:"IDENTIFIER",32:":",33:"=",36:"=>",39:"_",40:"return",42:"+=",43:"-=",44:"*=",45:"/=",46:".",48:"var",50:"or",51:"and",52:"<=",53:"<",54:">=",55:"==",56:"!=",57:">",58:"+",59:"-",60:"..",61:"*",62:"/",63:"%",64:"^",66:"!",68:"[",69:"]",71:"Array",73:"NUMBER",74:"STRING_LITERAL",75:"function",76:"end",78:"->",80:",",81:"else"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[8,1],[10,1],[11,1],[11,2],[12,2],[12,1],[13,2],[13,1],[14,1],[7,1],[7,2],[7,5],[7,9],[7,6],[7,5],[7,11],[34,3],[37,2],[37,1],[38,4],[38,1],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[9,6],[9,4],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[65,2],[65,1],[23,3],[23,1],[41,4],[47,3],[47,4],[67,3],[67,4],[67,3],[67,1],[67,1],[67,1],[35,6],[35,3],[35,1],[35,1],[35,1],[49,1],[49,4],[49,5],[79,3],[31,3],[31,1],[31,0],[70,3],[70,1],[77,3],[77,1],[28,9],[28,4],[82,3],[82,1],[72,3],[72,1],[83,3],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 12:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 11: case 13: case 24: case 58: case 78:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = ["semicolon",$$[$0]]
break;
case 6:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 7:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 9:
this.$ = [["lexically_scoped_vars",$$[$0-1],["statements",$$[$0]]]]
break;
case 10: case 23:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 14:
this.$ = ["statements",$$[$0]]
break;
case 15:
this.$ = ["semicolon",$$[$0]];
break;
case 16:
this.$ = ["semicolon",$$[$0-1]];
break;
case 17:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 18:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 20:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["function","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-1]];
break;
case 22:
this.$ = ["case",$$[$0-2],["statements",[$$[$0]]]]
break;
case 25:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 27:
this.$ = ["return",$$[$0]];
break;
case 28: case 29:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 30: case 31: case 32: case 33: case 40: case 41: case 42: case 43: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 34:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 36:
this.$ = [$$[$0-2],$$[$0-4],$$[$0]];
break;
case 37:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 38:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 44:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ["-",$$[$0]];
break;
case 55:
this.$ = ["!", [".",$$[$0]]];
break;
case 56:
this.$ = [".", $$[$0]];
break;
case 57: case 77: case 80: case 82: case 86:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 59:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 60:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 61:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 62:
this.$ = ["initializer_list","Object",[]];
break;
case 63:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 64:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 65: case 66: case 67:
this.$ = yytext;
break;
case 68:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 69:
this.$ = ["parentheses",$$[$0-1]];
break;
case 74:
this.$ = [$$[$0-1],"[]"]
break;
case 75:
this.$ = ["function_type",$$[$0-3],$$[$0]]
break;
case 76:
this.$ = [$$[$0],$$[$0-2]];
break;
case 79:
this.$ = [];
break;
case 81: case 83: case 87: case 89:
this.$ = [$$[$0]];
break;
case 84:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 85:
this.$ = ["else",$$[$0-1]];
break;
case 88:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 90:
this.$ = [$$[$0-2],$$[$0]]
break;
case 91:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:11,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},{1:[3]},{5:[1,22],6:23,7:4,8:5,9:11,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vc,[2,15],{16:[1,24]}),{18:[1,25]},{18:[1,26]},{18:[1,27]},{30:[1,28]},o($Vb,[2,6]),{18:$Vd,19:29,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{33:[1,41]},o([18,68],$Vi,{33:[1,42],42:[1,43],43:[1,44],44:[1,45],45:[1,46],46:[1,47]}),o($Vj,[2,35]),{30:[1,48]},{18:$Vk,68:$Vl},{18:[1,51]},{72:52,74:$Vm,83:53},o($Vn,[2,65]),o($Vn,[2,67]),{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,16]),{18:$Vd,19:55,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,23:56,25:$V2,30:$Ve,35:34,41:37,47:38,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:57,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:[1,58]},o($Vj,[2,27],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),{18:$Vd,19:74,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},o($VD,[2,54]),{18:$Vd,23:75,25:$V2,30:$Ve,35:34,41:37,47:38,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},o($VD,[2,56]),o($VE,[2,58],{46:[1,76]}),{18:[1,77]},{18:$Vd,19:78,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},o($VF,[2,70]),o($VF,[2,71]),o($VF,[2,72],{18:$Vk,68:$Vl}),o($Vn,$Vi),{18:$Vd,19:79,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:80,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:81,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:82,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:83,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:84,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,23:85,25:$V2,30:$Ve,35:34,41:37,47:38,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{32:[1,86],33:[1,87]},{18:$Vd,19:88,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:91,20:[1,89],23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,70:90,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:91,20:[1,92],23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,70:93,71:$V8,73:$V9,74:$Va,75:$Vh},{26:[1,94],80:[1,95]},o($VG,[2,89]),{33:[1,96]},{20:[1,97],50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{24:[1,98]},{20:[1,99],50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{20:$VH,30:$VI,31:100,79:101},{18:$Vd,19:103,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:104,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:105,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:106,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:107,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:108,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:109,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:110,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:111,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:112,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:113,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:114,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:115,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:116,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{18:$Vd,19:117,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},o($VD,[2,53]),o($VD,[2,55]),{18:$Vd,23:118,25:$V2,30:$Ve,35:34,41:37,47:38,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{20:$VH,30:$VI,31:119,79:101},{20:[1,120],50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vj,[2,28],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($Vj,[2,29],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($Vj,[2,30],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($Vj,[2,31],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($Vj,[2,32],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($Vj,[2,33],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($Vj,[2,34]),{18:$VJ,30:$VK,49:121,71:$VL},{18:$Vd,19:125,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,69:[1,126]},o($VF,[2,60]),{20:[1,127]},{20:[2,81],50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,80:[1,128]},o($Vn,[2,62]),{20:[1,129]},o($Vn,[2,64]),{74:$Vm,83:130},{18:$Vd,19:131,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{21:132,25:$VM},{18:$Vd,23:134,25:$V2,30:$Ve,35:34,41:37,47:38,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{21:135,25:$VM},{20:[1,136]},{20:[2,78],80:[1,137]},{32:[1,138]},o([5,16,17,20,22,25,26,27,29,30,40,48,50,69,71,73,74,76,80],[2,38],{51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o([5,16,17,20,22,25,26,27,29,30,40,48,50,51,69,71,73,74,76,80],[2,39],{52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VN,[2,40],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VN,[2,41],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VN,[2,42],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VN,[2,43],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VN,[2,44],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VN,[2,45],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VO,[2,46],{61:$Vz,62:$VA,63:$VB,64:$VC}),o($VO,[2,47],{61:$Vz,62:$VA,63:$VB,64:$VC}),o($VO,[2,48],{61:$Vz,62:$VA,63:$VB,64:$VC}),o($VP,[2,49],{64:$VC}),o($VP,[2,50],{64:$VC}),o($VP,[2,51],{64:$VC}),o($VD,[2,52]),o($VE,[2,57]),{20:[1,139]},o($VF,[2,69]),{33:[1,140]},o($VQ,[2,73]),{68:[1,141]},{18:$VJ,30:$VK,49:143,71:$VL,77:142},o($Vb,[2,37],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o([5,16,17,20,22,24,25,26,27,29,30,33,40,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,73,74,76,80],[2,59]),o($VF,[2,61]),{18:$Vd,19:91,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,70:144,71:$V8,73:$V9,74:$Va,75:$Vh},o($Vn,[2,63]),o($VG,[2,88]),o($VG,[2,90],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($Vc,[2,17]),{7:149,9:151,10:150,11:146,12:147,13:148,14:145,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},{20:[1,152]},o($Vc,[2,20],{28:153,81:$VR}),{32:[1,155]},{20:$VH,30:$VI,31:156,79:101},{30:[1,157]},{7:149,9:151,10:150,11:146,12:147,13:148,14:158,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},{18:$Vd,19:159,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{30:[1,160]},{20:[1,161]},{20:[2,83],80:[1,162]},{20:[2,80]},{26:[1,163]},o($VS,[2,14]),o($VS,[2,8]),{7:149,9:151,10:165,12:164,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},o($VS,[2,11],{15:6,41:13,47:15,67:17,7:149,12:166,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,71:$V8,73:$V9,74:$Va}),o($VT,[2,13]),o($VT,[2,7]),{25:[1,167]},o($Vc,[2,19]),{25:[1,169],27:[1,168]},{30:[1,170]},{20:[2,77]},o([20,80],[2,76]),{76:[1,171]},o($Vb,[2,36],{50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),{69:[1,172]},{78:[1,173]},{18:$VJ,30:$VK,49:143,71:$VL,77:174},o([5,17,22,25,26,27,29,30,40,48,71,73,74,76,81],[2,91]),o($VS,[2,9]),o($VT,[2,12]),o($VS,[2,10]),{7:149,9:151,10:150,11:146,12:147,13:148,14:175,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},{18:[1,176]},{7:149,9:151,10:150,11:146,12:147,13:148,14:177,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},{33:[1,178]},o($VF,[2,68]),o($VQ,[2,74]),{18:$VJ,30:$VK,49:179,71:$VL},{20:[2,82]},{26:[1,180]},{18:$Vd,19:181,23:33,25:$V2,30:$Ve,35:34,41:37,47:38,59:$Vf,65:31,66:$Vg,67:39,71:$V8,73:$V9,74:$Va,75:$Vh},{26:[1,182]},{25:[1,183]},o($VQ,[2,75]),o($Vc,[2,18]),{20:[1,184],50:$Vo,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vc,[2,85]),{7:149,9:151,10:150,11:146,12:147,13:148,14:185,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},{25:[1,186]},{26:[1,187]},{7:149,9:151,10:150,11:146,12:147,13:148,14:188,15:6,17:$V0,22:$V1,25:$V2,27:$V3,29:$V4,30:$V5,40:$V6,41:13,47:15,48:$V7,67:17,71:$V8,73:$V9,74:$Va},o($Vc,[2,21]),{26:[1,189]},{28:190,81:$VR},o($Vc,[2,84])],
defaultActions: {22:[2,1],144:[2,80],156:[2,77],174:[2,82]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 73
break;
case 2:return 74
break;
case 3:return "$"
break;
case 4:return "def"
break;
case 5:return "end"
break;
case 6:return 71
break;
case 7:return 27
break;
case 8:return 81
break;
case 9:return 40
break;
case 10:return 17
break;
case 11:return 'match'
break;
case 12:return 22
break;
case 13:return 48
break;
case 14:return 'of'
break;
case 15:return 'not'
break;
case 16:return 80
break;
case 17:return 60
break;
case 18:return 46
break;
case 19:return 32
break;
case 20:return 16
break;
case 21:return 51
break;
case 22:return 50
break;
case 23:return 54
break;
case 24:return 57
break;
case 25:return 24
break;
case 26:return 52
break;
case 27:return 53
break;
case 28:return 56
break;
case 29:return 36
break;
case 30:return 55
break;
case 31:return 33
break;
case 32:return 44
break;
case 33:return 61
break;
case 34:return 45
break;
case 35:return 62
break;
case 36:return 63
break;
case 37:return 43
break;
case 38:return 59
break;
case 39:return 42
break;
case 40:return 58
break;
case 41:return 64
break;
case 42:return 25
break;
case 43:return 26
break;
case 44:return 68
break;
case 45:return 69
break;
case 46:return 18
break;
case 47:return 20
break;
case 48:return 39
break;
case 49:return 'pairs'
break;
case 50:return 'in'
break;
case 51:return 'do'
break;
case 52:return 30
break;
case 53:return 5
break;
case 54:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:Array\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:match\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<-)/,/^(?:<=)/,/^(?:<)/,/^(?:!=)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = scala_parser;
exports.Parser = scala_parser.Parser;
exports.parse = function () { return scala_parser.parse.apply(scala_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}