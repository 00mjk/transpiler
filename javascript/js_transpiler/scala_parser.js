/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var scala_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,12],$V3=[1,7],$V4=[1,8],$V5=[1,15],$V6=[1,9],$V7=[1,10],$V8=[1,16],$V9=[1,17],$Va=[5,23,31],$Vb=[5,10,15,18,23,24,26,30,31,32,33,65,66],$Vc=[1,33],$Vd=[1,37],$Ve=[1,27],$Vf=[1,29],$Vg=[1,32],$Vh=[2,52],$Vi=[5,9,10,15,18,23,24,26,30,31,32,33,65,66],$Vj=[1,47],$Vk=[1,46],$Vl=[5,9,10,11,13,15,17,18,23,24,26,30,31,32,33,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,65,66],$Vm=[2,53],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[5,9,10,13,15,17,18,23,24,26,30,31,32,33,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,65,66],$VD=[5,9,10,13,15,17,18,23,24,26,30,31,32,33,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,65,66],$VE=[13,31],$VF=[17,31],$VG=[1,95],$VH=[2,63],$VI=[1,102],$VJ=[1,131],$VK=[5,9,10,13,15,17,18,23,24,26,30,31,32,33,42,43,44,45,46,47,48,49,62,65,66],$VL=[5,9,10,13,15,17,18,23,24,26,30,31,32,33,42,43,44,45,46,47,48,49,50,51,52,62,65,66],$VM=[5,9,10,13,15,17,18,23,24,26,30,31,32,33,42,43,44,45,46,47,48,49,50,51,52,53,54,55,62,65,66],$VN=[1,145];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"statement_with_semicolon":8,";":9,"while":10,"(":11,"e":12,")":13,"bracket_statements":14,"for":15,"_":16,",":17,"IDENTIFIER":18,"in":19,"pairs":20,"dot_expr":21,"do":22,"end":23,"if":24,"elif":25,"def":26,"parameters":27,":":28,"=":29,"{":30,"}":31,"return":32,"var":33,"type":34,"access_array":35,"+=":36,"-=":37,"*=":38,"/=":39,".":40,"function_call":41,"or":42,"and":43,"<=":44,"<":45,">=":46,"==":47,"~=":48,">":49,"+":50,"-":51,"..":52,"*":53,"/":54,"%":55,"^":56,"not_expr":57,"!":58,"parentheses_expr":59,"parentheses_expr_":60,"[":61,"]":62,"exprs":63,"key_values":64,"NUMBER":65,"STRING_LITERAL":66,"function":67,"parameter":68,"types":69,"else":70,"identifiers":71,"key_value":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:";",10:"while",11:"(",13:")",15:"for",16:"_",17:",",18:"IDENTIFIER",19:"in",20:"pairs",22:"do",23:"end",24:"if",26:"def",28:":",29:"=",30:"{",31:"}",32:"return",33:"var",36:"+=",37:"-=",38:"*=",39:"/=",40:".",42:"or",43:"and",44:"<=",45:"<",46:">=",47:"==",48:"~=",49:">",50:"+",51:"-",52:"..",53:"*",54:"/",55:"%",56:"^",58:"!",61:"[",62:"]",65:"NUMBER",66:"STRING_LITERAL",67:"function",70:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[6,1],[6,2],[6,5],[6,12],[6,12],[6,6],[6,5],[6,11],[8,2],[8,6],[8,4],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,1],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,1],[57,2],[57,1],[21,3],[21,1],[35,4],[41,3],[41,4],[60,2],[60,3],[60,3],[60,1],[60,1],[60,1],[59,6],[59,3],[59,1],[59,1],[59,1],[34,1],[68,3],[27,3],[27,1],[27,0],[63,3],[63,1],[69,3],[69,1],[25,9],[25,4],[71,3],[71,1],[64,3],[64,1],[72,3],[14,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 44: case 62:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5:
this.$ = ["semicolon",$$[$0]];
break;
case 6:
this.$ = ["semicolon",$$[$0-1]];
break;
case 7:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 8:
this.$ = ["foreach","Object",$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 9:
this.$ = ["foreach_with_index","Object",$$[$0-10],$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 10:
this.$ = ["if",$$[$0-3],$$[$0],$$[$02]];
break;
case 11:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 12:
this.$ = ["function","public",$$[$0-4],$$[$0-9],$$[$0-7],$$[$0-1]];
break;
case 13:
this.$ = ["return",$$[$0]];
break;
case 14:
this.$ = ["initialize_var",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 15:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 16: case 17:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 18: case 19: case 20: case 21: case 26: case 27: case 28: case 29: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 24:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 25:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ["-",$$[$0]];
break;
case 41:
this.$ = ["!", [".",$$[$0]]];
break;
case 42:
this.$ = [".", $$[$0]];
break;
case 43: case 61: case 64: case 66: case 70:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 45:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 46:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 47:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 48:
this.$ = ["initializer_list","Object",[]];
break;
case 49:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 50:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 51: case 52: case 53:
this.$ = yytext;
break;
case 54:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 55:
this.$ = ["parentheses",$$[$0-1]];
break;
case 60:
this.$ = [$$[$0],$$[$0-2]];
break;
case 63:
this.$ = [];
break;
case 65: case 67: case 71: case 73:
this.$ = [$$[$0]];
break;
case 68:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 69:
this.$ = ["else",$$[$0-1]];
break;
case 72:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 74:
this.$ = [$$[$0-2],$$[$0]]
break;
case 75:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},{1:[3]},{5:[1,18]},o($Va,[2,3],{6:3,8:4,35:11,41:13,60:14,4:19,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,65:$V8,66:$V9}),o($Vb,[2,5],{9:[1,20]}),{11:[1,21]},{16:[1,22],18:[1,23]},{11:[1,24]},{18:[1,25]},{11:$Vc,12:26,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{18:[1,38]},{29:[1,39]},o([11,61],$Vh,{29:[1,40],36:[1,41],37:[1,42],38:[1,43],39:[1,44],40:[1,45]}),o($Vi,[2,23]),{11:$Vj,61:$Vk},{11:$Vc,12:51,18:$Vd,21:30,30:$V5,31:[1,48],35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,63:49,64:50,65:$V8,66:[1,53],67:$Vg,72:52},o($Vl,[2,51]),o($Vl,$Vm),{1:[2,1]},o($Va,[2,2]),o($Vb,[2,6]),{11:$Vc,12:54,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{17:[1,55]},{17:[1,56]},{11:$Vc,12:57,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:[1,58]},o($Vi,[2,13],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),{11:$Vc,12:74,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},o($VC,[2,40]),{11:$Vc,18:$Vd,21:75,30:$V5,35:34,41:35,59:31,60:36,65:$V8,66:$V9,67:$Vg},o($VC,[2,42]),o($VC,[2,44],{40:[1,76]}),{11:[1,77]},{11:$Vc,12:78,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58],{11:$Vj,61:$Vk}),o($Vl,$Vh),{28:[1,79],29:[1,80]},{11:$Vc,12:81,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:82,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:83,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:84,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:85,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:86,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,18:$Vd,21:87,30:$V5,35:34,41:35,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:88,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:51,13:[1,89],18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,63:90,65:$V8,66:$V9,67:$Vg},o($Vl,[2,48]),{31:[1,91]},{17:[1,93],31:[1,92]},o($VE,[2,65],{17:[1,94],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VF,[2,73]),o([11,17,31,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61],$Vm,{29:$VG}),{13:[1,96],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB},{18:[1,97]},{18:[1,98]},{13:[1,99],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB},{13:$VH,18:$VI,27:100,68:101},{11:$Vc,12:103,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:104,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:105,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:106,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:107,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:108,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:109,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:110,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:111,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:112,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:113,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:114,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:115,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:116,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:117,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},o($VC,[2,39]),o($VC,[2,41]),{11:$Vc,18:$Vd,21:118,30:$V5,35:34,41:35,59:31,60:36,65:$V8,66:$V9,67:$Vg},{13:$VH,18:$VI,27:119,68:101},{13:[1,120],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB},{18:[1,122],34:121},{11:$Vc,12:123,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},o($Vi,[2,16],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vi,[2,17],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vi,[2,18],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vi,[2,19],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vi,[2,20],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vi,[2,21],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vi,[2,22]),{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,62:[1,124]},o($VD,[2,46]),{13:[1,125]},o($Vl,[2,49]),o($Vl,[2,50]),{66:[1,127],72:126},{11:$Vc,12:51,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,63:128,65:$V8,66:$V9,67:$Vg},{11:$Vc,12:129,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{14:130,30:$VJ},{19:[1,132]},{19:[1,133]},{14:134,30:$VJ},{13:[1,135]},{13:[2,62],17:[1,136]},{28:[1,137]},o([5,9,10,13,15,17,18,23,24,26,30,31,32,33,42,62,65,66],[2,24],{43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o([5,9,10,13,15,17,18,23,24,26,30,31,32,33,42,43,62,65,66],[2,25],{44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VK,[2,26],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VK,[2,27],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VK,[2,28],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VK,[2,29],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VK,[2,30],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VK,[2,31],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VL,[2,32],{53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VL,[2,33],{53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VL,[2,34],{53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VM,[2,35],{56:$VB}),o($VM,[2,36],{56:$VB}),o($VM,[2,37],{56:$VB}),o($VC,[2,38]),o($VC,[2,43]),{13:[1,138]},o($VD,[2,55]),{29:[1,139]},{29:[2,59]},o($Vi,[2,15],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o([5,9,10,13,15,17,18,23,24,26,29,30,31,32,33,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,65,66],[2,45]),o($VD,[2,47]),o($VF,[2,72]),{29:$VG},o($VE,[2,64]),o($VF,[2,74],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vb,[2,7]),{4:141,6:3,7:140,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},{20:[1,142]},{20:[1,143]},o($Vb,[2,11],{25:144,70:$VN}),{28:[1,146]},{13:$VH,18:$VI,27:147,68:101},{18:[1,148]},{4:141,6:3,7:149,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},{11:$Vc,12:150,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{31:[1,151]},o([23,31],[2,4]),{11:[1,152]},{11:[1,153]},o($Vb,[2,10]),{24:[1,154],30:[1,155]},{18:[1,156]},{13:[2,61]},o([13,17],[2,60]),{23:[1,157]},o($Vi,[2,14],{42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o([5,10,15,18,23,24,26,30,31,32,33,65,66,70],[2,75]),{11:$Vc,18:$Vd,21:158,30:$V5,35:34,41:35,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:$Vc,18:$Vd,21:159,30:$V5,35:34,41:35,59:31,60:36,65:$V8,66:$V9,67:$Vg},{11:[1,160]},{4:141,6:3,7:161,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},{29:[1,162]},o($VD,[2,54]),{13:[1,163]},{13:[1,164]},{11:$Vc,12:165,18:$Vd,21:30,30:$V5,35:34,41:35,51:$Ve,57:28,58:$Vf,59:31,60:36,65:$V8,66:$V9,67:$Vg},{31:[1,166]},{30:[1,167]},{22:[1,168]},{22:[1,169]},{13:[1,170],42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB},o($Vb,[2,69]),{4:141,6:3,7:171,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},{4:141,6:3,7:172,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},{4:141,6:3,7:173,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},{30:[1,174]},{31:[1,175]},{23:[1,176]},{23:[1,177]},{4:141,6:3,7:178,8:4,10:$V0,15:$V1,18:$V2,24:$V3,26:$V4,30:$V5,32:$V6,33:$V7,35:11,41:13,60:14,65:$V8,66:$V9},o($Vb,[2,12]),o($Vb,[2,8]),o($Vb,[2,9]),{31:[1,179]},{25:180,70:$VN},o($Vb,[2,68])],
defaultActions: {18:[2,1],122:[2,59],147:[2,61]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 65
break;
case 2:return 66
break;
case 3:return "$"
break;
case 4:return "def"
break;
case 5:return "end"
break;
case 6:return 'elseif'
break;
case 7:return 24
break;
case 8:return 70
break;
case 9:return 32
break;
case 10:return 10
break;
case 11:return 15
break;
case 12:return 33
break;
case 13:return 'of'
break;
case 14:return 'not'
break;
case 15:return 17
break;
case 16:return 52
break;
case 17:return 40
break;
case 18:return 28
break;
case 19:return 9
break;
case 20:return 43
break;
case 21:return 42
break;
case 22:return 46
break;
case 23:return 49
break;
case 24:return 44
break;
case 25:return 45
break;
case 26:return 48
break;
case 27:return 47
break;
case 28:return 29
break;
case 29:return 38
break;
case 30:return 53
break;
case 31:return 39
break;
case 32:return 54
break;
case 33:return 55
break;
case 34:return 37
break;
case 35:return 51
break;
case 36:return 36
break;
case 37:return 50
break;
case 38:return 56
break;
case 39:return 30
break;
case 40:return 31
break;
case 41:return 61
break;
case 42:return 62
break;
case 43:return 11
break;
case 44:return 13
break;
case 45:return 16
break;
case 46:return 20
break;
case 47:return 19
break;
case 48:return 22
break;
case 49:return 18
break;
case 50:return 5
break;
case 51:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:elseif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = scala_parser;
exports.Parser = scala_parser.Parser;
exports.parse = function () { return scala_parser.parse.apply(scala_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}