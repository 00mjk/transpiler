/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var glsl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,14],$V2=[1,5],$V3=[1,13],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,15],$Va=[1,16],$Vb=[5,24,40],$Vc=[1,28],$Vd=[2,77],$Ve=[2,78],$Vf=[1,42],$Vg=[1,53],$Vh=[1,51],$Vi=[1,54],$Vj=[1,44],$Vk=[1,46],$Vl=[1,55],$Vm=[1,56],$Vn=[1,58],$Vo=[2,95],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[11,20],$Vt=[5,16,17,22,24,26,28,31,32,34,35,40,43,47],$Vu=[1,78],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,91],$VB=[1,92],$VC=[1,93],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[11,20,24,39,46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,80],$VK=[11,18,20,24,39,46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,80],$VL=[2,85],$VM=[1,118],$VN=[1,116],$VO=[1,122],$VP=[5,16,17,22,24,26,28,31,32,34,35,40,43,47,83],$VQ=[20,24],$VR=[20,24,80],$VS=[11,20,24,39,46,55,56,57,58,60,62,63,80],$VT=[11,20,24,39,46,55,56,57,58,59,60,61,62,63,80],$VU=[11,20,24,39,46,55,56,57,58,59,60,61,62,63,64,65,80],$VV=[20,80],$VW=[1,193],$VX=[1,196],$VY=[24,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"struct_statements":7,"struct_statement":8,"type":9,"identifiers":10,";":11,"statements":12,"access_modifier":13,"public":14,"private":15,"#define":16,"IDENTIFIER":17,"(":18,"exprs":19,")":20,"expr":21,"struct":22,"{":23,"}":24,"parameters":25,"void":26,"statement_with_semicolon":27,"while":28,"e":29,"bracket_statements":30,"do":31,"switch":32,"case_statements":33,"for":34,"if":35,"elif":36,"case_statement":37,"case":38,":":39,"break":40,"case_statements_":41,"default":42,"return":43,"=":44,"[":45,"]":46,"const":47,"access_array":48,"++":49,"--":50,"+=":51,"-=":52,"*=":53,"/=":54,"?":55,"||":56,"&&":57,"<=":58,"<":59,">=":60,">":61,"==":62,"!=":63,"+":64,"-":65,"%":66,"*":67,"/":68,"not_expr":69,"!":70,"dot_expr":71,"parentheses_expr":72,".":73,"function_call":74,"parentheses_expr_":75,"NUMBER":76,"STRING_LITERAL":77,"parameter":78,"inout":79,",":80,"&":81,"types":82,"else":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",14:"public",15:"private",16:"#define",17:"IDENTIFIER",18:"(",20:")",22:"struct",23:"{",24:"}",26:"void",28:"while",31:"do",32:"switch",34:"for",35:"if",38:"case",39:":",40:"break",42:"default",43:"return",44:"=",45:"[",46:"]",47:"const",49:"++",50:"--",51:"+=",52:"-=",53:"*=",54:"/=",55:"?",56:"||",57:"&&",58:"<=",59:"<",60:">=",61:">",62:"==",63:"!=",64:"+",65:"-",66:"%",67:"*",68:"/",70:"!",73:".",76:"NUMBER",77:"STRING_LITERAL",79:"inout",80:",",81:"&",83:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[8,3],[12,1],[13,1],[13,1],[6,8],[6,6],[6,8],[6,8],[6,2],[6,5],[6,7],[6,7],[6,9],[6,6],[6,5],[37,6],[41,2],[41,1],[33,4],[33,1],[27,3],[27,4],[27,2],[27,4],[27,6],[27,5],[27,7],[27,2],[27,2],[27,3],[27,3],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[29,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,4],[29,4],[29,3],[29,3],[29,2],[29,1],[69,2],[69,1],[71,3],[71,1],[48,4],[72,1],[72,1],[72,3],[72,1],[75,2],[75,3],[75,1],[75,1],[75,1],[74,3],[74,4],[9,1],[9,1],[78,3],[78,2],[78,4],[78,3],[25,3],[25,1],[25,0],[19,3],[19,1],[21,2],[21,1],[82,3],[82,1],[36,7],[36,2],[10,3],[10,1],[30,3],[30,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 4: case 22:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 5: case 23: case 64: case 84:
this.$ =
 [$$[$0]];
break;
case 6:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 7:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 11:
this.$ = ["struct",$$[$0-4],["statements",$$[$0-2]]]
break;
case 12:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 13:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 14: case 97:
this.$ = ["semicolon",$$[$0-1]];
break;
case 15:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 17:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 20:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 24:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 26: case 75:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 27: case 76:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 28:
this.$ = ["return",$$[$0]];
break;
case 29:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 30:
this.$ = ["initialize_var",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 31:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 33:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 34:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 35: case 36:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 37: case 38:
this.$ = [$$[$0],$$[$0-1]];
break;
case 39: case 40: case 41: case 42: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 57: case 58:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 55:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 56:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 59:
this.$ = ["-",$$[$0]];
break;
case 61:
this.$ = ["!", [".",$$[$0]]];
break;
case 62:
this.$ = [".", $$[$0]];
break;
case 63: case 83: case 86: case 90: case 94:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 65:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 68:
this.$ = ["parentheses",$$[$0-1]];
break;
case 70:
this.$ = ["initializer_list","Object",[]];
break;
case 71:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 72: case 73: case 74:
this.$ = yytext;
break;
case 79:
this.$ = ["ref_parameter",$$[$0-1],$$[$0]]
break;
case 80:
this.$ = [$$[$0-1],$$[$0]];
break;
case 81:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 82:
this.$ = ["final_parameter",$$[$0-1],$$[$0]]
break;
case 85:
this.$ = [];
break;
case 87: case 89: case 91: case 95:
this.$ = [$$[$0]];
break;
case 88:
this.$ = ["function_call_ref",$$[$0]];
break;
case 92:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 93:
this.$ = ["else",$$[$0]];
break;
case 96:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,9:6,16:$V0,17:$V1,22:$V2,26:$V3,27:7,28:$V4,31:$V5,32:$V6,34:$V7,35:$V8,43:$V9,47:$Va,48:17},{1:[3]},{5:[1,18]},o($Vb,[2,3],{6:3,9:6,27:7,48:17,4:19,16:$V0,17:$V1,22:$V2,26:$V3,28:$V4,31:$V5,32:$V6,34:$V7,35:$V8,43:$V9,47:$Va}),{17:[1,20]},{17:[1,21]},{10:24,17:[1,22],48:23},{11:[1,25]},{18:[1,26]},{9:30,17:$V1,23:$Vc,26:$V3,27:29,30:27,43:$V9,47:$Va,48:17},{18:[1,31]},{18:[1,32]},{18:[1,33]},{17:$Vd},{17:$Ve,18:[1,34],44:[1,35],45:$Vf,49:[1,36],50:[1,37],51:[1,38],52:[1,39],53:[1,40],54:[1,41]},{17:$Vg,18:$Vh,23:$Vi,29:43,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{9:57,17:$Vn,26:$V3},{44:[1,59]},{1:[2,1]},o($Vb,[2,2]),{18:[1,60]},{23:[1,61]},{11:$Vo,18:[1,62],44:$Vp,45:$Vq,80:$Vr},o($Vs,[2,33]),o($Vs,[2,34]),o($Vt,[2,14]),{17:$Vg,18:$Vh,23:$Vi,29:66,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{28:[1,67]},{4:69,6:3,9:6,12:68,16:$V0,17:$V1,22:$V2,26:$V3,27:7,28:$V4,31:$V5,32:$V6,34:$V7,35:$V8,43:$V9,47:$Va,48:17},{11:[1,70]},{10:24,17:[1,71],48:23},{17:$Vg,18:$Vh,23:$Vi,29:72,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{9:30,17:$V1,26:$V3,27:73,43:$V9,47:$Va,48:17},{17:$Vg,18:$Vh,23:$Vi,29:74,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,19:76,20:[1,75],21:77,23:$Vi,29:79,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm,81:$Vu},{17:$Vg,18:$Vh,23:$Vi,29:80,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($Vs,[2,37]),o($Vs,[2,38]),{17:$Vg,18:$Vh,23:$Vi,29:81,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:82,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:83,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:84,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:85,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($Vs,[2,28],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{17:$Vg,18:$Vh,23:$Vi,29:100,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VJ,[2,60]),{17:$Vg,18:$Vh,23:$Vi,48:49,71:101,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VJ,[2,62]),o($VJ,[2,64],{18:[1,103],73:[1,102]}),o($VK,[2,66]),o($VK,[2,67]),{17:$Vg,18:$Vh,23:$Vi,29:104,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VK,[2,69]),o($VK,[2,73],{45:$Vf}),{17:$Vg,18:$Vh,19:106,21:77,23:$Vi,24:[1,105],29:79,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm,81:$Vu},o($VK,[2,72]),o($VK,[2,74]),{17:[1,107]},{17:$Ve},{17:$Vg,18:$Vh,23:$Vi,29:108,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,19:109,21:77,23:$Vi,29:79,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm,81:$Vu},{7:110,8:111,9:112,17:$Vn,26:$V3},{9:117,17:$Vn,20:$VL,25:113,26:[1,114],47:$VM,78:115,79:$VN},{17:$Vg,18:$Vh,23:$Vi,29:119,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:85,46:[1,120],48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{10:121,17:$VO},{20:[1,123],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},{18:[1,124]},{24:[1,125]},o([24,40],[2,7]),o($VP,[2,97]),o($Vs,$Vo,{44:$Vp,45:$Vq,80:$Vr}),{20:[1,126],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},{11:[1,127]},{20:[1,128],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},o($Vs,[2,26]),{20:[1,129]},o($VQ,[2,87],{80:[1,130]}),{17:$Vg,18:$Vh,23:$Vi,29:131,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VR,[2,89],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($Vs,[2,36],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($Vs,[2,39],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($Vs,[2,40],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($Vs,[2,41],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($Vs,[2,42],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{46:[1,132],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},{17:$Vg,18:$Vh,23:$Vi,29:133,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:134,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:135,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:136,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:137,48:49,59:[1,138],65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:139,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:140,48:49,61:[1,141],65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:142,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:143,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:144,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:145,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:146,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:147,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,23:$Vi,29:148,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VJ,[2,59]),o($VJ,[2,61]),{17:$Vg,18:$Vh,23:$Vi,48:49,71:149,72:48,74:50,75:52,76:$Vl,77:$Vm},{17:$Vg,18:$Vh,19:151,20:[1,150],21:77,23:$Vi,29:79,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm,81:$Vu},{20:[1,152],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},o($VK,[2,70]),{24:[1,153]},{44:[1,154],45:[1,155]},o($Vs,[2,35],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{20:[1,156]},{24:[1,157]},{7:158,8:111,9:112,17:$Vn,24:[2,5],26:$V3},{10:159,17:$VO},{20:[1,160]},{17:$Vd,20:[1,161]},{20:[2,84],80:[1,162]},{9:163,17:$Vn,26:$V3},{17:[1,164]},{9:165,17:$Vn,26:$V3},o($Vs,[2,29],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{44:[1,166]},o($Vs,[2,94]),o($Vs,$Vo,{80:$Vr}),{9:30,17:$V1,23:$Vc,26:$V3,27:29,30:167,43:$V9,47:$Va,48:17},{17:$Vg,18:$Vh,23:$Vi,29:168,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VP,[2,96]),{23:[1,169]},{17:$Vg,18:$Vh,23:$Vi,29:170,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{9:30,17:$V1,23:$Vc,26:$V3,27:29,30:171,43:$V9,47:$Va,48:17},o($Vs,[2,27]),{17:$Vg,18:$Vh,19:172,21:77,23:$Vi,29:79,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm,81:$Vu},o($VR,[2,88],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o([11,18,20,24,39,44,46,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,80],[2,65]),{39:[1,173],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},o([11,20,24,39,46,55,56,80],[2,44],{57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o([11,20,24,39,46,55,56,57,80],[2,45],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($VS,[2,46],{59:$Vz,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($VT,[2,47],{64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{17:$Vg,18:$Vh,23:$Vi,29:174,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VS,[2,48],{59:$Vz,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($VT,[2,49],{64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{17:$Vg,18:$Vh,23:$Vi,29:175,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VS,[2,50],{59:$Vz,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($VS,[2,51],{59:$Vz,61:$VB,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($VU,[2,52],{66:$VG,67:$VH,68:$VI}),o($VU,[2,53],{66:$VG,67:$VH,68:$VI}),o($VJ,[2,54]),o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,63]),o($VK,[2,75]),{20:[1,176]},o($VK,[2,68]),o($VK,[2,71]),{17:$Vg,18:$Vh,23:$Vi,29:177,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{46:[1,178]},{18:[1,179]},{11:[1,180]},{24:[2,4]},{11:[1,181]},{23:[1,182]},{23:[1,183]},{9:117,17:$Vn,20:$VL,25:184,26:$V3,47:$VM,78:115,79:$VN},{17:[1,185]},o($VV,[2,80],{45:[1,186]}),{17:[1,187]},{17:$Vg,18:$Vh,23:$Vi,29:188,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($Vt,[2,15]),{20:[1,189],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},{33:190,37:192,38:$VW,41:191},{11:[1,194],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},o($Vt,[2,20],{36:195,83:$VX}),o($VQ,[2,86]),{17:$Vg,18:$Vh,23:$Vi,29:197,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},o($VT,[2,56],{64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($VT,[2,55],{64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($VK,[2,76]),o($Vs,[2,31],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{44:[1,198]},{17:$Vg,18:$Vh,21:199,23:$Vi,29:79,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm,81:$Vu},o($Vt,[2,11]),o([17,24,26],[2,6]),{4:69,6:3,9:6,12:200,16:$V0,17:$V1,22:$V2,26:$V3,27:7,28:$V4,31:$V5,32:$V6,34:$V7,35:$V8,43:$V9,47:$Va,48:17},{4:69,6:3,9:6,12:201,16:$V0,17:$V1,22:$V2,26:$V3,27:7,28:$V4,31:$V5,32:$V6,34:$V7,35:$V8,43:$V9,47:$Va,48:17},{20:[2,83]},o($VV,[2,79]),{46:[1,202]},o($VV,[2,82]),o($Vs,[2,30],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{11:[1,203]},{24:[1,204]},{24:[2,25],42:[1,205]},o($VY,[2,23],{37:192,41:206,38:$VW}),{17:$Vg,18:$Vh,23:$Vi,29:207,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{9:30,17:$V1,26:$V3,27:208,43:$V9,47:$Va,48:17},o($Vt,[2,19]),{9:30,17:$V1,23:$Vc,26:$V3,27:29,30:210,35:[1,209],43:$V9,47:$Va,48:17},o([11,20,24,39,46,80],[2,43],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),{17:$Vg,18:$Vh,23:$Vi,29:211,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{20:[1,212]},{24:[1,213]},{24:[1,214]},o($VV,[2,81]),o($Vt,[2,16]),o($Vt,[2,17]),{39:[1,215]},o($VY,[2,22]),{39:[1,216],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},{20:[1,217]},{18:[1,218]},o($Vt,[2,93]),o($Vs,[2,32],{55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI}),o($Vt,[2,10]),o($Vt,[2,12]),o($Vt,[2,13]),{4:69,6:3,9:6,12:219,16:$V0,17:$V1,22:$V2,26:$V3,27:7,28:$V4,31:$V5,32:$V6,34:$V7,35:$V8,43:$V9,47:$Va,48:17},{4:69,6:3,9:6,12:220,16:$V0,17:$V1,22:$V2,26:$V3,27:7,28:$V4,31:$V5,32:$V6,34:$V7,35:$V8,43:$V9,47:$Va,48:17},{9:30,17:$V1,23:$Vc,26:$V3,27:29,30:221,43:$V9,47:$Va,48:17},{17:$Vg,18:$Vh,23:$Vi,29:222,48:49,65:$Vj,69:45,70:$Vk,71:47,72:48,74:50,75:52,76:$Vl,77:$Vm},{24:[2,24]},{40:[1,223]},o($Vt,[2,18]),{20:[1,224],55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI},{11:[1,225]},{9:30,17:$V1,23:$Vc,26:$V3,27:29,30:226,43:$V9,47:$Va,48:17},o([24,38,42],[2,21]),{36:227,83:$VX},o($Vt,[2,92])],
defaultActions: {13:[2,77],18:[2,1],58:[2,78],158:[2,4],184:[2,83],219:[2,24]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 76
break;
case 2:return 77
break;
case 3:return 16
break;
case 4:return "if"
break;
case 5:return 31
break;
case 6:return "else"
break;
case 7:return "return"
break;
case 8:return "inout"
break;
case 9:return "void"
break;
case 10:return "case"
break;
case 11:return "printf"
break;
case 12:return "while"
break;
case 13:return "break"
break;
case 14:return "default"
break;
case 15:return "const"
break;
case 16:return "struct"
break;
case 17:return "switch"
break;
case 18:return "for"
break;
case 19:return 80
break;
case 20:return 11
break;
case 21:return 73
break;
case 22:return 39
break;
case 23:return 57
break;
case 24:return 81
break;
case 25:return 56
break;
case 26:return 63
break;
case 27:return 70
break;
case 28:return 60
break;
case 29:return 61
break;
case 30:return 58
break;
case 31:return 59
break;
case 32:return 62
break;
case 33:return 44
break;
case 34:return 53
break;
case 35:return 67
break;
case 36:return 66
break;
case 37:return 54
break;
case 38:return 68
break;
case 39:return 52
break;
case 40:return 50
break;
case 41:return 65
break;
case 42:return 49
break;
case 43:return 51
break;
case 44:return 64
break;
case 45:return '^'
break;
case 46:return 55
break;
case 47:return 23
break;
case 48:return 24
break;
case 49:return 45
break;
case 50:return 46
break;
case 51:return 18
break;
case 52:return 20
break;
case 53:return 17
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:#define\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:inout\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = glsl_parser;
exports.Parser = glsl_parser.Parser;
exports.parse = function () { return glsl_parser.parse.apply(glsl_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}