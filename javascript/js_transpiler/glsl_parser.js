/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var glsl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,6],$V2=[1,7],$V3=[1,16],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,18],$Va=[1,19],$Vb=[5,21,26,31,35,37,39,40,42,44,52,53],$Vc=[1,32],$Vd=[13,29],$Ve=[2,85],$Vf=[2,86],$Vg=[1,46],$Vh=[1,57],$Vi=[1,55],$Vj=[1,58],$Vk=[1,48],$Vl=[1,50],$Vm=[1,59],$Vn=[1,60],$Vo=[1,62],$Vp=[2,105],$Vq=[1,67],$Vr=[1,68],$Vs=[1,66],$Vt=[1,69],$Vu=[5,21,26,31,33,35,37,39,40,42,44,49,52,53],$Vv=[1,87],$Vw=[1,95],$Vx=[1,96],$Vy=[1,97],$Vz=[1,98],$VA=[1,99],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[13,25,29,33,48,61,62,63,64,65,66,67,68,69,70,71,72,73,74,88],$VL=[13,25,27,29,33,48,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,88],$VM=[2,95],$VN=[1,129],$VO=[1,125],$VP=[1,126],$VQ=[1,127],$VR=[1,133],$VS=[33,49],$VT=[5,21,26,31,33,35,37,39,40,42,44,49,52,53,91],$VU=[29,33],$VV=[29,33,88],$VW=[13,25,29,33,48,61,62,63,64,66,68,69,88],$VX=[13,25,29,33,48,61,62,63,64,65,66,67,68,69,88],$VY=[13,25,29,33,48,61,62,63,64,65,66,67,68,69,70,71,88],$VZ=[29,88],$V_=[1,211],$V$=[1,214],$V01=[33,51];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statements_":7,"statement":8,"struct_statements":9,"struct_statement":10,"type":11,"identifiers":12,";":13,"statements":14,"access_modifier":15,"public":16,"private":17,"initialize_var1":18,"initialize_var_":19,"initialize_var":20,"IDENTIFIER":21,"=":22,"e":23,"[":24,"]":25,"#define":26,"(":27,"exprs":28,")":29,"expr":30,"struct":31,"{":32,"}":33,"parameters":34,"void":35,"statement_with_semicolon":36,"while":37,"bracket_statements":38,"do":39,"switch":40,"case_statements":41,"for":42,"statement_with_semicolon_":43,"if":44,"elif":45,"case_statement":46,"case":47,":":48,"break":49,"case_statements_":50,"default":51,"return":52,"const":53,"access_array":54,"++":55,"--":56,"+=":57,"-=":58,"*=":59,"/=":60,"?":61,"||":62,"&&":63,"<=":64,"<":65,">=":66,">":67,"==":68,"!=":69,"+":70,"-":71,"%":72,"*":73,"/":74,"not_expr":75,"!":76,"dot_expr":77,"parentheses_expr":78,".":79,"function_call":80,"parentheses_expr_":81,"NUMBER":82,"STRING_LITERAL":83,"parameter":84,"out":85,"inout":86,"in":87,",":88,"&":89,"types":90,"else":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:";",16:"public",17:"private",21:"IDENTIFIER",22:"=",24:"[",25:"]",26:"#define",27:"(",29:")",31:"struct",32:"{",33:"}",35:"void",37:"while",39:"do",40:"switch",42:"for",44:"if",47:"case",48:":",49:"break",51:"default",52:"return",53:"const",55:"++",56:"--",57:"+=",58:"-=",59:"*=",60:"/=",61:"?",62:"||",63:"&&",64:"<=",65:"<",66:">=",67:">",68:"==",69:"!=",70:"+",71:"-",72:"%",73:"*",74:"/",76:"!",79:".",82:"NUMBER",83:"STRING_LITERAL",85:"out",86:"inout",87:"in",88:",",89:"&",91:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[9,2],[9,1],[10,3],[14,1],[15,1],[15,1],[6,1],[6,2],[18,1],[20,1],[19,4],[19,6],[8,8],[8,6],[8,8],[8,8],[8,2],[8,5],[8,7],[8,7],[8,9],[8,6],[8,5],[43,1],[43,1],[46,6],[50,2],[50,1],[41,4],[41,1],[36,3],[36,4],[36,2],[36,5],[36,7],[36,2],[36,2],[36,3],[36,3],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[23,5],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,4],[23,4],[23,3],[23,3],[23,2],[23,1],[75,2],[75,1],[77,3],[77,1],[54,4],[78,1],[78,1],[78,3],[78,1],[81,2],[81,3],[81,1],[81,1],[81,1],[80,3],[80,4],[11,1],[11,1],[84,3],[84,3],[84,3],[84,2],[84,4],[84,3],[34,3],[34,1],[34,0],[28,3],[28,1],[30,2],[30,1],[90,3],[90,1],[45,7],[45,2],[12,3],[12,1],[38,3],[38,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 5: case 7: case 33: case 72: case 94:
this.$ =
 [$$[$0]];
break;
case 4: case 6: case 32:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 8:
this.$ = ["struct_statement",$$[$0-2],$$[$0-1]];
break;
case 9:
this.$ = ["statements",$$[$0]]
break;
case 13:
this.$ = ["semicolon",$$[$0-1]]
break;
case 14:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 15:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 16:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]];
break;
case 17:
this.$ = [[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 18:
this.$ = ["macro",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["struct",$$[$0-4],["struct_statements",$$[$0-2]]]
break;
case 20:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 21:
this.$ = ["function","public",$$[$0-7],$$[$0-6],[],$$[$0-1]];
break;
case 22: case 107:
this.$ = ["semicolon",$$[$0-1]];
break;
case 23:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 25:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 28:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 34:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 36: case 83:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 37: case 84:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 38:
this.$ = ["return",$$[$0]];
break;
case 39:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["initialize_constant",[$$[$0-5],"[]"],$$[$0-4],$$[$0]];
break;
case 41:
this.$ = ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 42:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 43: case 44:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 45: case 46:
this.$ = [$$[$0],$$[$0-1]];
break;
case 47: case 48: case 49: case 50: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 65: case 66:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 51:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 63:
this.$ = [">>",$$[$0-3],$$[$0-1]];
break;
case 64:
this.$ = ["<<",$$[$0-3],$$[$0-1]];
break;
case 67:
this.$ = ["-",$$[$0]];
break;
case 69:
this.$ = ["!", [".",$$[$0]]];
break;
case 70:
this.$ = [".", $$[$0]];
break;
case 71: case 93: case 96: case 100: case 104:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 73:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 76:
this.$ = ["parentheses",$$[$0-1]];
break;
case 78:
this.$ = ["initializer_list","Object",[]];
break;
case 79:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 80: case 81: case 82:
this.$ = yytext;
break;
case 87:
this.$ = ["out_parameter",$$[$0-1],$$[$0]]
break;
case 88:
this.$ = ["ref_parameter",$$[$0-1],$$[$0]]
break;
case 89:
this.$ = ["in_parameter",$$[$0-1],$$[$0]]
break;
case 90:
this.$ = [$$[$0-1],$$[$0]];
break;
case 91:
this.$ = [[$$[$0-3],"[]"],$$[$0-2]];
break;
case 92:
this.$ = ["final_parameter",$$[$0-1],$$[$0]]
break;
case 95:
this.$ = [];
break;
case 97: case 99: case 101: case 105:
this.$ = [$$[$0]];
break;
case 98:
this.$ = ["function_call_ref",$$[$0]];
break;
case 102:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 103:
this.$ = ["else",$$[$0]];
break;
case 106:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,8:4,11:8,18:5,19:15,21:$V0,26:$V1,31:$V2,35:$V3,36:9,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va,54:20},{1:[3]},{5:[1,21],6:22,8:4,11:8,18:5,19:15,21:$V0,26:$V1,31:$V2,35:$V3,36:9,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va,54:20},o($Vb,[2,3]),o($Vb,[2,12]),{13:[1,23]},{21:[1,24]},{21:[1,25]},{12:28,21:[1,26],54:27},{13:[1,29]},{27:[1,30]},{11:34,21:$V0,32:$Vc,35:$V3,36:33,38:31,52:$V9,53:$Va,54:20},{27:[1,35]},{27:[1,36]},{27:[1,37]},o($Vd,[2,14]),{21:$Ve},{21:$Vf,22:[1,39],24:$Vg,27:[1,38],55:[1,40],56:[1,41],57:[1,42],58:[1,43],59:[1,44],60:[1,45]},{21:$Vh,23:47,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{11:61,21:$Vo,35:$V3},{22:[1,63]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,13]),{27:[1,64]},{32:[1,65]},{13:$Vp,22:$Vq,24:$Vr,27:$Vs,88:$Vt},o($Vd,[2,41]),o($Vd,[2,42]),o($Vu,[2,22]),{21:$Vh,23:70,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{37:[1,71]},{7:73,8:74,11:75,14:72,21:$V0,26:$V1,31:$V2,35:$V3,36:9,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va,54:20},{13:[1,76]},{12:28,21:[1,77],54:27},{21:$Vh,23:78,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{11:82,18:80,19:15,21:$V0,35:$V3,36:81,43:79,52:$V9,53:$Va,54:20},{21:$Vh,23:83,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:88,27:$Vi,28:85,29:[1,84],30:86,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn,89:$Vv},{21:$Vh,23:89,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($Vd,[2,45]),o($Vd,[2,46]),{21:$Vh,23:90,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:91,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:92,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:93,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:94,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($Vd,[2,38],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{21:$Vh,23:109,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VK,[2,68]),{21:$Vh,27:$Vi,32:$Vj,54:53,77:110,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VK,[2,70]),o($VK,[2,72],{27:[1,112],79:[1,111]}),o($VL,[2,74]),o($VL,[2,75]),{21:$Vh,23:113,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VL,[2,77]),o($VL,[2,81],{24:$Vg}),{21:$Vh,23:88,27:$Vi,28:115,30:86,32:$Vj,33:[1,114],54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn,89:$Vv},o($VL,[2,80]),o($VL,[2,82]),{21:[1,116]},{21:$Vf},{21:$Vh,23:117,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:88,27:$Vi,28:118,30:86,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn,89:$Vv},{9:119,10:120,11:121,21:$Vo,35:$V3},{11:128,21:$Vo,29:$VM,34:122,35:[1,123],53:$VN,84:124,85:$VO,86:$VP,87:$VQ},{21:$Vh,23:130,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:94,25:[1,131],27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{12:132,21:$VR},{29:[1,134],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{27:[1,135]},{33:[1,136]},o($VS,[2,9]),o($VS,[2,5],{36:9,54:20,8:74,11:75,7:137,21:$V0,26:$V1,31:$V2,35:$V3,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va}),{12:28,21:[1,138],54:27},o($VT,[2,107]),{13:$Vp,24:$Vg,88:$Vt},{29:[1,139],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{13:[1,140]},o($Vd,[2,29]),o($Vd,[2,30]),{12:28,21:[1,141],54:27},{29:[1,142],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o($Vd,[2,36]),{29:[1,143]},o($VU,[2,97],{88:[1,144]}),{21:$Vh,23:145,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VV,[2,99],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($Vd,[2,44],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($Vd,[2,47],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($Vd,[2,48],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($Vd,[2,49],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($Vd,[2,50],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{25:[1,146],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{21:$Vh,23:147,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:148,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:149,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:150,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:151,27:$Vi,32:$Vj,54:53,65:[1,152],71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:153,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:154,27:$Vi,32:$Vj,54:53,67:[1,155],71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:156,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:157,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:158,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:159,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:160,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:161,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:162,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VK,[2,67]),o($VK,[2,69]),{21:$Vh,27:$Vi,32:$Vj,54:53,77:163,78:52,80:54,81:56,82:$Vm,83:$Vn},{21:$Vh,23:88,27:$Vi,28:165,29:[1,164],30:86,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn,89:$Vv},{29:[1,166],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o($VL,[2,78]),{33:[1,167]},{22:[1,168],24:[1,169]},o($Vd,[2,43],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{29:[1,170]},{33:[1,171]},{9:172,10:120,11:121,21:$Vo,33:[2,7],35:$V3},{12:173,21:$VR},{29:[1,174]},{21:$Ve,29:[1,175]},{29:[2,94],88:[1,176]},{11:177,21:$Vo,35:$V3},{11:178,21:$Vo,35:$V3},{11:179,21:$Vo,35:$V3},{21:[1,180]},{11:181,21:$Vo,35:$V3},o($Vd,[2,16],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{22:[1,182]},o($Vd,[2,104]),o($Vd,$Vp,{88:$Vt}),{11:34,21:$V0,32:$Vc,35:$V3,36:33,38:183,52:$V9,53:$Va,54:20},{21:$Vh,23:184,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VT,[2,106]),o($VS,[2,4]),{13:$Vp,24:$Vg,27:$Vs,88:$Vt},{32:[1,185]},{21:$Vh,23:186,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($Vd,$Vp,{22:$Vq,24:$Vr,88:$Vt}),{11:34,21:$V0,32:$Vc,35:$V3,36:33,38:187,52:$V9,53:$Va,54:20},o($Vd,[2,37]),{21:$Vh,23:88,27:$Vi,28:188,30:86,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn,89:$Vv},o($VV,[2,98],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o([13,22,25,27,29,33,48,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,88],[2,73]),{48:[1,189],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o([13,25,29,33,48,61,62,88],[2,52],{63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o([13,25,29,33,48,61,62,63,88],[2,53],{64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VW,[2,54],{65:$VA,67:$VC,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VX,[2,55],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{21:$Vh,23:190,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VW,[2,56],{65:$VA,67:$VC,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VX,[2,57],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{21:$Vh,23:191,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VW,[2,58],{65:$VA,67:$VC,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VW,[2,59],{65:$VA,67:$VC,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VY,[2,60],{72:$VH,73:$VI,74:$VJ}),o($VY,[2,61],{72:$VH,73:$VI,74:$VJ}),o($VK,[2,62]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,71]),o($VL,[2,83]),{29:[1,192]},o($VL,[2,76]),o($VL,[2,79]),{21:$Vh,23:193,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{25:[1,194]},{27:[1,195]},{13:[1,196]},{33:[2,6]},{13:[1,197]},{32:[1,198]},{32:[1,199]},{11:128,21:$Vo,29:$VM,34:200,35:$V3,53:$VN,84:124,85:$VO,86:$VP,87:$VQ},{21:[1,201]},{21:[1,202]},{21:[1,203]},o($VZ,[2,90],{24:[1,204]}),{21:[1,205]},{21:$Vh,23:206,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($Vu,[2,23]),{29:[1,207],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{41:208,46:210,47:$V_,50:209},{13:[1,212],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},o($Vu,[2,28],{45:213,91:$V$}),o($VU,[2,96]),{21:$Vh,23:215,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},o($VX,[2,64],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VX,[2,63],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VL,[2,84]),o($Vd,[2,39],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{22:[1,216]},{21:$Vh,23:88,27:$Vi,30:217,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn,89:$Vv},o($Vu,[2,19]),o([21,33,35],[2,8]),{7:73,8:74,11:75,14:218,21:$V0,26:$V1,31:$V2,35:$V3,36:9,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va,54:20},{7:73,8:74,11:75,14:219,21:$V0,26:$V1,31:$V2,35:$V3,36:9,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va,54:20},{29:[2,93]},o($VZ,[2,87]),o($VZ,[2,88]),o($VZ,[2,89]),{25:[1,220]},o($VZ,[2,92]),o($Vd,[2,17],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{13:[1,221]},{33:[1,222]},{33:[2,35],51:[1,223]},o($V01,[2,33],{46:210,50:224,47:$V_}),{21:$Vh,23:225,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{11:82,18:80,19:15,21:$V0,35:$V3,36:81,43:226,52:$V9,53:$Va,54:20},o($Vu,[2,27]),{11:34,21:$V0,32:$Vc,35:$V3,36:33,38:228,44:[1,227],52:$V9,53:$Va,54:20},o([13,25,29,33,48,88],[2,51],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{21:$Vh,23:229,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{29:[1,230]},{33:[1,231]},{33:[1,232]},o($VZ,[2,91]),o($Vu,[2,24]),o($Vu,[2,25]),{48:[1,233]},o($V01,[2,32]),{48:[1,234],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{29:[1,235]},{27:[1,236]},o($Vu,[2,103]),o($Vd,[2,40],{61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($Vu,[2,18]),o($Vu,[2,20]),o($Vu,[2,21]),{7:73,8:74,11:75,14:237,21:$V0,26:$V1,31:$V2,35:$V3,36:9,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va,54:20},{7:73,8:74,11:75,14:238,21:$V0,26:$V1,31:$V2,35:$V3,36:9,37:$V4,39:$V5,40:$V6,42:$V7,44:$V8,52:$V9,53:$Va,54:20},{11:34,21:$V0,32:$Vc,35:$V3,36:33,38:239,52:$V9,53:$Va,54:20},{21:$Vh,23:240,27:$Vi,32:$Vj,54:53,71:$Vk,75:49,76:$Vl,77:51,78:52,80:54,81:56,82:$Vm,83:$Vn},{33:[2,34]},{49:[1,241]},o($Vu,[2,26]),{29:[1,242],61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ},{13:[1,243]},{11:34,21:$V0,32:$Vc,35:$V3,36:33,38:244,52:$V9,53:$Va,54:20},o([33,47,51],[2,31]),{45:245,91:$V$},o($Vu,[2,102])],
defaultActions: {16:[2,85],21:[2,1],62:[2,86],172:[2,6],200:[2,93],237:[2,34]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 82
break;
case 2:return 83
break;
case 3:return 26
break;
case 4:return "if"
break;
case 5:return 39
break;
case 6:return "else"
break;
case 7:return "return"
break;
case 8:return "inout"
break;
case 9:return 87
break;
case 10:return 85
break;
case 11:return "void"
break;
case 12:return "case"
break;
case 13:return "printf"
break;
case 14:return "while"
break;
case 15:return "break"
break;
case 16:return "default"
break;
case 17:return "const"
break;
case 18:return "struct"
break;
case 19:return "switch"
break;
case 20:return "for"
break;
case 21:return 88
break;
case 22:return 13
break;
case 23:return 79
break;
case 24:return 48
break;
case 25:return 63
break;
case 26:return 89
break;
case 27:return 62
break;
case 28:return 69
break;
case 29:return 76
break;
case 30:return 66
break;
case 31:return 67
break;
case 32:return 64
break;
case 33:return 65
break;
case 34:return 68
break;
case 35:return 22
break;
case 36:return 59
break;
case 37:return 73
break;
case 38:return 72
break;
case 39:return 60
break;
case 40:return 74
break;
case 41:return 58
break;
case 42:return 56
break;
case 43:return 71
break;
case 44:return 55
break;
case 45:return 57
break;
case 46:return 70
break;
case 47:return '^'
break;
case 48:return 61
break;
case 49:return 32
break;
case 50:return 33
break;
case 51:return 24
break;
case 52:return 25
break;
case 53:return 27
break;
case 54:return 29
break;
case 55:return 21
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:#define\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:inout\b)/,/^(?:in\b)/,/^(?:out\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = glsl_parser;
exports.Parser = glsl_parser.Parser;
exports.parse = function () { return glsl_parser.parse.apply(glsl_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}