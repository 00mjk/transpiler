/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var swift_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,15],$V3=[1,9],$V4=[1,10],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,14],$V9=[1,13],$Va=[1,17],$Vb=[5,20,25,26,29,34,37,38,41,44,47,56],$Vc=[5,20,25,26,29,33,34,37,38,41,44,47,56,82],$Vd=[1,34],$Ve=[1,39],$Vf=[1,28],$Vg=[1,30],$Vh=[1,35],$Vi=[1,40],$Vj=[1,41],$Vk=[1,33],$Vl=[1,50],$Vm=[5,20,25,26,29,33,34,37,38,41,44,47,56,82,89,90],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[5,20,23,25,26,29,33,34,37,38,41,44,47,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,76,82,89,90],$VB=[5,20,23,25,26,29,32,33,34,37,38,41,44,47,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,76,82,89,90],$VC=[2,81],$VD=[2,108],$VE=[1,86],$VF=[1,85],$VG=[1,87],$VH=[2,99],$VI=[1,105],$VJ=[72,76],$VK=[1,129],$VL=[1,133],$VM=[1,137],$VN=[1,136],$VO=[1,139],$VP=[1,148],$VQ=[1,149],$VR=[1,147],$VS=[1,153],$VT=[1,155],$VU=[1,157],$VV=[5,20,23,25,26,29,33,34,37,38,41,44,47,56,57,58,59,60,61,62,72,76,82,89,90],$VW=[5,20,23,25,26,29,33,34,37,38,41,44,47,56,57,58,59,60,61,62,63,64,65,72,76,82,89,90],$VX=[5,20,23,25,26,29,33,34,37,38,41,44,47,56,57,58,59,60,61,62,63,64,65,66,67,68,72,76,82,89,90],$VY=[23,72],$VZ=[23,33,44,53,60,72,76],$V_=[5,20,25,26,29,33,34,37,38,41,44,45,47,56,82,89,90],$V$=[29,33,37,44],$V01=[1,199],$V11=[1,200],$V21=[33,44],$V31=[33,82],$V41=[20,25,26,29,33,34,37,38,41,44,47,56,82];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"initialize_var1":8,"initialize_var_":9,"initialize_var":10,"statements_":11,"statements_with_vars":12,"statements_without_vars":13,"statements":14,"class_statements":15,"class_statements_":16,"class_statement":17,"initialize_vars":18,"statement_with_semicolon":19,"while":20,"(":21,"e":22,")":23,"bracket_statements":24,"for":25,"IDENTIFIER":26,"in":27,"parentheses_expr":28,"func":29,"parameters":30,"->":31,"{":32,"}":33,"if":34,"elif":35,"class_":36,"class":37,"enum":38,"case":39,"identifiers":40,"struct":41,"struct_statements":42,"struct_statement":43,"var":44,":":45,"type":46,"return":47,"+=":48,"-=":49,"*=":50,"/=":51,"access_array":52,"=":53,".":54,"dot_expr":55,"let":56,"or":57,"and":58,"<":59,">":60,"==":61,"~=":62,"+":63,"-":64,"..":65,"*":66,"/":67,"%":68,"^":69,"not_expr":70,"named_parameters":71,",":72,"named_parameter":73,"!":74,"[":75,"]":76,"function_call":77,"parentheses_expr_":78,"NUMBER":79,"STRING_LITERAL":80,"function":81,"end":82,"exprs":83,"key_values":84,"parameter":85,"out":86,"inout":87,"types":88,"else_if":89,"else":90,"key_value":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"while",21:"(",23:")",25:"for",26:"IDENTIFIER",27:"in",29:"func",31:"->",32:"{",33:"}",34:"if",37:"class",38:"enum",39:"case",41:"struct",44:"var",45:":",47:"return",48:"+=",49:"-=",50:"*=",51:"/=",53:"=",54:".",56:"let",57:"or",58:"and",59:"<",60:">",61:"==",62:"~=",63:"+",64:"-",65:"..",66:"*",67:"/",68:"%",69:"^",72:",",74:"!",75:"[",76:"]",79:"NUMBER",80:"STRING_LITERAL",81:"function",82:"end",86:"out",87:"inout",89:"else_if",90:"else"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[8,1],[10,1],[11,1],[11,1],[11,2],[12,2],[12,1],[13,2],[13,1],[14,1],[15,1],[16,2],[16,1],[18,2],[18,1],[7,1],[7,5],[7,5],[7,10],[7,6],[7,5],[7,1],[36,5],[36,6],[36,5],[42,2],[42,1],[43,2],[43,4],[17,1],[17,2],[17,10],[17,11],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,4],[19,6],[9,4],[9,6],[22,3],[22,3],[22,4],[22,3],[22,4],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[71,3],[71,1],[73,3],[70,2],[70,1],[55,3],[55,1],[52,4],[77,3],[77,4],[78,1],[78,1],[78,1],[28,6],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[28,1],[46,3],[46,4],[46,1],[85,4],[85,4],[85,4],[85,3],[30,3],[30,1],[30,0],[83,3],[83,1],[88,3],[88,1],[35,6],[35,5],[35,2],[40,3],[40,1],[84,3],[84,1],[91,3],[24,3],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 13: case 19:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 14: case 18: case 20: case 32: case 75: case 98:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = ["semicolon",$$[$0]]
break;
case 6:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 7:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 9:
this.$ = [["semicolon",["initialize_var"].concat($$[$0])]]
break;
case 10:
this.$ = [["lexically_scoped_vars",[["lexically_scoped_var"].concat($$[$0-1])],$$[$0]]]
break;
case 11:
this.$ = $$[$0-1].concat([["semicolon",$$[$0]]]);
break;
case 15:
this.$ = ["statements",$$[$0]]
break;
case 16:
this.$ = ["class_statements",$$[$0]]
break;
case 17: case 31:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 21: case 113:
this.$ = ["semicolon",$$[$0]];
break;
case 22:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 24:
this.$ = ["function","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 25:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 26:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 28:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 29:
this.$ = ["enum",$$[$0-4],$$[$0-1]];
break;
case 30:
this.$ = ["struct",$$[$0-3],["struct_statements",$$[$0-1]]];
break;
case 33:
this.$ = ["struct_statement","Object",$$[$0]];
break;
case 34:
this.$ = ["struct_statement",$$[$0],$$[$0-2]];
break;
case 35:
this.$ = ["initialize_instance_var_with_value","public"].concat($$[$0]);
break;
case 36:
this.$ = ["initialize_instance_var","public","Object",$$[$0]];
break;
case 37: case 38:
this.$ = ["instance_method","public",$$[$0-3],$$[$0-8],$$[$0-6],$$[$0-1]];
break;
case 39:
this.$ = ["return",$$[$0]];
break;
case 40:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 41: case 42: case 43: case 44: case 55: case 57: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 45: case 46:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 47:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 48:
this.$ = ["initialize_constant","Object",$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ["initialize_constant",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 50:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 51:
this.$ = [$$[$0-2],$$[$0-4],$$[$0]];
break;
case 52:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 54: case 56:
this.$ = [$$[$0-2],$$[$0-3],$$[$0-1]];
break;
case 58:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 67:
this.$ = ["-",$$[$0]];
break;
case 69: case 109:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 70: case 101: case 103: case 108: case 110:
this.$ = [$$[$0]];
break;
case 71:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 72:
this.$ = ["!", [".",$$[$0]]];
break;
case 73:
this.$ = [".", $$[$0]];
break;
case 74: case 97: case 100: case 102: case 107:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 76:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 77:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 78:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 79: case 80: case 81:
this.$ = yytext;
break;
case 82:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 83:
this.$ = ["parentheses",$$[$0-1]];
break;
case 84:
this.$ = ["initializer_list","Object",[]];
break;
case 85:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 86:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 90:
this.$ = [$$[$0-1],"[]"];
break;
case 91:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 93:
this.$ = ["out_parameter",$$[$0],$$[$0-3]];
break;
case 94:
this.$ = ["in_parameter",$$[$0],$$[$0-3]];
break;
case 95:
this.$ = ["ref_parameter",$$[$0],$$[$0-3]];
break;
case 96:
this.$ = [$$[$0], $$[$0-2]];
break;
case 99:
this.$ = [];
break;
case 104:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 105:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 106:
this.$ = ["else",$$[$0]];
break;
case 111:
this.$ = [$$[$0-2],$$[$0]]
break;
case 112:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:12,19:6,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,36:11,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,52:16,56:$Va},{1:[3]},{5:[1,21],6:22,7:4,8:5,9:12,19:6,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,36:11,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,52:16,56:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vc,[2,21]),{21:[1,23]},{26:[1,24]},{26:[1,25]},{21:[1,26]},o($Vc,[2,27]),o($Vc,[2,6]),{21:$Vd,22:27,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{26:[1,43],40:42},{48:[1,44],49:[1,45],50:[1,46],51:[1,47],53:[1,48],54:[1,49],75:$Vl},{53:[1,51]},{26:[1,52]},{26:[1,53]},{26:[1,54]},{26:[1,55]},{1:[2,1]},o($Vb,[2,2]),{21:$Vd,22:56,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{27:[1,57]},{21:[1,58]},{21:$Vd,22:59,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($Vm,[2,39],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{21:$Vd,22:73,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($VA,[2,68]),{21:$Vd,26:$Ve,28:32,52:36,55:74,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($VA,[2,73]),o($VA,[2,75],{54:[1,75]}),{21:[1,76]},{21:$Vd,22:77,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:81,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,76:[1,78],77:37,78:38,79:$Vi,80:[1,83],81:$Vk,83:79,84:80,91:82},o($VB,[2,87]),o($VB,[2,88]),o($VB,[2,89]),o($VB,[2,80],{21:[1,84],75:$Vl}),o($VB,[2,79]),o($VB,$VC),o($Vm,[2,40]),o($Vc,$VD,{45:$VE,53:$VF,72:$VG}),{21:$Vd,22:88,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:89,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:90,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:91,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:92,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,26:$Ve,28:32,52:36,55:93,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:94,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:95,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{45:[1,97],53:[1,96]},{32:[1,98]},{32:[1,99]},{32:[1,100]},{23:[1,101],57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz},{21:$Vd,26:$Ve,28:102,52:36,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{23:$VH,26:$VI,30:103,85:104},{23:[1,106],57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz},{21:$Vd,22:107,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:108,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:110,26:$Ve,28:32,52:36,53:[1,109],55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:112,26:$Ve,28:32,52:36,53:[1,111],55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:113,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:114,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:115,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:116,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:117,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:118,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:119,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:120,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:121,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($VA,[2,67]),o($VA,[2,72]),{21:$Vd,26:$Ve,28:32,52:36,55:122,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{23:$VH,26:$VI,30:123,85:104},{23:[1,124],57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz},o($VB,[2,84]),{76:[1,125]},{72:[1,127],76:[1,126]},{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,72:[1,128],76:[2,101]},o($VJ,[2,110]),o([54,57,58,59,60,61,62,63,64,65,66,67,68,69,72,76],$VC,{45:$VK}),{23:[1,130],26:$VL,71:131,73:132},{21:$Vd,22:134,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{26:$VM,46:135,75:$VN},{26:$VO,40:138},o($Vm,[2,41],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($Vm,[2,42],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($Vm,[2,43],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($Vm,[2,44],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($Vm,[2,46],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($Vm,[2,47]),{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,76:[1,140]},o($Vm,[2,45],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{21:$Vd,22:141,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{26:$VM,46:142,75:$VN},{9:146,15:143,16:144,17:145,29:$VP,37:$VQ,44:$VR},{39:[1,150]},{42:151,43:152,44:$VS},{19:156,24:154,26:$V2,32:$VT,44:$VU,47:$V9,52:16,56:$Va},{19:156,24:158,26:$V2,32:$VT,44:$VU,47:$V9,52:16,56:$Va},{23:[1,159]},{23:[2,98],72:[1,160]},{45:[1,161]},{19:156,24:162,26:$V2,32:$VT,44:$VU,47:$V9,52:16,56:$Va},o([5,20,23,25,26,29,33,34,37,38,41,44,47,56,57,72,76,82,89,90],[2,52],{58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o([5,20,23,25,26,29,33,34,37,38,41,44,47,56,57,58,72,76,82,89,90],[2,53],{59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{21:$Vd,22:163,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($VV,[2,55],{63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{21:$Vd,22:164,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($VV,[2,59],{63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VV,[2,57],{63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VV,[2,58],{63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VW,[2,60],{66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VW,[2,61],{66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VW,[2,62],{66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VX,[2,63],{69:$Vz}),o($VX,[2,64],{69:$Vz}),o($VX,[2,65],{69:$Vz}),o($VA,[2,66]),o($VA,[2,74]),{23:[1,165]},o($VB,[2,83]),o($VB,[2,85]),o($VB,[2,86]),{80:[1,167],91:166},{21:$Vd,22:81,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk,83:168},{21:$Vd,22:169,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($VB,[2,77]),{23:[1,170],72:[1,171]},o($VY,[2,70]),{45:[1,172]},o($Vc,[2,50],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{53:[1,173]},{26:$VM,46:174,75:$VN},o($VZ,[2,92],{59:[1,175]}),o($V_,[2,107]),o($V_,$VD,{72:$VG}),o([5,20,23,25,26,29,32,33,34,37,38,41,44,47,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,76,82,89,90],[2,76]),o($Vm,[2,48],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{53:[1,176]},{33:[1,177]},{33:[2,16]},{9:146,16:178,17:145,29:$VP,33:[2,18],37:$VQ,44:$VR},o($V$,[2,35]),{26:[1,179]},{26:[1,180]},{29:[1,181]},{26:$VO,40:182},{33:[1,183]},{33:[2,32],42:184,43:152,44:$VS},{26:$VO,40:185},o($Vc,[2,22]),{7:191,9:189,11:187,12:188,13:190,14:186,19:6,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,36:11,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,52:16,56:$Va},o($Vm,[2,113]),{26:$VO,40:42},o($Vc,[2,23]),{31:[1,192]},{23:$VH,26:$VI,30:193,85:104},{26:$VM,27:[1,195],46:197,75:$VN,86:[1,194],87:[1,196]},o($Vc,[2,26],{35:198,89:$V01,90:$V11}),o($VV,[2,54],{63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VV,[2,56],{63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{7:191,9:189,11:187,12:188,13:190,14:201,19:6,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,36:11,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,52:16,56:$Va},o($VJ,[2,109]),{45:$VK},{76:[2,100]},o($VJ,[2,111],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VB,[2,78]),{26:$VL,73:202},{21:$Vd,22:203,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{21:$Vd,22:204,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},{76:[1,205]},{26:$VM,46:206,75:$VN},{21:$Vd,22:207,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($Vc,[2,28]),{33:[2,17]},o($V$,[2,36],{45:$VE,53:$VF}),{21:[1,208]},{26:[1,209]},{33:[1,210]},o($Vc,[2,30]),{33:[2,31]},o($V21,[2,33],{45:[1,211]}),{33:[1,212]},o($V31,[2,15]),o($V31,[2,8]),o($V31,[2,9],{19:6,36:11,52:16,13:190,7:191,12:213,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,37:$V5,38:$V6,41:$V7,44:$VU,47:$V9,56:$Va}),o($V31,[2,12],{19:6,36:11,9:12,52:16,8:214,7:215,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,56:$Va}),o($V41,[2,14]),{26:[1,216]},{23:[2,97]},{26:$VM,46:217,75:$VN},{26:$VM,46:218,75:$VN},{26:$VM,46:219,75:$VN},o($VY,[2,96]),o($Vc,[2,25]),{21:[1,220]},{19:156,24:221,26:$V2,32:$VT,44:$VU,47:$V9,52:16,56:$Va},{82:[1,222]},o($VY,[2,69]),o($VY,[2,71],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($Vc,[2,51],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),o($VZ,[2,90]),{60:[1,223]},o($Vm,[2,49],{57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz}),{23:$VH,26:$VI,30:224,85:104},{21:[1,225]},o($Vc,[2,29]),{26:$VM,46:226,75:$VN},o($Vm,[2,112]),o($V31,[2,10]),o($V31,[2,11]),o($V41,[2,13]),{32:[1,227]},o($VY,[2,93]),o($VY,[2,94]),o($VY,[2,95]),{21:$Vd,22:228,26:$Ve,28:32,52:36,55:31,64:$Vf,70:29,74:$Vg,75:$Vh,77:37,78:38,79:$Vi,80:$Vj,81:$Vk},o($Vc,[2,106]),o($VB,[2,82]),o($VZ,[2,91]),{23:[1,229]},{23:$VH,26:$VI,30:230,85:104},o($V21,[2,34]),{7:191,9:189,11:187,12:188,13:190,14:231,19:6,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,36:11,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,52:16,56:$Va},{23:[1,232],57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz},{31:[1,233]},{23:[1,234]},{33:[1,235]},{19:156,24:236,26:$V2,32:$VT,44:$VU,47:$V9,52:16,56:$Va},{26:[1,237]},{31:[1,238]},o($Vc,[2,24]),o($Vc,[2,105],{35:239,89:$V01,90:$V11}),{32:[1,240]},{26:[1,241]},o($Vc,[2,104]),{7:191,9:189,11:187,12:188,13:190,14:242,19:6,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,36:11,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,52:16,56:$Va},{32:[1,243]},{33:[1,244]},{7:191,9:189,11:187,12:188,13:190,14:245,19:6,20:$V0,25:$V1,26:$V2,29:$V3,34:$V4,36:11,37:$V5,38:$V6,41:$V7,44:$V8,47:$V9,52:16,56:$Va},o($V$,[2,37]),{33:[1,246]},o($V$,[2,38])],
defaultActions: {21:[2,1],144:[2,16],168:[2,100],178:[2,17],184:[2,31],193:[2,97]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 79
break;
case 2:return 80
break;
case 3:return "$"
break;
case 4:return "func"
break;
case 5:return "inout"
break;
case 6:return 86
break;
case 7:return "end"
break;
case 8:return 'then'
break;
case 9:return 39
break;
case 10:return 56
break;
case 11:return 44
break;
case 12:return 34
break;
case 13:return 37
break;
case 14:return 41
break;
case 15:return 90
break;
case 16:return 47
break;
case 17:return 20
break;
case 18:return 25
break;
case 19:return 'repeat'
break;
case 20:return 'until'
break;
case 21:return 'of'
break;
case 22:return 'not'
break;
case 23:return 48
break;
case 24:return 50
break;
case 25:return 49
break;
case 26:return 51
break;
case 27:return 72
break;
case 28:return 65
break;
case 29:return 54
break;
case 30:return 45
break;
case 31:return 58
break;
case 32:return 57
break;
case 33:return 60
break;
case 34:return 59
break;
case 35:return 62
break;
case 36:return 61
break;
case 37:return 53
break;
case 38:return 50
break;
case 39:return 66
break;
case 40:return 67
break;
case 41:return 68
break;
case 42:return 31
break;
case 43:return 64
break;
case 44:return 63
break;
case 45:return 69
break;
case 46:return 32
break;
case 47:return 33
break;
case 48:return 75
break;
case 49:return 76
break;
case 50:return 21
break;
case 51:return 23
break;
case 52:return '_'
break;
case 53:return 'pairs'
break;
case 54:return 27
break;
case 55:return 'do'
break;
case 56:return 26
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:func\b)/,/^(?:inout\b)/,/^(?:out\b)/,/^(?:end\b)/,/^(?:then\b)/,/^(?:case\b)/,/^(?:let\b)/,/^(?:var\b)/,/^(?:if\b)/,/^(?:class\b)/,/^(?:struct\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:\+=)/,/^(?:\*=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:->)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = swift_parser;
exports.Parser = swift_parser.Parser;
exports.parse = function () { return swift_parser.parse.apply(swift_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}