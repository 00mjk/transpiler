/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mathematical_notation_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,11],$V2=[2,49],$V3=[1,10],$V4=[1,26],$V5=[1,30],$V6=[1,19],$V7=[1,21],$V8=[1,22],$V9=[1,28],$Va=[1,29],$Vb=[1,24],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,46],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[1,54],$Vz=[11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,35,50],$VA=[2,40],$VB=[2,41],$VC=[11,15,16,17,18,50],$VD=[11,15,16,17,18,19,20,50],$VE=[11,15,16,17,18,19,20,21,22,50],$VF=[11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,50],$VG=[11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,50],$VH=[11,12,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,50];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"IDENTIFIER":8,"(":9,"parameters":10,")":11,"=":12,"{":13,"e":14,"}":15,"\\u2194":16,"<->":17,"->":18,"\\u2228":19,"||":20,"\\u2227":21,"&&":22,"<=":23,"<":24,">=":25,">":26,"!=":27,"\\u2260":28,"arithmetic_expr":29,"+":30,"-":31,"%":32,"*":33,"/":34,"^":35,"not_expr":36,"!":37,"parentheses_expr":38,"\\u00ac":39,"forall_":40,"forall":41,"\\u2200":42,"NUMBER":43,"parentheses_expr_":44,"exprs":45,"\\u221e":46,"\\u03c0":47,"STRING_LITERAL":48,"parameter":49,",":50,"void":51,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"IDENTIFIER",9:"(",11:")",12:"=",13:"{",15:"}",16:"\\u2194",17:"<->",18:"->",19:"\\u2228",20:"||",21:"\\u2227",22:"&&",23:"<=",24:"<",25:">=",26:">",27:"!=",28:"\\u2260",30:"+",31:"-",32:"%",33:"*",34:"/",35:"^",37:"!",39:"\\u00ac",41:"forall",42:"\\u2200",43:"NUMBER",46:"\\u221e",47:"\\u03c0",48:"STRING_LITERAL",50:",",51:"void"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[6,8],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,1],[36,2],[36,2],[36,1],[40,1],[40,1],[38,2],[38,3],[38,3],[38,4],[38,1],[44,3],[44,1],[44,1],[44,1],[44,1],[44,1],[49,1],[10,3],[10,1],[10,1],[10,0],[45,3],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 47:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5:
this.$ = ["function","public","double",$$[$0-7],$$[$0-5],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 6: case 7:
this.$ = ["iff",$$[$0-2],$$[$0]];
break;
case 8:
this.$ = ["implies",$$[$0-2],$$[$0]];
break;
case 9: case 10:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 11: case 12:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 13: case 14: case 15: case 16: case 17: case 18: case 21: case 22: case 23: case 24: case 25:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ["function_call","**",[$$[$0-2],$$[$0]]];
break;
case 27:
this.$ = ["-",$$[$0]];
break;
case 29: case 30:
this.$ = ["!", [".",$$[$0]]];
break;
case 34:
this.$ = ["*",$$[$0-1],$$[$0]];
break;
case 35:
this.$ = ['forall',$$[$0-1],$$[$0]];
break;
case 36:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 37:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 39:
this.$ = ["parentheses",$$[$0-1]];
break;
case 40: case 41: case 42: case 43: case 44:
this.$ = yytext;
break;
case 45:
this.$ = ["double",$$[$0]];
break;
case 46: case 50:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 48: case 49:
this.$ = [];
break;
case 51:
this.$ = [$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,8:$V0},{1:[3]},{5:[1,5]},{4:6,5:[2,3],6:3,8:$V0},{9:[1,7]},{1:[2,1]},{5:[2,2]},{8:$V1,10:8,11:$V2,49:9,51:$V3},{11:[1,12]},{11:[2,47],50:[1,13]},{11:[2,48]},o([11,50],[2,45]),{12:[1,14]},{8:$V1,10:15,11:$V2,49:9,51:$V3},{13:[1,16]},{11:[2,46]},{8:$V4,9:$V5,14:17,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{12:$Vf,15:[1,34],16:$Vg,17:$Vh,18:$Vi,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},o($Vz,[2,20]),{8:$V4,9:$V5,14:55,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},o($Vz,[2,28]),{8:$V4,9:$V5,38:56,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,38:57,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},o($Vz,[2,31]),o($Vz,$VA,{44:58,8:[1,60],9:$V5,43:[1,59],46:$Vc,47:$Vd,48:$Ve}),{8:[1,61]},o($Vz,$VB,{9:[1,62]}),o($Vz,[2,38]),{8:[2,32]},{8:[2,33]},{8:$V4,9:$V5,14:63,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},o($Vz,[2,42]),o($Vz,[2,43]),o($Vz,[2,44]),o([5,8],[2,5]),{8:$V4,9:$V5,14:64,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:65,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:66,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:67,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:68,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:69,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:70,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:71,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:72,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:73,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:74,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:75,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:76,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:77,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:78,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:79,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:80,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:81,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:82,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,14:83,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},o($Vz,[2,27]),o($Vz,[2,29]),o($Vz,[2,30]),o($Vz,[2,34]),o($Vz,$VA),o($Vz,$VB),{8:$V4,9:$V5,38:84,40:25,41:$V9,42:$Va,43:$Vb,44:27,46:$Vc,47:$Vd,48:$Ve},{8:$V4,9:$V5,11:[1,85],14:87,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,45:86,46:$Vc,47:$Vd,48:$Ve},{11:[1,88],12:$Vf,16:$Vg,17:$Vh,18:$Vi,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy},o($VC,[2,6],{12:$Vf,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VC,[2,7],{12:$Vf,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VC,[2,8],{12:$Vf,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VD,[2,9],{12:$Vf,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VD,[2,10],{12:$Vf,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VE,[2,11],{12:$Vf,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VE,[2,12],{12:$Vf,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VF,[2,13],{30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VF,[2,14],{30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VF,[2,15],{30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VF,[2,16],{30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VF,[2,17],{30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VF,[2,18],{30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VF,[2,19],{30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VG,[2,21],{32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VG,[2,22],{32:$Vv,33:$Vw,34:$Vx,35:$Vy}),o($VH,[2,23],{35:$Vy}),o($VH,[2,24],{35:$Vy}),o($VH,[2,25],{35:$Vy}),o($Vz,[2,26]),o($Vz,[2,35]),o($Vz,[2,36]),{11:[1,89]},{11:[2,51],12:$Vf,16:$Vg,17:$Vh,18:$Vi,19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,50:[1,90]},o($Vz,[2,39]),o($Vz,[2,37]),{8:$V4,9:$V5,14:87,29:18,31:$V6,36:20,37:$V7,38:23,39:$V8,40:25,41:$V9,42:$Va,43:$Vb,44:27,45:91,46:$Vc,47:$Vd,48:$Ve},{11:[2,50]}],
defaultActions: {5:[2,1],6:[2,2],10:[2,48],15:[2,46],28:[2,32],29:[2,33],91:[2,50]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 43
break;
case 2:return 48
break;
case 3:return "if"
break;
case 4:return "else"
break;
case 5:return "return"
break;
case 6:return "void"
break;
case 7:return "case"
break;
case 8:return "printf"
break;
case 9:return "while"
break;
case 10:return "const"
break;
case 11:return "struct"
break;
case 12:return "switch"
break;
case 13:return "for"
break;
case 14:return 50
break;
case 15:return 39
break;
case 16:return 42
break;
case 17:return 46
break;
case 18:return 47
break;
case 19:return 41
break;
case 20:return ';'
break;
case 21:return '.'
break;
case 22:return ':'
break;
case 23:return 22
break;
case 24:return 21
break;
case 25:return 20
break;
case 26:return 19
break;
case 27:return 28
break;
case 28:return 27
break;
case 29:return 37
break;
case 30:return 25
break;
case 31:return '>>'
break;
case 32:return 26
break;
case 33:return 17
break;
case 34:return 18
break;
case 35:return 16
break;
case 36:return 23
break;
case 37:return 24
break;
case 38:return 12
break;
case 39:return 12
break;
case 40:return '*='
break;
case 41:return 33
break;
case 42:return 32
break;
case 43:return '/='
break;
case 44:return 34
break;
case 45:return '-='
break;
case 46:return '--'
break;
case 47:return 31
break;
case 48:return '++'
break;
case 49:return '+='
break;
case 50:return 30
break;
case 51:return 35
break;
case 52:return '?'
break;
case 53:return 13
break;
case 54:return 15
break;
case 55:return '['
break;
case 56:return ']'
break;
case 57:return 9
break;
case 58:return 11
break;
case 59:return 8
break;
case 60:return 5
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:case\b)/,/^(?:printf\b)/,/^(?:while\b)/,/^(?:const\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:\u00ac)/,/^(?:\u2200)/,/^(?:\u221e)/,/^(?:\u03c0)/,/^(?:forall\b)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\u2227)/,/^(?:\|\|)/,/^(?:\u2228)/,/^(?:\u2260)/,/^(?:!=)/,/^(?:!)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<->)/,/^(?:->)/,/^(?:\u2194)/,/^(?:<=)/,/^(?:<)/,/^(?:=)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mathematical_notation_parser;
exports.Parser = mathematical_notation_parser.Parser;
exports.parse = function () { return mathematical_notation_parser.parse.apply(mathematical_notation_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}