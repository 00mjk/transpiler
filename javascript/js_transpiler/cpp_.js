/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cpp_ = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,15],$V3=[1,14],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,11],$V8=[1,12],$V9=[1,19],$Va=[1,18],$Vb=[1,17],$Vc=[5,18],$Vd=[5,12,13,15,16,18,27,32,33,40,41,75,78,83],$Ve=[1,39],$Vf=[1,36],$Vg=[1,40],$Vh=[1,32],$Vi=[1,34],$Vj=[1,38],$Vk=[1,42],$Vl=[2,84],$Vm=[1,53],$Vn=[16,17,28,53,64,80],$Vo=[2,83],$Vp=[15,16,19,20,21,39,75,78],$Vq=[2,103],$Vr=[1,65],$Vs=[1,66],$Vt=[26,30],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[18,26,30,53,56,57,58,59,60,61,62,63,64,65,66,67,68],$VI=[1,80],$VJ=[1,85],$VK=[18,26,28,30,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68,73],$VL=[1,99],$VM=[1,102],$VN=[2,89],$VO=[1,121],$VP=[1,138],$VQ=[1,161],$VR=[18,26,30],$VS=[18,26,30,53,56,57,58],$VT=[18,26,30,53,56,57,58,59,60,61,62,63,64],$VU=[18,26,30,53,56,57,58,59,60,61,62,63,64,65,66],$VV=[18,30],$VW=[30,53],$VX=[18,26,30,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68],$VY=[1,211],$VZ=[5,12,13,15,16,18,27,32,33,40,41,75,78,82,83],$V_=[12,13,18],$V$=[1,248],$V01=[18,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,":":23,"implements":24,"statement_with_semicolon":25,";":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"for":32,"foreach":33,"type":34,"in":35,"if_statement":36,"parameters":37,"=":38,"static":39,"return":40,"const":41,"exprs":42,"access_array":43,"++":44,"--":45,"+=":46,"-=":47,"*=":48,"/=":49,".":50,"dot_expr":51,"key_values":52,",":53,"key_value":54,"STRING_LITERAL":55,"is":56,"||":57,"&&":58,"==":59,"!=":60,"<=":61,"<":62,">=":63,">":64,"+":65,"-":66,"*":67,"/":68,"initializer_list":69,"parentheses_expr":70,"[":71,"access_arr":72,"]":73,"new":74,"Dictionary":75,"NUMBER":76,"types":77,"Object":78,"parameter":79,"...":80,"elif":81,"else":82,"if":83,"else_statement":84,"add":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:":",24:"implements",26:";",27:"while",28:"(",30:")",32:"for",33:"foreach",35:"in",38:"=",39:"static",40:"return",41:"const",44:"++",45:"--",46:"+=",47:"-=",48:"*=",49:"/=",50:".",53:",",55:"STRING_LITERAL",56:"is",57:"||",58:"&&",59:"==",60:"!=",61:"<=",62:"<",63:">=",64:">",65:"+",66:"-",67:"*",68:"/",71:"[",73:"]",74:"new",75:"Dictionary",76:"NUMBER",78:"Object",80:"...",82:"else",83:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[14,7],[14,6],[14,6],[14,9],[14,8],[6,2],[6,1],[6,5],[6,9],[6,8],[6,1],[6,8],[10,6],[10,4],[10,7],[10,8],[10,7],[10,10],[10,9],[25,2],[25,5],[25,3],[25,6],[25,4],[25,2],[25,3],[25,3],[25,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[52,3],[52,1],[54,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[51,3],[51,3],[51,1],[43,4],[69,4],[69,5],[69,4],[69,5],[70,3],[70,10],[70,1],[70,3],[70,4],[70,1],[70,1],[70,1],[34,3],[34,4],[34,1],[34,1],[34,1],[79,3],[79,2],[37,3],[37,1],[37,0],[72,3],[72,1],[42,3],[42,1],[77,3],[77,1],[81,7],[81,6],[81,1],[84,2],[36,6],[36,5],[22,3],[22,1],[85,3],[85,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 66: case 88: case 91:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 107:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 25:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 26:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 27:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 28:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 29:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 30:
this.$ = ["return",$$[$0]];
break;
case 31:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 32:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 33:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 34:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 35:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 36: case 37:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 38: case 39:
this.$ = [$$[$0],$$[$0-1]];
break;
case 40: case 41: case 42: case 43: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 45:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 46: case 93: case 95: case 103: case 105:
this.$ = [$$[$0]];
break;
case 47: case 81:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 62:
this.$ = ["-",$$[$0]];
break;
case 63:
this.$ = [".", $$[$0]];
break;
case 64: case 65: case 87: case 90: case 92: case 94: case 102: case 104:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 67:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 68:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 69:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 70:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 71:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 72: case 106:
this.$= $$[$0-1];
break;
case 73:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 75:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 76:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 77: case 78: case 79:
this.$ = yytext;
break;
case 80:
this.$ = [$$[$0-2],"[]"];
break;
case 85:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 86:
this.$ = [$$[$0-1],$$[$0]];
break;
case 89:
this.$= []
break;
case 96:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 97:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 99:
this.$ = ["else",$$[$0]];
break;
case 100:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 101:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,25:4,27:$V4,32:$V5,33:$V6,34:10,36:9,40:$V7,41:$V8,43:13,75:$V9,78:$Va,83:$Vb},{1:[3]},{5:[1,22]},o($Vc,[2,3],{6:3,25:4,14:5,36:9,34:10,43:13,11:16,4:23,12:$V0,13:$V1,15:$V2,16:$V3,27:$V4,32:$V5,33:$V6,40:$V7,41:$V8,75:$V9,78:$Va,83:$Vb}),{26:[1,24]},o($Vd,[2,17]),{28:[1,25]},{28:[1,26]},{28:[1,27]},o($Vd,[2,21]),{16:[1,28],22:29},{16:$Ve,28:$Vf,29:30,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Vk,34:41,75:$V9,78:$Va},{38:[1,43]},{16:$Vl,38:[1,44],44:[1,45],45:[1,46],46:[1,47],47:[1,48],48:[1,49],49:[1,50],50:[1,51],62:$Vm,71:[1,52]},{16:[1,54]},{15:[1,58],19:[1,55],20:[1,56],21:[1,57]},{28:[1,59]},o($Vn,[2,82]),o([16,53,64,80],$Vo),o($Vp,[2,8]),o($Vp,[2,9]),{1:[2,1]},o($Vc,[2,2]),o($Vd,[2,16]),{16:$Ve,28:$Vf,29:60,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$V3,25:61,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va},{16:$Vk,34:63,75:$V9,78:$Va},{26:$Vq,28:[1,64],38:$Vr,53:$Vs},o($Vt,[2,35]),o($Vt,[2,30],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($VH,[2,61],{50:$VI}),{16:$Ve,28:$Vf,29:81,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($VH,[2,63]),{16:$Vk,34:82,75:[1,83],78:$Va},o($VH,[2,66],{28:$VJ,50:[1,84]}),{16:$Ve,28:$Vf,29:86,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($VK,[2,74]),o($VK,[2,77]),o($VK,[2,78],{71:[1,87]}),o($VK,[2,79]),{16:[1,88],22:89},o($Vn,$Vl,{62:$Vm,71:[1,90]}),{16:$Ve,28:$Vf,29:91,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:92,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($Vt,[2,38]),o($Vt,[2,39]),{16:$Ve,28:$Vf,29:93,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:94,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:95,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:96,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,43:37,51:97,55:$Vg,69:98,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,43:37,55:$Vg,70:101,72:100,73:$VL,74:$VM,76:$Vj},{16:$Vk,34:104,75:$V9,77:103,78:$Va},{17:[1,105]},{15:[1,106]},{16:[1,107]},{16:[1,108]},{16:[1,109]},{16:$Ve,28:$Vf,29:110,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{30:[1,111],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{26:[1,112]},{16:[1,113],22:29},{16:[1,114]},{16:$Vk,30:$VN,34:117,37:115,75:$V9,78:$Va,79:116},{16:$Ve,17:[1,118],28:$Vf,29:119,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$VO,22:120},{16:$Ve,28:$Vf,29:122,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:123,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:124,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:125,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:126,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:127,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:128,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:129,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:130,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:131,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:132,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:133,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:134,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,43:37,51:135,55:$Vg,69:98,70:35,74:$Vi,76:$Vj},o($VH,[2,62]),{17:[1,136],28:[1,137]},o([17,28],$Vo,{62:$VP}),{16:$Ve,28:$Vf,43:37,51:139,55:$Vg,69:98,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:142,30:[1,140],42:141,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{30:[1,143],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{16:$Ve,28:$Vf,43:37,55:$Vg,70:101,72:100,74:$VM,76:$Vj},o($Vt,$Vq,{38:[1,144],53:$Vs}),o($Vt,[2,32]),{73:$VL},o($Vt,[2,36],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($Vt,[2,37],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($Vt,[2,40],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($Vt,[2,41],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($Vt,[2,42],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($Vt,[2,43],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($Vt,[2,44]),{50:$VI},o($Vn,[2,80]),{73:[1,145]},{28:$VJ,53:[1,146],73:[2,91]},{75:[1,147]},{64:[1,148]},{53:[1,149],64:[2,95]},{7:150,8:151,10:152,11:153,12:$V0,13:$V1},{16:[1,154]},{17:[1,155]},{17:[1,156]},{23:[1,157],24:[1,158]},{30:[1,159],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{16:$V3,17:$VQ,25:162,31:160,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va},{16:$Ve,28:$Vf,29:163,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($Vt,$Vq,{38:$Vr,53:$Vs}),{35:[1,164]},{30:[1,165]},{30:[2,88],53:[1,166]},{16:[1,168],80:[1,167]},{16:$Ve,28:$Vf,29:142,42:169,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($Vt,[2,34],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($VR,[2,102]),o($VR,$Vq,{53:$Vs}),o($VS,[2,48],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($VS,[2,49],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($VS,[2,50],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($VT,[2,51],{65:$VD,66:$VE,67:$VF,68:$VG}),o($VT,[2,52],{65:$VD,66:$VE,67:$VF,68:$VG}),o($VT,[2,53],{65:$VD,66:$VE,67:$VF,68:$VG}),o($VT,[2,54],{65:$VD,66:$VE,67:$VF,68:$VG}),o($VT,[2,55],{65:$VD,66:$VE,67:$VF,68:$VG}),o($VT,[2,56],{65:$VD,66:$VE,67:$VF,68:$VG}),o($VU,[2,57],{67:$VF,68:$VG}),o($VU,[2,58],{67:$VF,68:$VG}),o($VH,[2,59]),o($VH,[2,60]),o($VH,[2,64]),{16:$Ve,18:[1,170],28:$Vf,29:142,42:171,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Ve,28:$Vf,29:142,30:[1,172],42:173,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Vk,34:174,75:$V9,78:$Va},o($VH,[2,65]),o($VK,[2,75]),{30:[1,175]},o($VV,[2,93],{53:[1,176],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),o($VK,[2,72]),{16:$Ve,28:$Vf,29:177,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o([18,26,28,30,38,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68,73],[2,67]),{16:$Ve,28:$Vf,43:37,55:$Vg,70:101,72:178,74:$VM,76:$Vj},{62:$VP},o($Vn,[2,81]),{16:$Vk,34:104,75:$V9,77:179,78:$Va},{18:[1,180]},{18:[2,4]},{8:181,10:152,11:153,12:$V0,13:$V1,18:[2,7]},{16:$Vk,34:182,39:[1,183],75:$V9,78:$Va},{17:[1,184]},{7:185,8:151,10:152,11:153,12:$V0,13:$V1},{16:$VO,22:186},{12:[1,187]},{16:[1,188]},{16:$V3,17:$VQ,25:162,31:189,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va},o($Vd,[2,18]),{4:191,6:3,9:190,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,25:4,27:$V4,32:$V5,33:$V6,34:10,36:9,40:$V7,41:$V8,43:13,75:$V9,78:$Va,83:$Vb},{26:[1,192]},{26:[1,193],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{16:[1,194]},{17:[1,195]},{16:$Vk,30:$VN,34:117,37:196,75:$V9,78:$Va,79:116},{16:[1,197]},o($VW,[2,86]),{18:[1,198]},o($VX,[2,68]),{18:[1,199]},o($VX,[2,70]),{30:[1,200]},{53:[1,201]},o($VK,[2,76]),{16:$Ve,28:$Vf,29:142,42:202,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($Vt,[2,31],{56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG}),{73:[2,90]},{64:[2,94]},o($Vd,[2,10]),{18:[2,6]},{16:[1,203]},{16:$Vk,34:204,75:$V9,78:$Va},{7:205,8:151,10:152,11:153,12:$V0,13:$V1},{18:[1,206]},{18:[1,207]},{16:[1,208]},{17:[1,209]},o($Vd,[2,101],{81:210,84:212,82:$VY}),{18:[1,213]},{18:[2,5]},o($VZ,[2,107]),{16:$V3,25:214,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va},{30:[1,215]},{4:191,6:3,9:216,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,25:4,27:$V4,32:$V5,33:$V6,34:10,36:9,40:$V7,41:$V8,43:13,75:$V9,78:$Va,83:$Vb},{30:[2,87]},o($VW,[2,85]),o($Vt,[2,33]),o($VX,[2,69]),o($VX,[2,71]),{16:$Vk,34:217,75:$V9,78:$Va},o($VV,[2,92]),{26:[1,219],28:[1,220],38:[1,218]},{16:[1,221]},{18:[1,222]},o($Vd,[2,12]),o($Vd,[2,13]),{17:[1,223]},{7:224,8:151,10:152,11:153,12:$V0,13:$V1},o($Vd,[2,100]),{16:$V3,17:$VQ,25:162,31:226,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va,83:[1,225]},o($Vd,[2,98]),o($VZ,[2,106]),{30:[1,227]},{16:$V3,17:$VQ,25:162,31:228,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va},{18:[1,229]},{64:[1,230]},{16:$Ve,28:$Vf,29:231,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($V_,[2,24]),{16:$Vk,30:$VN,34:117,37:232,75:$V9,78:$Va,79:116},{28:[1,234],38:[1,233]},o($Vd,[2,11]),{7:235,8:151,10:152,11:153,12:$V0,13:$V1},{18:[1,236]},{28:[1,237]},o($Vd,[2,99]),{16:$V3,17:$VQ,25:162,31:238,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va},o($Vd,[2,20]),o($Vd,[2,22]),{17:[1,239]},{26:[1,240],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{30:[1,241]},{16:$Ve,28:$Vf,29:242,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},{16:$Vk,30:$VN,34:117,37:243,75:$V9,78:$Va,79:116},{18:[1,244]},o($Vd,[2,15]),{16:$Ve,28:$Vf,29:245,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($Vd,[2,19]),{17:$V$,52:246,54:247},o($V_,[2,23]),{17:[1,250],26:[1,249]},{26:[1,251],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{30:[1,252]},o($Vd,[2,14]),{30:[1,253],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{18:[1,254],53:[1,255]},o($V01,[2,46]),{55:[1,256]},o($V_,[2,27]),{4:191,6:3,9:257,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,25:4,27:$V4,32:$V5,33:$V6,34:10,36:9,40:$V7,41:$V8,43:13,75:$V9,78:$Va,83:$Vb},o($V_,[2,25]),{17:[1,259],26:[1,258]},{16:$V3,17:$VQ,25:162,31:260,34:62,40:$V7,41:$V8,43:13,75:$V9,78:$Va},o($VK,[2,73]),{17:$V$,54:261},{53:[1,262]},{18:[1,263]},o($V_,[2,26]),{4:191,6:3,9:264,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,25:4,27:$V4,32:$V5,33:$V6,34:10,36:9,40:$V7,41:$V8,43:13,75:$V9,78:$Va,83:$Vb},o($Vd,[2,97],{84:212,81:265,82:$VY}),o($V01,[2,45]),{16:$Ve,28:$Vf,29:266,43:37,51:33,55:$Vg,66:$Vh,69:31,70:35,74:$Vi,76:$Vj},o($V_,[2,29]),{18:[1,267]},o($Vd,[2,96]),{18:[1,268],56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},o($V_,[2,28]),o($V01,[2,47])],
defaultActions: {22:[2,1],151:[2,4],178:[2,90],179:[2,94],181:[2,6],191:[2,5],196:[2,87]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 76
break;
case 2:return 55
break;
case 3:return "class"
break;
case 4:return "public"
break;
case 5:return "extends"
break;
case 6:return "implements"
break;
case 7:return "Dictionary"
break;
case 8:return "private"
break;
case 9:return "static"
break;
case 10:return "if"
break;
case 11:return "in"
break;
case 12:return "else"
break;
case 13:return "return"
break;
case 14:return "while"
break;
case 15:return "foreach"
break;
case 16:return "const"
break;
case 17:return "for"
break;
case 18:return "new"
break;
case 19:return 53
break;
case 20:return 26
break;
case 21:return 50
break;
case 22:return 23
break;
case 23:return 58
break;
case 24:return 57
break;
case 25:return 63
break;
case 26:return 64
break;
case 27:return 61
break;
case 28:return 62
break;
case 29:return 59
break;
case 30:return 38
break;
case 31:return 48
break;
case 32:return 67
break;
case 33:return 49
break;
case 34:return 68
break;
case 35:return 47
break;
case 36:return 45
break;
case 37:return 66
break;
case 38:return 44
break;
case 39:return 46
break;
case 40:return 65
break;
case 41:return '^'
break;
case 42:return 17
break;
case 43:return 18
break;
case 44:return 71
break;
case 45:return 73
break;
case 46:return 28
break;
case 47:return 30
break;
case 48:return 16
break;
case 49:return 5
break;
case 50:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:foreach\b)/,/^(?:const\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cpp_;
exports.Parser = cpp_.Parser;
exports.parse = function () { return cpp_.parse.apply(cpp_, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}