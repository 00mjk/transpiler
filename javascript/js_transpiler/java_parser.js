/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var java_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,19],$V2=[1,15],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,11],$V7=[1,12],$V8=[1,20],$V9=[1,21],$Va=[1,17],$Vb=[5,18,42],$Vc=[5,12,13,16,18,28,32,34,42,46,47,90,91,97],$Vd=[2,8],$Ve=[1,30],$Vf=[1,31],$Vg=[1,41],$Vh=[1,33],$Vi=[1,36],$Vj=[1,35],$Vk=[1,40],$Vl=[1,43],$Vm=[16,71],$Vn=[2,101],$Vo=[16,17,29,59,73,93],$Vp=[16,17,29,59,71,73,93],$Vq=[27,31],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[2,94],$VG=[1,81],$VH=[1,82],$VI=[18,27,31,36,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VJ=[1,85],$VK=[1,91],$VL=[1,90],$VM=[1,93],$VN=[18,27,29,31,36,56,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,94],$VO=[1,96],$VP=[2,120],$VQ=[1,97],$VR=[1,98],$VS=[1,106],$VT=[1,149],$VU=[1,162],$VV=[18,27,31,36,59,65,66,67],$VW=[18,27,31,36,59,65,66,67,68,69,70,71,72,73],$VX=[18,27,31,36,59,65,66,67,68,69,70,71,72,73,74,75],$VY=[1,171],$VZ=[18,31],$V_=[18,27,31],$V$=[1,185],$V01=[1,198],$V11=[2,106],$V21=[18,27,31,36,56,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$V31=[1,222],$V41=[5,12,13,16,18,28,32,34,42,46,47,90,91,96,97],$V51=[18,44],$V61=[31,59],$V71=[12,13,18];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"bracket_statements":25,"statement_with_semicolon":26,";":27,"while":28,"(":29,"e":30,")":31,"switch":32,"case_statements":33,"for":34,"type":35,":":36,"if_statement":37,"static":38,"parameters":39,"case_statement":40,"case":41,"break":42,"case_statements_":43,"default":44,"=":45,"return":46,"final":47,"exprs":48,"access_array":49,"++":50,"--":51,"+=":52,"-=":53,"*=":54,"/=":55,".":56,"dot_expr":57,"key_values":58,",":59,"key_value":60,"put":61,"STRING_LITERAL":62,"lambda_parameters":63,"->":64,"instanceof":65,"||":66,"&&":67,"==":68,"!=":69,"<=":70,"<":71,">=":72,">":73,"+":74,"-":75,"*":76,"/":77,"%":78,"initializer_list":79,"not_expr":80,"!":81,"parentheses_expr":82,"[":83,"access_arr":84,"]":85,"new":86,"NUMBER":87,"type_":88,"types":89,"Object":90,"HashMap":91,"parameter":92,"...":93,"][":94,"elif":95,"else":96,"if":97,"else_statement":98,"add":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",27:";",28:"while",29:"(",31:")",32:"switch",34:"for",36:":",38:"static",41:"case",42:"break",44:"default",45:"=",46:"return",47:"final",50:"++",51:"--",52:"+=",53:"-=",54:"*=",55:"/=",56:".",59:",",61:"put",62:"STRING_LITERAL",64:"->",65:"instanceof",66:"||",67:"&&",68:"==",69:"!=",70:"<=",71:"<",72:">=",73:">",74:"+",75:"-",76:"*",77:"/",78:"%",81:"!",83:"[",85:"]",86:"new",87:"NUMBER",90:"Object",91:"HashMap",93:"...",94:"][",96:"else",97:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[25,3],[25,2],[6,2],[6,1],[6,5],[6,7],[6,9],[6,10],[6,1],[6,10],[40,6],[43,2],[43,1],[33,4],[33,1],[10,8],[10,6],[10,4],[10,5],[10,7],[10,8],[10,7],[10,10],[10,9],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[58,3],[58,1],[60,6],[63,3],[63,1],[30,5],[30,9],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,2],[30,1],[80,2],[80,1],[57,3],[57,3],[57,1],[49,4],[79,4],[79,5],[79,4],[79,5],[82,3],[82,1],[82,3],[82,4],[82,1],[82,1],[82,1],[35,3],[35,4],[35,1],[88,1],[88,1],[88,1],[92,3],[92,2],[39,3],[39,1],[39,0],[84,3],[84,1],[48,3],[48,1],[89,3],[89,1],[95,7],[95,6],[95,1],[98,2],[37,6],[37,5],[22,3],[22,1],[99,3],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 27:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 28: case 83: case 105: case 108:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$= $$[$0-1];
break;
case 17: case 18:
this.$ = ["semicolon",$$[$0-1]];
break;
case 20:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 22:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["foreach",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 29:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 31:
this.$ = ["constructor",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 32:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 33:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["initialize_static_instance_var",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 35:
this.$ = ["initialize_static_instance_var_with_value",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 36:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 37:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 38:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 39:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 40:
this.$ = ["return",$$[$0]];
break;
case 41:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 43:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 44:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 46: case 47:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = [$$[$0],$$[$0-1]];
break;
case 50: case 51: case 52: case 53: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 54:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 55:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 56: case 110: case 112: case 120: case 122:
this.$ = [$$[$0]];
break;
case 57: case 97:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 58:
this.$ = [["Object",$$[$0-2]]].concat($$[$0]);
break;
case 59:
this.$ = [["Object",$$[$0]]]
break;
case 60:
this.$= ["anonymous_function","Object",[["Object",$$[$0-4]]],$$[$0-1]]
break;
case 61:
this.$= ["anonymous_function","Object",[["Object",$$[$0-7]]].concat($$[$0-5]),$$[$0-1]]
break;
case 77:
this.$ = ["-",$$[$0]];
break;
case 79:
this.$ = ["!", [".",$$[$0]]];
break;
case 80:
this.$ = [".", $$[$0]];
break;
case 81: case 82: case 104: case 107: case 109: case 111: case 119: case 121:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 84:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 85:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 86:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 87:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 88:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 89:
this.$= ["parentheses",$$[$0-1]];
break;
case 91:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 92:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 93: case 94: case 95:
this.$ = yytext;
break;
case 96:
this.$ = [$$[$0-2],"[]"];
break;
case 102:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 103:
this.$ = [$$[$0-1],$$[$0]];
break;
case 106:
this.$= []
break;
case 113:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 114:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 116:
this.$ = ["else",$$[$0]];
break;
case 117:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 118:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{1:[3]},{5:[1,22]},o($Vb,[2,3],{6:3,26:4,14:5,37:9,35:13,49:14,11:16,88:18,4:23,12:$V0,13:$V1,16:$V2,28:$V3,32:$V4,34:$V5,46:$V6,47:$V7,90:$V8,91:$V9,97:$Va}),{27:[1,24]},o($Vc,[2,19]),{29:[1,25]},{29:[1,26]},{29:[1,27]},o($Vc,[2,24]),o([15,19,20,21],$Vd,{38:[1,28]}),{16:$Ve,29:$Vf,30:29,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Vl,35:42,88:18,90:$V8,91:$V9},{16:[1,44],22:45},{45:[1,46]},o($Vm,$Vn,{45:[1,47],50:[1,48],51:[1,49],52:[1,50],53:[1,51],54:[1,52],55:[1,53],56:[1,54],83:[1,55]}),{15:[1,56],19:[1,57],20:[1,58],21:[1,59]},{29:[1,60]},o($Vo,[2,98],{71:[1,61]}),o([15,16,19,20,21,38,90,91],[2,9]),o($Vp,[2,99]),o($Vp,[2,100]),{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,18]),{16:$Ve,29:$Vf,30:62,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:63,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$V2,26:64,35:65,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9},{16:$Vl,35:66,88:18,90:$V8,91:$V9},o($Vq,[2,40],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o([18,27,29,31,36,56,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VF,{64:$VG,83:$VH}),{16:[1,83],29:$Vf,30:84,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($VI,[2,76],{56:$VJ}),{16:$Ve,29:$Vf,30:86,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($VI,[2,78]),{16:$Vl,35:87,88:18,90:$V8,91:$V9},{16:$VK,29:$VL,49:39,57:88,62:$Vg,79:89,82:38,86:$Vj,87:$Vk},o($VI,[2,80]),o($VI,[2,83],{29:$VM,56:[1,92]}),o($VN,[2,90]),o($VN,[2,93]),o($VN,[2,95]),{16:[1,94],22:95},o($Vp,$Vn,{83:$VO}),o($Vq,$VP,{45:$VQ,59:$VR}),o($Vq,[2,45]),{16:$Ve,29:$Vf,30:99,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:100,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($Vq,[2,48]),o($Vq,[2,49]),{16:$Ve,29:$Vf,30:101,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:102,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:103,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:104,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$VK,29:$VL,49:39,57:105,62:$Vg,79:89,82:38,86:$Vj,87:$Vk},{16:$VK,29:$VL,49:39,62:$Vg,82:108,84:107,85:$VS,87:$Vk},{16:[1,109]},{15:[1,110]},{16:[1,111]},{16:[1,112]},{16:$Ve,29:$Vf,30:113,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Vl,35:115,88:18,89:114,90:$V8,91:$V9},{31:[1,116],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{31:[1,117],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{27:[1,118]},{16:[1,119],22:45},{16:[1,120]},{16:$Ve,29:$Vf,30:121,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:122,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:123,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:124,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:125,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:126,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:127,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:128,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:129,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:130,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:131,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:132,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:133,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:134,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{17:[1,135]},{16:$VK,29:$VL,49:39,62:$Vg,82:108,84:107,87:$Vk},o([29,31,56,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VF,{59:[1,136],64:$VG,83:$VH}),{31:[1,137],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{16:$VK,29:$VL,49:39,57:138,62:$Vg,79:89,82:38,86:$Vj,87:$Vk},o($VI,[2,77]),{17:[1,139],29:[1,140]},o($VI,[2,79]),{56:$VJ},{16:$Ve,29:$Vf,30:84,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($VN,$VF,{83:$VH}),{16:$VK,29:$VL,49:39,57:141,62:$Vg,79:89,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:144,31:[1,142],48:143,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($Vq,$VP,{45:[1,145],59:$VR}),o($Vq,[2,42]),{85:$VS},{16:$Ve,17:[1,146],29:$Vf,30:147,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$VT,22:148},o($Vq,[2,46],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($Vq,[2,47],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($Vq,[2,50],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($Vq,[2,51],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($Vq,[2,52],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($Vq,[2,53],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($Vq,[2,54]),o($Vo,[2,96]),{85:[1,150]},{29:$VM,85:[2,108],94:[1,151]},{17:[1,152],23:[1,153],24:[1,154]},{16:[1,155]},{17:[1,156]},{17:[1,157]},{31:[1,158],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{73:[1,159]},{59:[1,160],73:[2,112]},{16:$V2,17:$VU,25:161,26:163,35:13,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9},{17:[1,164]},{16:$Ve,29:$Vf,30:165,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{27:$VP,36:[1,166],45:$VQ,59:$VR},{29:[1,167]},o($VV,[2,62],{68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VV,[2,63],{68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VV,[2,64],{68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VW,[2,65],{74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VW,[2,66],{74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VW,[2,67],{74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VW,[2,68],{74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VW,[2,69],{74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VW,[2,70],{74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($VX,[2,71],{76:$VC,77:$VD,78:$VE}),o($VX,[2,72],{76:$VC,77:$VD,78:$VE}),o($VI,[2,73]),o($VI,[2,74]),o($VI,[2,75]),{4:169,6:3,9:168,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{16:$VY,63:170},o($VN,[2,89]),o($VI,[2,81]),{16:$Ve,18:[1,172],29:$Vf,30:144,48:173,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:144,31:[1,174],48:175,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($VI,[2,82]),o($VN,[2,91]),{31:[1,176]},o($VZ,[2,110],{59:[1,177],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),{16:$Ve,29:$Vf,30:178,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Ve,29:$Vf,30:144,48:179,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($Vq,[2,44],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),o($V_,[2,119]),o($V_,$VP,{59:$VR}),o([18,27,29,31,36,45,56,59,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,94],[2,84]),{16:$VK,29:$VL,49:39,62:$Vg,82:108,84:180,87:$Vk},{7:181,8:182,10:183,11:184,12:$V$,13:$V1},{16:[1,186]},{16:[1,187]},{17:[1,188]},{7:189,8:182,10:183,11:184,12:$V$,13:$V1},{16:$VT,22:190},{16:$V2,17:$VU,25:191,26:163,35:13,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9},o($Vo,[2,97]),{16:$Vl,35:115,88:18,89:192,90:$V8,91:$V9},o($Vc,[2,20]),{4:169,6:3,9:193,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{27:[1,194]},{33:195,40:197,41:$V01,43:196},{27:[1,199],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{16:[1,200]},{16:$Vl,31:$V11,35:203,39:201,88:18,90:$V8,91:$V9,92:202},{18:[1,204]},o([18,42],[2,5]),{31:[1,205]},{31:[2,59],59:[1,206]},o($V21,[2,85]),{18:[1,207]},o($V21,[2,87]),{31:[1,208]},o($VN,[2,92]),{16:$Ve,29:$Vf,30:144,48:209,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($Vq,[2,41],{65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE}),{18:[1,210]},{85:[2,107]},{18:[1,211]},{18:[2,4]},{8:212,10:183,11:184,12:$V$,13:$V1,18:[2,7]},{16:[1,213],35:214,38:[1,215],88:18,90:$V8,91:$V9},o([16,38,90,91],$Vd),{17:[1,216]},{17:[1,217]},{7:218,8:182,10:183,11:184,12:$V$,13:$V1},{18:[1,219]},{18:[1,220]},o($Vc,[2,118],{95:221,98:223,96:$V31}),{73:[2,111]},{18:[1,224]},o($V41,[2,17]),{18:[1,225]},{18:[2,30],44:[1,226]},o($V51,[2,28],{40:197,43:227,41:$V01}),{16:$Ve,29:$Vf,30:228,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$V2,26:229,35:13,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9},{31:[1,230]},{31:[1,231]},{31:[2,105],59:[1,232]},{16:[1,234],93:[1,233]},o($VI,[2,60]),{64:[1,235]},{16:$VY,63:236},o($V21,[2,86]),o($V21,[2,88]),o($VZ,[2,109]),o($Vq,[2,43]),o($Vc,[2,10]),{18:[2,6]},o($Vm,$Vn,{29:[1,237],83:$VO}),{16:[1,238]},{16:$Vl,35:239,88:18,90:$V8,91:$V9},{7:240,8:182,10:183,11:184,12:$V$,13:$V1},{7:241,8:182,10:183,11:184,12:$V$,13:$V1},{18:[1,242]},o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,117]),{16:$V2,17:$VU,25:244,26:163,35:13,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:[1,243]},o($Vc,[2,115]),o($V41,[2,16]),o($Vc,[2,21]),{36:[1,245]},o($V51,[2,27]),{36:[1,246],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{31:[1,247]},{17:[1,248]},{17:[1,249]},{16:$Vl,31:$V11,35:203,39:250,88:18,90:$V8,91:$V9,92:202},{16:[1,251]},o($V61,[2,103]),{17:[1,252]},{31:[2,58]},{16:$Vl,31:$V11,35:203,39:253,88:18,90:$V8,91:$V9,92:202},{27:[1,255],29:[1,256],45:[1,254]},{16:[1,257]},{18:[1,258]},{18:[1,259]},o($Vc,[2,11]),{29:[1,260]},o($Vc,[2,116]),{4:169,6:3,9:261,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{4:169,6:3,9:262,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{16:$V2,17:$VU,25:263,26:163,35:13,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9},{4:169,6:3,9:264,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{4:169,6:3,9:265,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{31:[2,104]},o($V61,[2,102]),{4:169,6:3,9:266,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},{31:[1,267]},{16:$Ve,29:$Vf,30:268,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},o($V71,[2,33]),{16:$Vl,31:$V11,35:203,39:269,88:18,90:$V8,91:$V9,92:202},{27:[1,270],29:[1,272],45:[1,271]},o($Vc,[2,14]),o($Vc,[2,15]),{16:$Ve,29:$Vf,30:273,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{18:[2,29]},{42:[1,274]},o($Vc,[2,22]),{18:[1,275]},{18:[1,276]},{18:[1,277]},{17:[1,278]},{27:[1,279],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{31:[1,280]},o($V71,[2,34]),{16:$Ve,29:$Vf,30:281,49:39,57:37,62:$Vg,75:$Vh,79:32,80:34,81:$Vi,82:38,86:$Vj,87:$Vk},{16:$Vl,31:$V11,35:203,39:282,88:18,90:$V8,91:$V9,92:202},{31:[1,283],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{27:[1,284]},o($Vc,[2,23]),o($Vc,[2,25]),o($VI,[2,61]),{4:169,6:3,9:285,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},o($V71,[2,32]),{17:[1,287],27:[1,286]},{27:[1,288],65:$Vr,66:$Vs,67:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:$VE},{31:[1,289]},{16:$V2,17:$VU,25:290,26:163,35:13,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9},o([18,41,44],[2,26]),{18:[1,291]},o($V71,[2,37]),{4:169,6:3,9:292,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},o($V71,[2,35]),{17:[1,294],27:[1,293]},o($Vc,[2,114],{98:223,95:295,96:$V31}),o($V71,[2,31]),{18:[1,296]},o($V71,[2,36]),{4:169,6:3,9:297,11:16,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:13,37:9,46:$V6,47:$V7,49:14,88:18,90:$V8,91:$V9,97:$Va},o($Vc,[2,113]),o($V71,[2,39]),{18:[1,298]},o($V71,[2,38])],
defaultActions: {22:[2,1],180:[2,107],182:[2,4],192:[2,111],212:[2,6],236:[2,58],250:[2,104],261:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 87
break;
case 2:return 62
break;
case 3:return 91
break;
case 4:return 44
break;
case 5:return 90
break;
case 6:return 15
break;
case 7:return 21
break;
case 8:return 41
break;
case 9:return 12
break;
case 10:return 23
break;
case 11:return 47
break;
case 12:return 19
break;
case 13:return 24
break;
case 14:return 20
break;
case 15:return 65
break;
case 16:return 13
break;
case 17:return 38
break;
case 18:return 97
break;
case 19:return 96
break;
case 20:return 46
break;
case 21:return 28
break;
case 22:return 42
break;
case 23:return 32
break;
case 24:return 34
break;
case 25:return 86
break;
case 26:return 61
break;
case 27:return 59
break;
case 28:return 27
break;
case 29:return 93
break;
case 30:return 56
break;
case 31:return 36
break;
case 32:return 67
break;
case 33:return 66
break;
case 34:return 64
break;
case 35:return 72
break;
case 36:return 73
break;
case 37:return 70
break;
case 38:return 71
break;
case 39:return 68
break;
case 40:return 69
break;
case 41:return 81
break;
case 42:return 45
break;
case 43:return 54
break;
case 44:return 76
break;
case 45:return 78
break;
case 46:return 55
break;
case 47:return 77
break;
case 48:return 53
break;
case 49:return 51
break;
case 50:return 75
break;
case 51:return 50
break;
case 52:return 52
break;
case 53:return 74
break;
case 54:return '^'
break;
case 55:return 17
break;
case 56:return 18
break;
case 57:return 94
break;
case 58:return 83
break;
case 59:return 85
break;
case 60:return 29
break;
case 61:return 31
break;
case 62:return 16
break;
case 63:return 5
break;
case 64:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:HashMap\b)/,/^(?:default\b)/,/^(?:Object\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:case\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:final\b)/,/^(?:abstract\b)/,/^(?:implements\b)/,/^(?:interface\b)/,/^(?:instanceof\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:put\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:->)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = java_parser;
exports.Parser = java_parser.Parser;
exports.parse = function () { return java_parser.parse.apply(java_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}