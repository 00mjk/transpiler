/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var java_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,18],$V2=[1,14],$V3=[1,6],$V4=[1,7],$V5=[1,10],$V6=[1,11],$V7=[1,19],$V8=[1,20],$V9=[1,16],$Va=[5,18],$Vb=[5,12,13,16,18,28,32,39,40,83,84,90],$Vc=[2,8],$Vd=[1,28],$Ve=[1,29],$Vf=[1,39],$Vg=[1,31],$Vh=[1,34],$Vi=[1,33],$Vj=[1,38],$Vk=[1,41],$Vl=[16,64],$Vm=[2,95],$Vn=[16,17,29,52,66,86],$Vo=[16,17,29,52,64,66,86],$Vp=[27,31],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[2,88],$VF=[1,78],$VG=[1,79],$VH=[18,27,31,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VI=[1,82],$VJ=[1,88],$VK=[1,87],$VL=[1,90],$VM=[18,27,29,31,49,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,78,87],$VN=[1,93],$VO=[2,114],$VP=[1,94],$VQ=[1,95],$VR=[1,103],$VS=[1,145],$VT=[1,158],$VU=[18,27,31,52,58,59,60],$VV=[18,27,31,52,58,59,60,61,62,63,64,65,66],$VW=[18,27,31,52,58,59,60,61,62,63,64,65,66,67,68],$VX=[1,166],$VY=[18,31],$VZ=[18,27,31],$V_=[1,180],$V$=[2,100],$V01=[18,27,31,49,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$V11=[1,213],$V21=[5,12,13,16,18,28,32,39,40,83,84,89,90],$V31=[31,52],$V41=[12,13,18];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"bracket_statements":25,"statement_with_semicolon":26,";":27,"while":28,"(":29,"e":30,")":31,"for":32,"type":33,":":34,"if_statement":35,"static":36,"parameters":37,"=":38,"return":39,"final":40,"exprs":41,"access_array":42,"++":43,"--":44,"+=":45,"-=":46,"*=":47,"/=":48,".":49,"dot_expr":50,"key_values":51,",":52,"key_value":53,"put":54,"STRING_LITERAL":55,"lambda_parameters":56,"->":57,"instanceof":58,"||":59,"&&":60,"==":61,"!=":62,"<=":63,"<":64,">=":65,">":66,"+":67,"-":68,"*":69,"/":70,"%":71,"initializer_list":72,"not_expr":73,"!":74,"parentheses_expr":75,"[":76,"access_arr":77,"]":78,"new":79,"NUMBER":80,"type_":81,"types":82,"Object":83,"HashMap":84,"parameter":85,"...":86,"][":87,"elif":88,"else":89,"if":90,"else_statement":91,"add":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",27:";",28:"while",29:"(",31:")",32:"for",34:":",36:"static",38:"=",39:"return",40:"final",43:"++",44:"--",45:"+=",46:"-=",47:"*=",48:"/=",49:".",52:",",54:"put",55:"STRING_LITERAL",57:"->",58:"instanceof",59:"||",60:"&&",61:"==",62:"!=",63:"<=",64:"<",65:">=",66:">",67:"+",68:"-",69:"*",70:"/",71:"%",74:"!",76:"[",78:"]",79:"new",80:"NUMBER",83:"Object",84:"HashMap",86:"...",87:"][",89:"else",90:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[25,3],[25,2],[6,2],[6,1],[6,5],[6,9],[6,10],[6,1],[6,10],[10,8],[10,6],[10,4],[10,5],[10,7],[10,8],[10,7],[10,10],[10,9],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[51,3],[51,1],[53,6],[56,3],[56,1],[30,5],[30,9],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,2],[30,1],[73,2],[73,1],[50,3],[50,3],[50,1],[42,4],[72,4],[72,5],[72,4],[72,5],[75,3],[75,1],[75,3],[75,4],[75,1],[75,1],[75,1],[33,3],[33,4],[33,1],[81,1],[81,1],[81,1],[85,3],[85,2],[37,3],[37,1],[37,0],[77,3],[77,1],[41,3],[41,1],[82,3],[82,1],[88,7],[88,6],[88,1],[91,2],[35,6],[35,5],[22,3],[22,1],[92,3],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 77: case 99: case 102:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$= $$[$0-1];
break;
case 17: case 18:
this.$ = ["semicolon",$$[$0-1]];
break;
case 20:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["foreach",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["constructor",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 28:
this.$ = ["initialize_static_instance_var",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 29:
this.$ = ["initialize_static_instance_var_with_value",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 30:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 31:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 32:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 33:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 34:
this.$ = ["return",$$[$0]];
break;
case 35:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 37:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 38:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 39:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 40: case 41:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 42: case 43:
this.$ = [$$[$0],$$[$0-1]];
break;
case 44: case 45: case 46: case 47: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 48:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 49:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 50: case 104: case 106: case 114: case 116:
this.$ = [$$[$0]];
break;
case 51: case 91:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 52:
this.$ = [["Object",$$[$0-2]]].concat($$[$0]);
break;
case 53:
this.$ = [["Object",$$[$0]]]
break;
case 54:
this.$= ["anonymous_function","Object",[["Object",$$[$0-4]]],$$[$0-1]]
break;
case 55:
this.$= ["anonymous_function","Object",[["Object",$$[$0-7]]].concat($$[$0-5]),$$[$0-1]]
break;
case 71:
this.$ = ["-",$$[$0]];
break;
case 73:
this.$ = ["!", [".",$$[$0]]];
break;
case 74:
this.$ = [".", $$[$0]];
break;
case 75: case 76: case 98: case 101: case 103: case 105: case 113: case 115:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 78:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 79:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 80:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 81:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 82:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 83:
this.$= ["parentheses",$$[$0-1]];
break;
case 85:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 86:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 87: case 88: case 89:
this.$ = yytext;
break;
case 90:
this.$ = [$$[$0-2],"[]"];
break;
case 96:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 97:
this.$ = [$$[$0-1],$$[$0]];
break;
case 100:
this.$= []
break;
case 107:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 108:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 110:
this.$ = ["else",$$[$0]];
break;
case 111:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 112:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},{1:[3]},{5:[1,21]},o($Va,[2,3],{6:3,26:4,14:5,35:8,33:12,42:13,11:15,81:17,4:22,12:$V0,13:$V1,16:$V2,28:$V3,32:$V4,39:$V5,40:$V6,83:$V7,84:$V8,90:$V9}),{27:[1,23]},o($Vb,[2,19]),{29:[1,24]},{29:[1,25]},o($Vb,[2,23]),o([15,19,20,21],$Vc,{36:[1,26]}),{16:$Vd,29:$Ve,30:27,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vk,33:40,81:17,83:$V7,84:$V8},{16:[1,42],22:43},{38:[1,44]},o($Vl,$Vm,{38:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51],49:[1,52],76:[1,53]}),{15:[1,54],19:[1,55],20:[1,56],21:[1,57]},{29:[1,58]},o($Vn,[2,92],{64:[1,59]}),o([15,16,19,20,21,36,83,84],[2,9]),o($Vo,[2,93]),o($Vo,[2,94]),{1:[2,1]},o($Va,[2,2]),o($Vb,[2,18]),{16:$Vd,29:$Ve,30:60,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$V2,26:61,33:62,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8},{16:$Vk,33:63,81:17,83:$V7,84:$V8},o($Vp,[2,34],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o([18,27,29,31,49,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VE,{57:$VF,76:$VG}),{16:[1,80],29:$Ve,30:81,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($VH,[2,70],{49:$VI}),{16:$Vd,29:$Ve,30:83,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($VH,[2,72]),{16:$Vk,33:84,81:17,83:$V7,84:$V8},{16:$VJ,29:$VK,42:37,50:85,55:$Vf,72:86,75:36,79:$Vi,80:$Vj},o($VH,[2,74]),o($VH,[2,77],{29:$VL,49:[1,89]}),o($VM,[2,84]),o($VM,[2,87]),o($VM,[2,89]),{16:[1,91],22:92},o($Vo,$Vm,{76:$VN}),o($Vp,$VO,{38:$VP,52:$VQ}),o($Vp,[2,39]),{16:$Vd,29:$Ve,30:96,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:97,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($Vp,[2,42]),o($Vp,[2,43]),{16:$Vd,29:$Ve,30:98,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:99,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:100,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:101,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$VJ,29:$VK,42:37,50:102,55:$Vf,72:86,75:36,79:$Vi,80:$Vj},{16:$VJ,29:$VK,42:37,55:$Vf,75:105,77:104,78:$VR,80:$Vj},{16:[1,106]},{15:[1,107]},{16:[1,108]},{16:[1,109]},{16:$Vd,29:$Ve,30:110,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vk,33:112,81:17,82:111,83:$V7,84:$V8},{31:[1,113],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{27:[1,114]},{16:[1,115],22:43},{16:[1,116]},{16:$Vd,29:$Ve,30:117,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:118,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:119,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:120,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:121,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:122,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:123,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:124,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:125,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:126,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:127,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:128,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:129,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:130,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{17:[1,131]},{16:$VJ,29:$VK,42:37,55:$Vf,75:105,77:104,80:$Vj},o([29,31,49,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VE,{52:[1,132],57:$VF,76:$VG}),{31:[1,133],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{16:$VJ,29:$VK,42:37,50:134,55:$Vf,72:86,75:36,79:$Vi,80:$Vj},o($VH,[2,71]),{17:[1,135],29:[1,136]},o($VH,[2,73]),{49:$VI},{16:$Vd,29:$Ve,30:81,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($VM,$VE,{76:$VG}),{16:$VJ,29:$VK,42:37,50:137,55:$Vf,72:86,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:140,31:[1,138],41:139,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($Vp,$VO,{38:[1,141],52:$VQ}),o($Vp,[2,36]),{78:$VR},{16:$Vd,17:[1,142],29:$Ve,30:143,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$VS,22:144},o($Vp,[2,40],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($Vp,[2,41],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($Vp,[2,44],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($Vp,[2,45],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($Vp,[2,46],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($Vp,[2,47],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($Vp,[2,48]),o($Vn,[2,90]),{78:[1,146]},{29:$VL,78:[2,102],87:[1,147]},{17:[1,148],23:[1,149],24:[1,150]},{16:[1,151]},{17:[1,152]},{17:[1,153]},{31:[1,154],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{66:[1,155]},{52:[1,156],66:[2,106]},{16:$V2,17:$VT,25:157,26:159,33:12,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8},{16:$Vd,29:$Ve,30:160,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{27:$VO,34:[1,161],38:$VP,52:$VQ},{29:[1,162]},o($VU,[2,56],{61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VU,[2,57],{61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VU,[2,58],{61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VV,[2,59],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VV,[2,60],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VV,[2,61],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VV,[2,62],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VV,[2,63],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VV,[2,64],{67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VW,[2,65],{69:$VB,70:$VC,71:$VD}),o($VW,[2,66],{69:$VB,70:$VC,71:$VD}),o($VH,[2,67]),o($VH,[2,68]),o($VH,[2,69]),{4:164,6:3,9:163,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},{16:$VX,56:165},o($VM,[2,83]),o($VH,[2,75]),{16:$Vd,18:[1,167],29:$Ve,30:140,41:168,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:140,31:[1,169],41:170,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($VH,[2,76]),o($VM,[2,85]),{31:[1,171]},o($VY,[2,104],{52:[1,172],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{16:$Vd,29:$Ve,30:173,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vd,29:$Ve,30:140,41:174,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($Vp,[2,38],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VZ,[2,113]),o($VZ,$VO,{52:$VQ}),o([18,27,29,31,38,49,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,78,87],[2,78]),{16:$VJ,29:$VK,42:37,55:$Vf,75:105,77:175,80:$Vj},{7:176,8:177,10:178,11:179,12:$V_,13:$V1},{16:[1,181]},{16:[1,182]},{17:[1,183]},{7:184,8:177,10:178,11:179,12:$V_,13:$V1},{16:$VS,22:185},{16:$V2,17:$VT,25:186,26:159,33:12,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8},o($Vn,[2,91]),{16:$Vk,33:112,81:17,82:187,83:$V7,84:$V8},o($Vb,[2,20]),{4:164,6:3,9:188,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},{27:[1,189]},{27:[1,190],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{16:[1,191]},{16:$Vk,31:$V$,33:194,37:192,81:17,83:$V7,84:$V8,85:193},{18:[1,195]},{18:[2,5]},{31:[1,196]},{31:[2,53],52:[1,197]},o($V01,[2,79]),{18:[1,198]},o($V01,[2,81]),{31:[1,199]},o($VM,[2,86]),{16:$Vd,29:$Ve,30:140,41:200,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($Vp,[2,35],{58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{18:[1,201]},{78:[2,101]},{18:[1,202]},{18:[2,4]},{8:203,10:178,11:179,12:$V_,13:$V1,18:[2,7]},{16:[1,204],33:205,36:[1,206],81:17,83:$V7,84:$V8},o([16,36,83,84],$Vc),{17:[1,207]},{17:[1,208]},{7:209,8:177,10:178,11:179,12:$V_,13:$V1},{18:[1,210]},{18:[1,211]},o($Vb,[2,112],{88:212,91:214,89:$V11}),{66:[2,105]},{18:[1,215]},o($V21,[2,17]),{16:$V2,26:216,33:12,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8},{31:[1,217]},{31:[1,218]},{31:[2,99],52:[1,219]},{16:[1,221],86:[1,220]},o($VH,[2,54]),{57:[1,222]},{16:$VX,56:223},o($V01,[2,80]),o($V01,[2,82]),o($VY,[2,103]),o($Vp,[2,37]),o($Vb,[2,10]),{18:[2,6]},o($Vl,$Vm,{29:[1,224],76:$VN}),{16:[1,225]},{16:$Vk,33:226,81:17,83:$V7,84:$V8},{7:227,8:177,10:178,11:179,12:$V_,13:$V1},{7:228,8:177,10:178,11:179,12:$V_,13:$V1},{18:[1,229]},o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,111]),{16:$V2,17:$VT,25:231,26:159,33:12,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:[1,230]},o($Vb,[2,109]),o($V21,[2,16]),{31:[1,232]},{17:[1,233]},{17:[1,234]},{16:$Vk,31:$V$,33:194,37:235,81:17,83:$V7,84:$V8,85:193},{16:[1,236]},o($V31,[2,97]),{17:[1,237]},{31:[2,52]},{16:$Vk,31:$V$,33:194,37:238,81:17,83:$V7,84:$V8,85:193},{27:[1,240],29:[1,241],38:[1,239]},{16:[1,242]},{18:[1,243]},{18:[1,244]},o($Vb,[2,11]),{29:[1,245]},o($Vb,[2,110]),{16:$V2,17:$VT,25:246,26:159,33:12,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8},{4:164,6:3,9:247,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},{4:164,6:3,9:248,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},{31:[2,98]},o($V31,[2,96]),{4:164,6:3,9:249,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},{31:[1,250]},{16:$Vd,29:$Ve,30:251,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($V41,[2,27]),{16:$Vk,31:$V$,33:194,37:252,81:17,83:$V7,84:$V8,85:193},{27:[1,253],29:[1,255],38:[1,254]},o($Vb,[2,14]),o($Vb,[2,15]),{16:$Vd,29:$Ve,30:256,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},o($Vb,[2,21]),{18:[1,257]},{18:[1,258]},{18:[1,259]},{17:[1,260]},{27:[1,261],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{31:[1,262]},o($V41,[2,28]),{16:$Vd,29:$Ve,30:263,42:37,50:35,55:$Vf,68:$Vg,72:30,73:32,74:$Vh,75:36,79:$Vi,80:$Vj},{16:$Vk,31:$V$,33:194,37:264,81:17,83:$V7,84:$V8,85:193},{31:[1,265],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},o($Vb,[2,22]),o($Vb,[2,24]),o($VH,[2,55]),{4:164,6:3,9:266,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},o($V41,[2,26]),{17:[1,268],27:[1,267]},{27:[1,269],58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{31:[1,270]},{16:$V2,17:$VT,25:271,26:159,33:12,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8},{18:[1,272]},o($V41,[2,31]),{4:164,6:3,9:273,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},o($V41,[2,29]),{17:[1,275],27:[1,274]},o($Vb,[2,108],{91:214,88:276,89:$V11}),o($V41,[2,25]),{18:[1,277]},o($V41,[2,30]),{4:164,6:3,9:278,11:15,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,33:12,35:8,39:$V5,40:$V6,42:13,81:17,83:$V7,84:$V8,90:$V9},o($Vb,[2,107]),o($V41,[2,33]),{18:[1,279]},o($V41,[2,32])],
defaultActions: {21:[2,1],164:[2,5],175:[2,101],177:[2,4],187:[2,105],203:[2,6],223:[2,52],235:[2,98]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 80
break;
case 2:return 55
break;
case 3:return 84
break;
case 4:return 83
break;
case 5:return 15
break;
case 6:return 21
break;
case 7:return 12
break;
case 8:return 23
break;
case 9:return 40
break;
case 10:return 19
break;
case 11:return 24
break;
case 12:return 20
break;
case 13:return 58
break;
case 14:return 13
break;
case 15:return 36
break;
case 16:return 90
break;
case 17:return 89
break;
case 18:return 39
break;
case 19:return 28
break;
case 20:return 32
break;
case 21:return 79
break;
case 22:return 54
break;
case 23:return 52
break;
case 24:return 27
break;
case 25:return 86
break;
case 26:return 49
break;
case 27:return 34
break;
case 28:return 60
break;
case 29:return 59
break;
case 30:return 57
break;
case 31:return 65
break;
case 32:return 66
break;
case 33:return 63
break;
case 34:return 64
break;
case 35:return 61
break;
case 36:return 62
break;
case 37:return 74
break;
case 38:return 38
break;
case 39:return 47
break;
case 40:return 69
break;
case 41:return 71
break;
case 42:return 48
break;
case 43:return 70
break;
case 44:return 46
break;
case 45:return 44
break;
case 46:return 68
break;
case 47:return 43
break;
case 48:return 45
break;
case 49:return 67
break;
case 50:return '^'
break;
case 51:return 17
break;
case 52:return 18
break;
case 53:return 87
break;
case 54:return 76
break;
case 55:return 78
break;
case 56:return 29
break;
case 57:return 31
break;
case 58:return 16
break;
case 59:return 5
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:HashMap\b)/,/^(?:Object\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:final\b)/,/^(?:abstract\b)/,/^(?:implements\b)/,/^(?:interface\b)/,/^(?:instanceof\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:put\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:->)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = java_parser;
exports.Parser = java_parser.Parser;
exports.parse = function () { return java_parser.parse.apply(java_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}