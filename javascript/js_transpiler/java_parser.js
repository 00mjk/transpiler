/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var java_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,20],$V2=[1,16],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,21],$Va=[1,22],$Vb=[1,18],$Vc=[5,18,42],$Vd=[5,12,13,16,18,28,32,34,42,46,47,48,92,93,99],$Ve=[2,8],$Vf=[1,32],$Vg=[1,33],$Vh=[1,43],$Vi=[1,35],$Vj=[1,38],$Vk=[1,37],$Vl=[1,42],$Vm=[1,44],$Vn=[1,46],$Vo=[16,72],$Vp=[2,104],$Vq=[16,17,29,60,74,95],$Vr=[16,17,29,60,72,74,95],$Vs=[27,31],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[2,96],$VI=[1,85],$VJ=[1,86],$VK=[18,27,31,36,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VL=[1,89],$VM=[1,95],$VN=[1,94],$VO=[1,97],$VP=[18,27,29,31,36,57,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,96],$VQ=[1,100],$VR=[2,122],$VS=[1,101],$VT=[1,102],$VU=[1,110],$VV=[1,153],$VW=[1,166],$VX=[18,27,31,36,60,66,67,68],$VY=[18,27,31,36,60,66,67,68,69,70,71,72,73,74],$VZ=[18,27,31,36,60,66,67,68,69,70,71,72,73,74,75,76],$V_=[1,175],$V$=[18,31],$V01=[18,27,31],$V11=[1,189],$V21=[1,202],$V31=[2,109],$V41=[18,27,31,36,57,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$V51=[1,226],$V61=[5,12,13,16,18,28,32,34,42,46,47,48,92,93,98,99],$V71=[18,44],$V81=[31,60],$V91=[12,13,18];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"abstract":19,"interface":20,"enum":21,"identifiers":22,"extends":23,"implements":24,"bracket_statements":25,"statement_with_semicolon":26,";":27,"while":28,"(":29,"e":30,")":31,"switch":32,"case_statements":33,"for":34,"type":35,":":36,"if_statement":37,"static":38,"parameters":39,"case_statement":40,"case":41,"break":42,"case_statements_":43,"default":44,"=":45,"import":46,"return":47,"final":48,"exprs":49,"access_array":50,"++":51,"--":52,"+=":53,"-=":54,"*=":55,"/=":56,".":57,"dot_expr":58,"key_values":59,",":60,"key_value":61,"put":62,"STRING_LITERAL":63,"lambda_parameters":64,"->":65,"instanceof":66,"||":67,"&&":68,"==":69,"!=":70,"<=":71,"<":72,">=":73,">":74,"+":75,"-":76,"*":77,"/":78,"%":79,"initializer_list":80,"not_expr":81,"!":82,"parentheses_expr":83,"[":84,"access_arr":85,"]":86,"new":87,"NUMBER":88,"CHAR_LITERAL":89,"type_":90,"types":91,"Object":92,"HashMap":93,"parameter":94,"...":95,"][":96,"elif":97,"else":98,"if":99,"add":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"abstract",20:"interface",21:"enum",23:"extends",24:"implements",27:";",28:"while",29:"(",31:")",32:"switch",34:"for",36:":",38:"static",41:"case",42:"break",44:"default",45:"=",46:"import",47:"return",48:"final",51:"++",52:"--",53:"+=",54:"-=",55:"*=",56:"/=",57:".",60:",",62:"put",63:"STRING_LITERAL",65:"->",66:"instanceof",67:"||",68:"&&",69:"==",70:"!=",71:"<=",72:"<",73:">=",74:">",75:"+",76:"-",77:"*",78:"/",79:"%",82:"!",84:"[",86:"]",87:"new",88:"NUMBER",89:"CHAR_LITERAL",92:"Object",93:"HashMap",95:"...",96:"][",98:"else",99:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,8],[14,8],[25,3],[25,2],[6,2],[6,1],[6,5],[6,7],[6,9],[6,10],[6,1],[6,10],[40,6],[43,2],[43,1],[33,4],[33,1],[10,8],[10,6],[10,4],[10,5],[10,7],[10,8],[10,7],[10,10],[10,9],[26,2],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[59,3],[59,1],[61,6],[64,3],[64,1],[30,5],[30,9],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[30,2],[30,1],[81,2],[81,1],[58,3],[58,3],[58,1],[50,4],[80,4],[80,5],[80,4],[80,5],[83,3],[83,1],[83,3],[83,4],[83,1],[83,1],[83,1],[83,1],[35,3],[35,4],[35,1],[90,1],[90,1],[90,1],[94,3],[94,2],[39,3],[39,1],[39,0],[85,3],[85,1],[49,3],[49,1],[91,3],[91,1],[97,7],[97,6],[97,2],[37,6],[37,5],[22,3],[22,1],[100,3],[100,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 27:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 28: case 85: case 108: case 111:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10: case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$= $$[$0-1];
break;
case 17: case 18:
this.$ = ["semicolon",$$[$0-1]];
break;
case 20:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 22:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["foreach",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 29:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 31:
this.$ = ["constructor",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 32:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 33:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["initialize_static_instance_var",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 35:
this.$ = ["initialize_static_instance_var_with_value",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 36:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 37:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 38:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 39:
this.$ = ["instance_method",$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 40:
this.$ = ["import",$$[$0]];
break;
case 41:
this.$ = ["return",$$[$0]];
break;
case 42:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 44:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 45:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 46:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 47:
return ["set_array_size",$$[$0-1],$$[$0][1],$$[$0][2]];
break;
case 48: case 49:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 50: case 51:
this.$ = [$$[$0],$$[$0-1]];
break;
case 52: case 53: case 54: case 55: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 56:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 57:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 58: case 113: case 115: case 122: case 124:
this.$ = [$$[$0]];
break;
case 59: case 100:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 60:
this.$ = [["Object",$$[$0-2]]].concat($$[$0]);
break;
case 61:
this.$ = [["Object",$$[$0]]]
break;
case 62:
this.$= ["anonymous_function","Object",[["Object",$$[$0-4]]],$$[$0-1]]
break;
case 63:
this.$= ["anonymous_function","Object",[["Object",$$[$0-7]]].concat($$[$0-5]),$$[$0-1]]
break;
case 79:
this.$ = ["-",$$[$0]];
break;
case 81:
this.$ = ["!", [".",$$[$0]]];
break;
case 82:
this.$ = [".", $$[$0]];
break;
case 83: case 84: case 107: case 110: case 112: case 114: case 121: case 123:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 86:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 87:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 88:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 89:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 90:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 91:
this.$= ["parentheses",$$[$0-1]];
break;
case 93:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 94:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 95: case 96: case 97: case 98:
this.$ = yytext;
break;
case 99:
this.$ = [$$[$0-2],"[]"];
break;
case 105:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 106:
this.$ = [$$[$0-1],$$[$0]];
break;
case 109:
this.$= []
break;
case 116:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 117:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 118:
this.$ = ["else",$$[$0]];
break;
case 119:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 120:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{1:[3]},{5:[1,23]},o($Vc,[2,3],{6:3,26:4,14:5,37:9,35:14,50:15,11:17,90:19,4:24,12:$V0,13:$V1,16:$V2,28:$V3,32:$V4,34:$V5,46:$V6,47:$V7,48:$V8,92:$V9,93:$Va,99:$Vb}),{27:[1,25]},o($Vd,[2,19]),{29:[1,26]},{29:[1,27]},{29:[1,28]},o($Vd,[2,24]),o([15,19,20,21],$Ve,{38:[1,29]}),{16:[1,30]},{16:$Vf,29:$Vg,30:31,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vn,35:45,90:19,92:$V9,93:$Va},{16:[1,47],22:48,50:49},{45:[1,50]},o($Vo,$Vp,{45:[1,51],51:[1,52],52:[1,53],53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],84:[1,59]}),{15:[1,60],19:[1,61],20:[1,62],21:[1,63]},{29:[1,64]},o($Vq,[2,101],{72:[1,65]}),o([15,16,19,20,21,38,92,93],[2,9]),o($Vr,[2,102]),o($Vr,[2,103]),{1:[2,1]},o($Vc,[2,2]),o($Vd,[2,18]),{16:$Vf,29:$Vg,30:66,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:67,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$V2,26:68,35:69,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va},{16:$Vn,35:70,90:19,92:$V9,93:$Va},o($Vs,[2,40]),o($Vs,[2,41],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o([18,27,29,31,36,57,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VH,{65:$VI,84:$VJ}),{16:[1,87],29:$Vg,30:88,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($VK,[2,78],{57:$VL}),{16:$Vf,29:$Vg,30:90,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($VK,[2,80]),{16:$Vn,35:91,90:19,92:$V9,93:$Va},{16:$VM,29:$VN,50:41,58:92,63:$Vh,80:93,83:40,87:$Vk,88:$Vl,89:$Vm},o($VK,[2,82]),o($VK,[2,85],{29:$VO,57:[1,96]}),o($VP,[2,92]),o($VP,[2,95]),o($VP,[2,97]),o($VP,[2,98]),{16:[1,98],22:99},o($Vr,$Vp,{84:$VQ}),o($Vs,$VR,{45:$VS,60:$VT,84:$VJ}),o($Vs,[2,46]),o($Vs,[2,47]),{16:$Vf,29:$Vg,30:103,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:104,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($Vs,[2,50]),o($Vs,[2,51]),{16:$Vf,29:$Vg,30:105,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:106,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:107,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:108,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$VM,29:$VN,50:41,58:109,63:$Vh,80:93,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$VM,29:$VN,50:41,63:$Vh,83:112,85:111,86:$VU,88:$Vl,89:$Vm},{16:[1,113]},{15:[1,114]},{16:[1,115]},{16:[1,116]},{16:$Vf,29:$Vg,30:117,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vn,35:119,90:19,91:118,92:$V9,93:$Va},{31:[1,120],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{31:[1,121],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{27:[1,122]},{16:[1,123],22:48,50:49},{16:[1,124]},{16:$Vf,29:$Vg,30:125,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:126,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:127,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:128,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:129,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:130,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:131,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:132,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:133,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:134,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:135,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:136,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:137,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:138,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{17:[1,139]},{16:$VM,29:$VN,50:41,63:$Vh,83:112,85:111,88:$Vl,89:$Vm},o([29,31,57,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VH,{60:[1,140],65:$VI,84:$VJ}),{31:[1,141],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{16:$VM,29:$VN,50:41,58:142,63:$Vh,80:93,83:40,87:$Vk,88:$Vl,89:$Vm},o($VK,[2,79]),{17:[1,143],29:[1,144]},o($VK,[2,81]),{57:$VL},{16:$Vf,29:$Vg,30:88,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($VP,$VH,{84:$VJ}),{16:$VM,29:$VN,50:41,58:145,63:$Vh,80:93,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:148,31:[1,146],49:147,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($Vs,$VR,{45:[1,149],60:$VT}),o($Vs,[2,43]),{86:$VU},{16:$Vf,17:[1,150],29:$Vg,30:151,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$VV,22:152},o($Vs,[2,48],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($Vs,[2,49],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($Vs,[2,52],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($Vs,[2,53],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($Vs,[2,54],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($Vs,[2,55],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($Vs,[2,56]),o($Vq,[2,99]),{86:[1,154]},{29:$VO,86:[2,111],96:[1,155]},{17:[1,156],23:[1,157],24:[1,158]},{16:[1,159]},{17:[1,160]},{17:[1,161]},{31:[1,162],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{74:[1,163]},{60:[1,164],74:[2,115]},{16:$V2,17:$VW,25:165,26:167,35:14,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va},{17:[1,168]},{16:$Vf,29:$Vg,30:169,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{27:$VR,36:[1,170],45:$VS,60:$VT,84:$VJ},{29:[1,171]},o($VX,[2,64],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VX,[2,65],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VX,[2,66],{69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VY,[2,67],{75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VY,[2,68],{75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VY,[2,69],{75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VY,[2,70],{75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VY,[2,71],{75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VY,[2,72],{75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($VZ,[2,73],{77:$VE,78:$VF,79:$VG}),o($VZ,[2,74],{77:$VE,78:$VF,79:$VG}),o($VK,[2,75]),o($VK,[2,76]),o($VK,[2,77]),{4:173,6:3,9:172,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{16:$V_,64:174},o($VP,[2,91]),o($VK,[2,83]),{16:$Vf,18:[1,176],29:$Vg,30:148,49:177,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:148,31:[1,178],49:179,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($VK,[2,84]),o($VP,[2,93]),{31:[1,180]},o($V$,[2,113],{60:[1,181],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),{16:$Vf,29:$Vg,30:182,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vf,29:$Vg,30:148,49:183,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($Vs,[2,45],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),o($V01,[2,121]),o($V01,$VR,{60:$VT}),o([18,27,29,31,36,45,57,60,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86,96],[2,86]),{16:$VM,29:$VN,50:41,63:$Vh,83:112,85:184,88:$Vl,89:$Vm},{7:185,8:186,10:187,11:188,12:$V11,13:$V1},{16:[1,190]},{16:[1,191]},{17:[1,192]},{7:193,8:186,10:187,11:188,12:$V11,13:$V1},{16:$VV,22:194},{16:$V2,17:$VW,25:195,26:167,35:14,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va},o($Vq,[2,100]),{16:$Vn,35:119,90:19,91:196,92:$V9,93:$Va},o($Vd,[2,20]),{4:173,6:3,9:197,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{27:[1,198]},{33:199,40:201,41:$V21,43:200},{27:[1,203],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{16:[1,204]},{16:$Vn,31:$V31,35:207,39:205,90:19,92:$V9,93:$Va,94:206},{18:[1,208]},o([18,42],[2,5]),{31:[1,209]},{31:[2,61],60:[1,210]},o($V41,[2,87]),{18:[1,211]},o($V41,[2,89]),{31:[1,212]},o($VP,[2,94]),{16:$Vf,29:$Vg,30:148,49:213,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($Vs,[2,42],{66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG}),{18:[1,214]},{86:[2,110]},{18:[1,215]},{18:[2,4]},{8:216,10:187,11:188,12:$V11,13:$V1,18:[2,7]},{16:[1,217],35:218,38:[1,219],90:19,92:$V9,93:$Va},o([16,38,92,93],$Ve),{17:[1,220]},{17:[1,221]},{7:222,8:186,10:187,11:188,12:$V11,13:$V1},{18:[1,223]},{18:[1,224]},o($Vd,[2,120],{97:225,98:$V51}),{74:[2,114]},{18:[1,227]},o($V61,[2,17]),{18:[1,228]},{18:[2,30],44:[1,229]},o($V71,[2,28],{40:201,43:230,41:$V21}),{16:$Vf,29:$Vg,30:231,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$V2,26:232,35:14,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va},{31:[1,233]},{31:[1,234]},{31:[2,108],60:[1,235]},{16:[1,237],95:[1,236]},o($VK,[2,62]),{65:[1,238]},{16:$V_,64:239},o($V41,[2,88]),o($V41,[2,90]),o($V$,[2,112]),o($Vs,[2,44]),o($Vd,[2,10]),{18:[2,6]},o($Vo,$Vp,{29:[1,240],84:$VQ}),{16:[1,241]},{16:$Vn,35:242,90:19,92:$V9,93:$Va},{7:243,8:186,10:187,11:188,12:$V11,13:$V1},{7:244,8:186,10:187,11:188,12:$V11,13:$V1},{18:[1,245]},o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,119]),{16:$V2,17:$VW,25:247,26:167,35:14,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:[1,246]},o($V61,[2,16]),o($Vd,[2,21]),{36:[1,248]},o($V71,[2,27]),{36:[1,249],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{31:[1,250]},{17:[1,251]},{17:[1,252]},{16:$Vn,31:$V31,35:207,39:253,90:19,92:$V9,93:$Va,94:206},{16:[1,254]},o($V81,[2,106]),{17:[1,255]},{31:[2,60]},{16:$Vn,31:$V31,35:207,39:256,90:19,92:$V9,93:$Va,94:206},{27:[1,258],29:[1,259],45:[1,257]},{16:[1,260]},{18:[1,261]},{18:[1,262]},o($Vd,[2,11]),{29:[1,263]},o($Vd,[2,118]),{4:173,6:3,9:264,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{4:173,6:3,9:265,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{16:$V2,17:$VW,25:266,26:167,35:14,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va},{4:173,6:3,9:267,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{4:173,6:3,9:268,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{31:[2,107]},o($V81,[2,105]),{4:173,6:3,9:269,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},{31:[1,270]},{16:$Vf,29:$Vg,30:271,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},o($V91,[2,33]),{16:$Vn,31:$V31,35:207,39:272,90:19,92:$V9,93:$Va,94:206},{27:[1,273],29:[1,275],45:[1,274]},o($Vd,[2,14]),o($Vd,[2,15]),{16:$Vf,29:$Vg,30:276,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{18:[2,29]},{42:[1,277]},o($Vd,[2,22]),{18:[1,278]},{18:[1,279]},{18:[1,280]},{17:[1,281]},{27:[1,282],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{31:[1,283]},o($V91,[2,34]),{16:$Vf,29:$Vg,30:284,50:41,58:39,63:$Vh,76:$Vi,80:34,81:36,82:$Vj,83:40,87:$Vk,88:$Vl,89:$Vm},{16:$Vn,31:$V31,35:207,39:285,90:19,92:$V9,93:$Va,94:206},{31:[1,286],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{27:[1,287]},o($Vd,[2,23]),o($Vd,[2,25]),o($VK,[2,63]),{4:173,6:3,9:288,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},o($V91,[2,32]),{17:[1,290],27:[1,289]},{27:[1,291],66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG},{31:[1,292]},{16:$V2,17:$VW,25:293,26:167,35:14,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va},o([18,41,44],[2,26]),{18:[1,294]},o($V91,[2,37]),{4:173,6:3,9:295,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},o($V91,[2,35]),{17:[1,297],27:[1,296]},o($Vd,[2,117],{97:298,98:$V51}),o($V91,[2,31]),{18:[1,299]},o($V91,[2,36]),{4:173,6:3,9:300,11:17,12:$V0,13:$V1,14:5,16:$V2,26:4,28:$V3,32:$V4,34:$V5,35:14,37:9,46:$V6,47:$V7,48:$V8,50:15,90:19,92:$V9,93:$Va,99:$Vb},o($Vd,[2,116]),o($V91,[2,39]),{18:[1,301]},o($V91,[2,38])],
defaultActions: {23:[2,1],184:[2,110],186:[2,4],196:[2,114],216:[2,6],239:[2,60],253:[2,107],264:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 88
break;
case 2:return 63
break;
case 3:return 89
break;
case 4:return 93
break;
case 5:return 46
break;
case 6:return 44
break;
case 7:return 92
break;
case 8:return 15
break;
case 9:return 21
break;
case 10:return 41
break;
case 11:return 12
break;
case 12:return 23
break;
case 13:return 48
break;
case 14:return 19
break;
case 15:return 24
break;
case 16:return 20
break;
case 17:return 66
break;
case 18:return 13
break;
case 19:return 38
break;
case 20:return 99
break;
case 21:return 98
break;
case 22:return 47
break;
case 23:return 28
break;
case 24:return 42
break;
case 25:return 32
break;
case 26:return 34
break;
case 27:return 87
break;
case 28:return 62
break;
case 29:return 60
break;
case 30:return 27
break;
case 31:return 95
break;
case 32:return 57
break;
case 33:return 36
break;
case 34:return 68
break;
case 35:return 67
break;
case 36:return 65
break;
case 37:return 73
break;
case 38:return 74
break;
case 39:return 71
break;
case 40:return 72
break;
case 41:return 69
break;
case 42:return 70
break;
case 43:return 82
break;
case 44:return 45
break;
case 45:return 55
break;
case 46:return 77
break;
case 47:return 79
break;
case 48:return 56
break;
case 49:return 78
break;
case 50:return 54
break;
case 51:return 52
break;
case 52:return 76
break;
case 53:return 51
break;
case 54:return 53
break;
case 55:return 75
break;
case 56:return '^'
break;
case 57:return 17
break;
case 58:return 18
break;
case 59:return 96
break;
case 60:return 84
break;
case 61:return 86
break;
case 62:return 29
break;
case 63:return 31
break;
case 64:return 16
break;
case 65:return 5
break;
case 66:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:'([^\\\']|\\.)*')/,/^(?:HashMap\b)/,/^(?:import\b)/,/^(?:default\b)/,/^(?:Object\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:case\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:final\b)/,/^(?:abstract\b)/,/^(?:implements\b)/,/^(?:interface\b)/,/^(?:instanceof\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:put\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:->)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:%)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = java_parser;
exports.Parser = java_parser.Parser;
exports.parse = function () { return java_parser.parse.apply(java_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}