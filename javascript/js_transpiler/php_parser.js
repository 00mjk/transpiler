/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var php_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,22],$Vc=[1,23],$Vd=[5,18,45],$Ve=[5,15,16,18,23,28,29,31,33,37,39,45,50,51,67,103],$Vf=[1,29],$Vg=[22,26],$Vh=[1,51],$Vi=[1,47],$Vj=[1,43],$Vk=[1,46],$Vl=[1,38],$Vm=[1,39],$Vn=[1,42],$Vo=[1,48],$Vp=[1,50],$Vq=[1,67],$Vr=[1,65],$Vs=[1,66],$Vt=[2,93],$Vu=[1,77],$Vv=[1,98],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,99],$VM=[1,100],$VN=[22,26,44,55,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,99],$VO=[22,26,44,55,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,99],$VP=[1,129],$VQ=[5,15,16,18,23,28,29,31,33,37,39,45,50,51,67,101,102,103],$VR=[2,99],$VS=[1,144],$VT=[26,55],$VU=[1,178],$VV=[1,179],$VW=[2,5],$VX=[16,70,85,103],$VY=[26,70],$VZ=[22,26,44,55,70,71,74,75,99],$V_=[22,26,44,55,70,71,74,75,76,77,99],$V$=[22,26,44,55,70,71,74,75,76,77,78,79,80,82,83,85,99],$V01=[22,26,44,55,70,71,74,75,76,77,78,79,80,81,82,83,84,85,99],$V11=[22,26,44,55,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,99],$V21=[1,217],$V31=[1,223],$V41=[1,224],$V51=[18,47];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"extends":19,"implements":20,"statement_with_semicolon":21,";":22,"while":23,"(":24,"e":25,")":26,"bracket_statements":27,"do":28,"switch":29,"case_statements":30,"for":31,"statement_with_semicolon_":32,"foreach":33,"var_name":34,"as":35,"=>":36,"if":37,"elif":38,"function":39,"parameters":40,"initialize_var1":41,"case_statement":42,"case":43,":":44,"break":45,"case_statements_":46,"default":47,"static":48,"type":49,"System.out.println":50,"return":51,"=":52,"parallel_assignment":53,"[":54,"]":55,"access_array":56,"++":57,"--":58,"+=":59,"%=":60,"-=":61,"*=":62,"/=":63,"function_call":64,".":65,"dot_expr":66,"list":67,"parallel_lhs":68,"parallel_rhs":69,",":70,"?":71,"...":72,"parentheses_expr":73,"||":74,"or":75,"&&":76,"and":77,"!==":78,"===":79,"<=":80,"<<":81,"<":82,">=":83,">>":84,">":85,"+":86,"-":87,"*":88,"/":89,"->":90,"access_arr":91,"exprs":92,"new":93,"NUMBER":94,"STRING_LITERAL":95,"types":96,"parameter":97,"&":98,"][":99,"else_if":100,"else":101,"elseif":102,"$":103,"var_names":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"extends",20:"implements",22:";",23:"while",24:"(",26:")",28:"do",29:"switch",31:"for",33:"foreach",35:"as",36:"=>",37:"if",39:"function",41:"initialize_var1",43:"case",44:":",45:"break",47:"default",48:"static",50:"System.out.println",51:"return",52:"=",54:"[",55:"]",57:"++",58:"--",59:"+=",60:"%=",61:"-=",62:"*=",63:"/=",65:".",67:"list",70:",",71:"?",72:"...",74:"||",75:"or",76:"&&",77:"and",78:"!==",79:"===",80:"<=",81:"<<",82:"<",83:">=",84:">>",85:">",86:"+",87:"-",88:"*",89:"/",90:"->",93:"new",94:"NUMBER",95:"STRING_LITERAL",98:"&",99:"][",101:"else",102:"elseif",103:"$"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,0],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[14,7],[14,7],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,9],[6,7],[6,6],[6,5],[6,8],[32,1],[32,1],[42,6],[46,2],[46,1],[30,4],[30,1],[10,10],[21,4],[21,2],[21,1],[21,4],[21,1],[21,5],[21,3],[21,3],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,3],[53,9],[68,3],[68,3],[69,3],[69,3],[25,5],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[66,3],[66,1],[56,4],[64,4],[64,3],[73,5],[73,7],[73,1],[73,1],[73,2],[73,3],[73,3],[73,1],[73,1],[73,1],[49,3],[49,4],[49,1],[97,1],[97,2],[97,3],[40,3],[40,1],[40,0],[91,3],[91,1],[92,3],[92,1],[96,3],[96,1],[100,2],[100,1],[38,6],[38,5],[38,2],[34,2],[104,3],[104,1],[27,3],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7: case 28:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 29: case 77: case 98: case 101:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["class_statements",[]]
break;
case 6:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = ["class","public",$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["class_extends","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["class_implements","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14: case 115:
this.$ = ["semicolon",$$[$0-1]];
break;
case 16:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 18:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach_with_index","Object",$$[$0-4],$$[$0-2],$$[$0-6],$$[$0]];
break;
case 21:
this.$ = ["foreach","Object",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 22:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 23:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 27:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 30:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 32:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 33:
this.$ = ["println",$$[$0-1]];
break;
case 34:
this.$ = ["return",$$[$0]];
break;
case 35:
this.$ = ["return"];
break;
case 36:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 38:
this.$ = ["function_call","array_push",[$$[$0-4],$$[$0]]];
break;
case 39: case 40:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 41: case 42:
this.$ = [$$[$0],$$[$0-1]];
break;
case 43: case 44: case 45: case 46: case 47: case 57: case 59: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 50:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-6]],["parallel_rhs",$$[$0-1]]]
break;
case 51: case 53:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 52: case 54:
this.$ = [$$[$0-2],$$[$0]]
break;
case 55:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 56:
this.$ = ["unpack_array",$$[$0]]
break;
case 58:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 60:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 61:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 62:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 74:
this.$ = ["-",$$[$0]];
break;
case 75:
this.$ = [".", $$[$0]];
break;
case 76: case 97: case 100: case 102: case 104: case 112:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 78:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 79:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 80:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 81:
this.$= ["anonymous_class",$$[$0-1]]
break;
case 82:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 85:
this.$ = ["initializer_list","Object",[]];
break;
case 86:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 87:
this.$ = $$[$0-1];
break;
case 88: case 89: case 90:
this.$ = yytext;
break;
case 91:
this.$ = [$$[$0-2],"[]"];
break;
case 92:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 94:
this.$ = ["Object", $$[$0]];
break;
case 95:
this.$ = ["ref_parameter","Object", $$[$0]];
break;
case 96:
this.$ = ["default_parameter","Object", $$[$0-2],$$[$0]];
break;
case 99:
this.$ = [];
break;
case 103: case 105: case 113:
this.$ = [$$[$0]];
break;
case 108:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 109:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 110:
this.$ = ["else",$$[$0]];
break;
case 111:
this.$ = $$[$0];
break;
case 114:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{1:[3]},{5:[1,24]},o($Vd,[2,3],{6:3,21:4,14:5,49:15,53:16,34:17,56:18,64:19,4:25,15:$V0,16:$V1,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,37:$V7,39:$V8,50:$V9,51:$Va,67:$Vb,103:$Vc}),{22:[1,26]},o($Ve,[2,15]),{24:[1,27]},{16:$V1,17:$Vf,21:30,27:28,34:17,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{24:[1,31]},{24:[1,32]},{24:[1,33]},{24:[1,34]},{16:[1,35]},{24:[1,36]},o($Vg,[2,35],{25:37,66:40,73:41,56:44,64:45,34:49,16:$Vh,24:$Vi,39:$Vj,54:$Vk,72:$Vl,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc}),{34:52,103:$Vc},o($Vg,[2,37]),{52:[1,54],54:[1,53],57:[1,55],58:[1,56],59:[1,57],60:[1,58],61:[1,59],62:[1,60],63:[1,61],65:[1,62]},{52:[1,63]},o($Vg,[2,48]),{16:[1,64]},{24:$Vq,54:$Vr,82:$Vs,103:$Vt},{24:[1,68]},{16:[1,69]},{1:[2,1]},o($Vd,[2,2]),o($Ve,[2,14]),{16:$Vh,24:$Vi,25:70,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{23:[1,71]},{4:73,6:3,9:72,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{22:[1,74]},{16:$Vh,24:$Vi,25:75,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$V1,21:78,32:76,34:17,41:$Vu,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{34:79,103:$Vc},{16:$Vh,24:$Vi,25:80,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{24:[1,81]},{16:$Vh,24:$Vi,25:82,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($Vg,[2,34],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),{16:$Vh,24:$Vi,34:49,39:$Vj,54:$Vk,56:44,64:45,73:101,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:102,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($VN,[2,75]),o($VN,[2,77],{90:[1,103]}),{15:[1,104]},{24:[1,105]},o($VO,[2,83]),o($VO,[2,84]),{16:$Vh,24:$Vi,25:108,34:49,39:$Vj,54:$Vk,55:[1,106],56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,92:107,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:109,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($VO,[2,88]),o($VO,[2,89],{54:[1,110]}),o($VO,[2,90]),{24:$Vq},{52:[1,111]},{16:$Vh,24:$Vi,25:114,34:49,39:$Vj,54:$Vk,55:[1,112],56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,91:113,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:115,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($Vg,[2,41]),o($Vg,[2,42]),{16:$Vh,24:$Vi,25:116,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:117,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:118,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:119,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:120,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,34:49,39:$Vj,54:$Vk,56:44,64:45,66:121,73:41,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:122,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{17:[1,123],19:[1,124],20:[1,125]},{55:[1,126]},{16:$VP,49:128,96:127},{16:$Vh,24:$Vi,25:108,26:[1,131],34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,92:130,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{34:133,68:132,103:$Vc},o([22,26,35,36,44,52,54,55,57,58,59,60,61,62,63,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,99],[2,111]),{26:[1,134],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{24:[1,135]},{18:[1,136]},o([18,45],[2,6]),o($VQ,[2,115]),{26:[1,137],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{22:[1,138]},o($Vg,[2,25]),o($Vg,[2,26]),{35:[1,139]},{26:[1,140],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{26:$VR,34:143,40:141,97:142,98:$VS,103:$Vc},{26:[1,145],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{16:$Vh,24:$Vi,25:146,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:147,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:148,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:149,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:150,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:151,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:152,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:153,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:154,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:155,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:156,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:157,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:158,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:159,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:160,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:161,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:162,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:163,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($VN,[2,56]),o($VN,[2,74]),{16:$Vh,24:$Vi,34:49,39:$Vj,54:$Vk,56:44,64:45,66:164,73:41,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{17:[1,165]},{26:$VR,34:143,40:166,97:142,98:$VS,103:$Vc},o($VO,[2,85]),{55:[1,167]},o($VT,[2,103],{65:$Vv,70:[1,168],71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),{26:[1,169],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{16:$Vh,24:$Vi,25:114,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,91:113,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:170,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{52:[1,171]},{55:[1,172]},{55:[2,101],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,99:[1,173]},o($Vg,[2,40],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($Vg,[2,43],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($Vg,[2,44],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($Vg,[2,45],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($Vg,[2,46],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($Vg,[2,47],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($Vg,[2,49]),o($Vg,[2,39],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),{7:174,8:175,10:176,11:177,12:$VU,13:$VV,18:$VW},{16:[1,180]},{16:[1,181]},o($VX,[2,91]),{85:[1,182]},{70:[1,183],85:[2,105]},o([16,70,85],$Vt,{54:$Vr,82:$Vs}),{26:[1,184]},o($VO,[2,80]),{26:[1,185],70:[1,186]},{70:[1,187]},{16:$V1,17:$Vf,21:30,27:188,34:17,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{16:$Vh,24:$Vi,25:189,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($VQ,[2,114]),{17:[1,190]},{16:$Vh,24:$Vi,25:191,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{34:192,103:$Vc},{16:$V1,17:$Vf,21:30,27:193,34:17,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{26:[1,194]},{26:[2,98],70:[1,195]},o($VY,[2,94],{52:[1,196]}),{34:197,103:$Vc},o($Vg,[2,33]),{44:[1,198],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},o($VZ,[2,57],{65:$Vv,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($VZ,[2,58],{65:$Vv,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V_,[2,59],{65:$Vv,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V_,[2,60],{65:$Vv,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V$,[2,61],{65:$Vv,81:$VE,84:$VH,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V$,[2,62],{65:$Vv,81:$VE,84:$VH,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V$,[2,63],{65:$Vv,81:$VE,84:$VH,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V01,[2,64],{65:$Vv,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V$,[2,65],{65:$Vv,81:$VE,84:$VH,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V$,[2,66],{65:$Vv,81:$VE,84:$VH,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V01,[2,67],{65:$Vv,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V$,[2,68],{65:$Vv,81:$VE,84:$VH,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V11,[2,69],{88:$VL,89:$VM}),o($V11,[2,70],{88:$VL,89:$VM}),o($V11,[2,71],{88:$VL,89:$VM}),o($VN,[2,72]),o($VN,[2,73]),o($VN,[2,76]),{4:73,6:3,9:199,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{26:[1,200]},o($VO,[2,86]),{16:$Vh,24:$Vi,25:108,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,92:201,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($VO,[2,87]),o($Vg,[2,36],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),{16:$Vh,24:$Vi,25:202,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o([22,26,44,52,55,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,99],[2,78]),{16:$Vh,24:$Vi,25:114,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,91:203,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{18:[1,204]},{18:[2,4]},{8:205,10:176,11:177,12:$VU,13:$VV,18:[2,8]},{48:[1,206]},{48:[2,9]},{48:[2,10]},{17:[1,207]},{17:[1,208]},o($VX,[2,92]),{16:$VP,49:128,96:209},o($VO,[2,79]),{52:[1,210]},{34:211,103:$Vc},{34:212,103:$Vc},o($Ve,[2,16]),{26:[1,213],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{30:214,42:216,43:$V21,46:215},{22:[1,218],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{26:[1,220],36:[1,219]},o($Ve,[2,23],{38:221,100:222,101:$V31,102:$V41}),{17:[1,225]},{26:$VR,34:143,40:226,97:142,98:$VS,103:$Vc},{16:$Vh,24:$Vi,25:227,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($VY,[2,95]),{16:$Vh,24:$Vi,25:228,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{18:[1,229]},{17:[1,230]},o($VT,[2,102]),o($Vg,[2,38],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),{55:[2,100]},o($Ve,[2,11]),{18:[2,7]},{16:$VP,49:231},{7:232,8:175,10:176,11:177,12:$VU,13:$VV,18:$VW},{7:233,8:175,10:176,11:177,12:$VU,13:$VV,18:$VW},{85:[2,104]},{67:[1,234]},o($VY,[2,51]),o($VY,[2,52]),{22:[1,235]},{18:[1,236]},{18:[2,31],47:[1,237]},o($V51,[2,29],{42:216,46:238,43:$V21}),{16:$Vh,24:$Vi,25:239,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$V1,21:78,32:240,34:17,41:$Vu,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{34:241,103:$Vc},{16:$V1,17:$Vf,21:30,27:242,34:17,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},o($Ve,[2,22]),{24:[1,243]},{16:$V1,17:$Vf,21:30,27:244,34:17,37:[1,245],49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{24:[2,107]},{4:73,6:3,9:246,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{26:[2,97]},o($VY,[2,96],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o([22,26,44,55,70,71,99],[2,55],{65:$Vv,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($VO,[2,81]),{4:73,6:3,9:247,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{16:[1,248]},{18:[1,249]},{18:[1,250]},{24:[1,251]},o($Ve,[2,17]),o($Ve,[2,18]),{44:[1,252]},o($V51,[2,28]),{44:[1,253],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{26:[1,254]},{26:[1,255]},o($Ve,[2,21]),{16:$Vh,24:$Vi,25:256,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},o($Ve,[2,110]),{24:[2,106]},{18:[1,257]},{18:[1,258]},{24:[1,259]},o($Ve,[2,12]),o($Ve,[2,13]),{16:$Vh,24:$Vi,25:261,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,69:260,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{4:73,6:3,9:262,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{4:73,6:3,9:263,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{16:$V1,17:$Vf,21:30,27:264,34:17,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{16:$V1,17:$Vf,21:30,27:265,34:17,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{26:[1,266],65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},o($Ve,[2,24]),o($VO,[2,82]),{26:$VR,34:143,40:267,97:142,98:$VS,103:$Vc},{26:[1,268],70:[1,269]},{65:$Vv,70:[1,270],71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{18:[2,30]},{45:[1,271]},o($Ve,[2,19]),o($Ve,[2,20]),{16:$V1,17:$Vf,21:30,27:272,34:17,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{26:[1,273]},o($Vg,[2,50]),{16:$Vh,24:$Vi,25:274,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{16:$Vh,24:$Vi,25:275,34:49,39:$Vj,54:$Vk,56:44,64:45,66:40,72:$Vl,73:41,87:$Vm,93:$Vn,94:$Vo,95:$Vp,103:$Vc},{22:[1,276]},o($Ve,[2,109],{100:222,38:277,101:$V31,102:$V41}),{17:[1,278]},o($VY,[2,53],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($VY,[2,54],{65:$Vv,71:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o([18,43,47],[2,27]),o($Ve,[2,108]),{4:73,6:3,9:279,14:5,15:$V0,16:$V1,21:4,23:$V2,28:$V3,29:$V4,31:$V5,33:$V6,34:17,37:$V7,39:$V8,49:15,50:$V9,51:$Va,53:16,56:18,64:19,67:$Vb,103:$Vc},{18:[1,280]},o([12,13,18],[2,32])],
defaultActions: {24:[2,1],175:[2,4],178:[2,9],179:[2,10],203:[2,100],205:[2,7],209:[2,104],224:[2,107],226:[2,97],245:[2,106],262:[2,30]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 94
break;
case 2:return 95
break;
case 3:return "$"
break;
case 4:return 60
break;
case 5:return "function"
break;
case 6:return "class"
break;
case 7:return "public"
break;
case 8:return "extends"
break;
case 9:return "implements"
break;
case 10:return "private"
break;
case 11:return "static"
break;
case 12:return 93
break;
case 13:return 77
break;
case 14:return 75
break;
case 15:return "if"
break;
case 16:return "do"
break;
case 17:return "elseif"
break;
case 18:return "else"
break;
case 19:return "return"
break;
case 20:return "as"
break;
case 21:return "while"
break;
case 22:return "break"
break;
case 23:return "switch"
break;
case 24:return "default"
break;
case 25:return "case"
break;
case 26:return "foreach"
break;
case 27:return "for"
break;
case 28:return 70
break;
case 29:return 36
break;
case 30:return 90
break;
case 31:return 22
break;
case 32:return 44
break;
case 33:return 76
break;
case 34:return 98
break;
case 35:return 74
break;
case 36:return '|'
break;
case 37:return 83
break;
case 38:return 84
break;
case 39:return 85
break;
case 40:return 80
break;
case 41:return 81
break;
case 42:return 82
break;
case 43:return 79
break;
case 44:return 78
break;
case 45:return 52
break;
case 46:return 62
break;
case 47:return 88
break;
case 48:return 63
break;
case 49:return 89
break;
case 50:return 61
break;
case 51:return 58
break;
case 52:return 87
break;
case 53:return 57
break;
case 54:return 59
break;
case 55:return 86
break;
case 56:return 72
break;
case 57:return 65
break;
case 58:return '^'
break;
case 59:return 71
break;
case 60:return 17
break;
case 61:return 18
break;
case 62:return 99
break;
case 63:return 54
break;
case 64:return 55
break;
case 65:return 24
break;
case 66:return 26
break;
case 67:return 16
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:%=)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:new\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:as\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:=>)/,/^(?:->)/,/^(?:;)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = php_parser;
exports.Parser = php_parser.Parser;
exports.parse = function () { return php_parser.parse.apply(php_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}