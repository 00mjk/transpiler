/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var php_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,25],$V2=[1,21],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,22],$Vd=[1,23],$Ve=[5,18,45],$Vf=[5,12,13,16,18,23,28,29,31,33,37,39,45,50,51,67,99],$Vg=[1,31],$Vh=[1,53],$Vi=[1,49],$Vj=[1,45],$Vk=[1,48],$Vl=[1,40],$Vm=[1,41],$Vn=[1,44],$Vo=[1,50],$Vp=[1,52],$Vq=[22,26],$Vr=[1,69],$Vs=[1,67],$Vt=[1,68],$Vu=[2,87],$Vv=[15,48],$Vw=[1,79],$Vx=[1,96],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,97],$VK=[1,98],$VL=[22,26,44,55,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,95],$VM=[22,26,44,55,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,95],$VN=[1,125],$VO=[5,12,13,16,18,23,28,29,31,33,37,39,45,50,51,67,97,98,99],$VP=[2,93],$VQ=[1,140],$VR=[26,55],$VS=[16,70,81,99],$VT=[26,70],$VU=[22,26,44,55,70,71,74,75,76,77,78,79,80,81,95],$VV=[22,26,44,55,65,70,71,74,75,76,77,78,79,80,81,82,83,95],$VW=[1,205],$VX=[1,211],$VY=[1,212],$VZ=[18,47];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"extends":19,"implements":20,"statement_with_semicolon":21,";":22,"while":23,"(":24,"e":25,")":26,"bracket_statements":27,"do":28,"switch":29,"case_statements":30,"for":31,"statement_with_semicolon_":32,"foreach":33,"var_name":34,"as":35,"=>":36,"if":37,"elif":38,"function":39,"parameters":40,"initialize_var1":41,"case_statement":42,"case":43,":":44,"break":45,"case_statements_":46,"default":47,"static":48,"type":49,"System.out.println":50,"return":51,"=":52,"parallel_assignment":53,"[":54,"]":55,"access_array":56,"++":57,"--":58,"+=":59,"%=":60,"-=":61,"*=":62,"/=":63,"function_call":64,".":65,"dot_expr":66,"list":67,"parallel_lhs":68,"parallel_rhs":69,",":70,"?":71,"...":72,"parentheses_expr":73,"||":74,"&&":75,"!==":76,"===":77,"<=":78,"<":79,">=":80,">":81,"+":82,"-":83,"*":84,"/":85,"->":86,"access_arr":87,"exprs":88,"new":89,"NUMBER":90,"STRING_LITERAL":91,"types":92,"parameter":93,"&":94,"][":95,"else_if":96,"else":97,"elseif":98,"$":99,"var_names":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"extends",20:"implements",22:";",23:"while",24:"(",26:")",28:"do",29:"switch",31:"for",33:"foreach",35:"as",36:"=>",37:"if",39:"function",41:"initialize_var1",43:"case",44:":",45:"break",47:"default",48:"static",50:"System.out.println",51:"return",52:"=",54:"[",55:"]",57:"++",58:"--",59:"+=",60:"%=",61:"-=",62:"*=",63:"/=",65:".",67:"list",70:",",71:"?",72:"...",74:"||",75:"&&",76:"!==",77:"===",78:"<=",79:"<",80:">=",81:">",82:"+",83:"-",84:"*",85:"/",86:"->",89:"new",90:"NUMBER",91:"STRING_LITERAL",94:"&",95:"][",97:"else",98:"elseif",99:"$"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,8],[14,8],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,9],[6,7],[6,6],[6,5],[6,8],[32,1],[32,1],[42,6],[46,2],[46,1],[30,4],[30,1],[10,10],[21,4],[21,2],[21,4],[21,1],[21,5],[21,3],[21,3],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,3],[53,9],[68,3],[68,3],[69,3],[69,3],[25,5],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[66,3],[66,1],[56,4],[64,4],[64,3],[73,5],[73,7],[73,1],[73,1],[73,2],[73,3],[73,3],[73,1],[73,1],[73,1],[49,3],[49,4],[49,1],[93,1],[93,2],[93,3],[40,3],[40,1],[40,0],[87,3],[87,1],[88,3],[88,1],[92,3],[92,1],[96,2],[96,1],[38,6],[38,5],[38,2],[34,2],[100,3],[100,1],[27,3],[27,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 27:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 28: case 71: case 92: case 95:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = ["class",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = ["class_extends",$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["class_implements",$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13: case 109:
this.$ = ["semicolon",$$[$0-1]];
break;
case 15:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 17:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 18:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["foreach_with_index","Object",$$[$0-4],$$[$0-2],$$[$0-6],$$[$0]];
break;
case 20:
this.$ = ["foreach","Object",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 21:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 22:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 26:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 29:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 31:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 32:
this.$ = ["println",$$[$0-1]];
break;
case 33:
this.$ = ["return",$$[$0]];
break;
case 34:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["function_call","array_push",[$$[$0-4],$$[$0]]];
break;
case 37: case 38:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 39: case 40:
this.$ = [$$[$0],$$[$0-1]];
break;
case 41: case 42: case 43: case 44: case 45: case 55: case 56: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 48:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-6]],["parallel_rhs",$$[$0-1]]]
break;
case 49: case 51:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 50: case 52:
this.$ = [$$[$0-2],$$[$0]]
break;
case 53:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 54:
this.$ = ["unpack_array",$$[$0]]
break;
case 57:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 58:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 68:
this.$ = ["-",$$[$0]];
break;
case 69:
this.$ = [".", $$[$0]];
break;
case 70: case 91: case 94: case 96: case 98: case 106:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 72:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 73:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 74:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 75:
this.$= ["anonymous_class",$$[$0-1]]
break;
case 76:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 79:
this.$ = ["initializer_list","Object",[]];
break;
case 80:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 81:
this.$ = $$[$0-1];
break;
case 82: case 83: case 84:
this.$ = yytext;
break;
case 85:
this.$ = [$$[$0-2],"[]"];
break;
case 86:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 88:
this.$ = ["Object", $$[$0]];
break;
case 89:
this.$ = ["ref_parameter","Object", $$[$0]];
break;
case 90:
this.$ = ["default_parameter","Object", $$[$0-2],$$[$0]];
break;
case 93:
this.$ = [];
break;
case 97: case 99: case 107:
this.$ = [$$[$0]];
break;
case 102:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 103:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 104:
this.$ = ["else",$$[$0]];
break;
case 105:
this.$ = $$[$0];
break;
case 108:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{1:[3]},{5:[1,26]},o($Ve,[2,3],{6:3,21:4,14:5,49:15,53:16,34:17,56:18,64:19,11:20,4:27,12:$V0,13:$V1,16:$V2,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,37:$V8,39:$V9,50:$Va,51:$Vb,67:$Vc,99:$Vd}),{22:[1,28]},o($Vf,[2,14]),{24:[1,29]},{16:$V2,17:$Vg,21:32,27:30,34:17,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{24:[1,33]},{24:[1,34]},{24:[1,35]},{24:[1,36]},{16:[1,37]},{24:[1,38]},{16:$Vh,24:$Vi,25:39,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{34:54,99:$Vd},o($Vq,[2,35]),{52:[1,56],54:[1,55],57:[1,57],58:[1,58],59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],65:[1,64]},{52:[1,65]},o($Vq,[2,46]),{15:[1,66]},{24:$Vr,54:$Vs,79:$Vt,99:$Vu},{24:[1,70]},{16:[1,71]},o($Vv,[2,8]),o($Vv,[2,9]),{1:[2,1]},o($Ve,[2,2]),o($Vf,[2,13]),{16:$Vh,24:$Vi,25:72,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{23:[1,73]},{4:75,6:3,9:74,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{22:[1,76]},{16:$Vh,24:$Vi,25:77,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$V2,21:80,32:78,34:17,41:$Vw,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{34:81,99:$Vd},{16:$Vh,24:$Vi,25:82,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{24:[1,83]},{16:$Vh,24:$Vi,25:84,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($Vq,[2,33],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),{16:$Vh,24:$Vi,34:51,39:$Vj,54:$Vk,56:46,64:47,73:99,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:100,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($VL,[2,69]),o($VL,[2,71],{86:[1,101]}),{15:[1,102]},{24:[1,103]},o($VM,[2,77]),o($VM,[2,78]),{16:$Vh,24:$Vi,25:106,34:51,39:$Vj,54:$Vk,55:[1,104],56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,88:105,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:107,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($VM,[2,82]),o($VM,[2,83],{54:[1,108]}),o($VM,[2,84]),{24:$Vr},{52:[1,109]},{16:$Vh,24:$Vi,25:112,34:51,39:$Vj,54:$Vk,55:[1,110],56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,87:111,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:113,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($Vq,[2,39]),o($Vq,[2,40]),{16:$Vh,24:$Vi,25:114,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:115,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:116,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:117,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:118,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,34:51,39:$Vj,54:$Vk,56:46,64:47,66:119,73:43,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:120,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:[1,121]},{55:[1,122]},{16:$VN,49:124,92:123},{16:$Vh,24:$Vi,25:106,26:[1,127],34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,88:126,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{34:129,68:128,99:$Vd},o([22,26,35,36,44,52,54,55,57,58,59,60,61,62,63,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,95],[2,105]),{26:[1,130],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{24:[1,131]},{18:[1,132]},o([18,45],[2,5]),o($VO,[2,109]),{26:[1,133],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{22:[1,134]},o($Vq,[2,24]),o($Vq,[2,25]),{35:[1,135]},{26:[1,136],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{26:$VP,34:139,40:137,93:138,94:$VQ,99:$Vd},{26:[1,141],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{16:$Vh,24:$Vi,25:142,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:143,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:144,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:145,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:146,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:147,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:148,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:149,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:150,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:151,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:152,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:153,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:154,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:155,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($VL,[2,54]),o($VL,[2,68]),{16:$Vh,24:$Vi,34:51,39:$Vj,54:$Vk,56:46,64:47,66:156,73:43,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{17:[1,157]},{26:$VP,34:139,40:158,93:138,94:$VQ,99:$Vd},o($VM,[2,79]),{55:[1,159]},o($VR,[2,97],{65:$Vx,70:[1,160],71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),{26:[1,161],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{16:$Vh,24:$Vi,25:112,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,87:111,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:162,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{52:[1,163]},{55:[1,164]},{55:[2,95],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,95:[1,165]},o($Vq,[2,38],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($Vq,[2,41],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($Vq,[2,42],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($Vq,[2,43],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($Vq,[2,44],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($Vq,[2,45],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($Vq,[2,47]),o($Vq,[2,37],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),{17:[1,166],19:[1,167],20:[1,168]},o($VS,[2,85]),{81:[1,169]},{70:[1,170],81:[2,99]},o([16,70,81],$Vu,{54:$Vs,79:$Vt}),{26:[1,171]},o($VM,[2,74]),{26:[1,172],70:[1,173]},{70:[1,174]},{16:$V2,17:$Vg,21:32,27:175,34:17,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{16:$Vh,24:$Vi,25:176,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($VO,[2,108]),{17:[1,177]},{16:$Vh,24:$Vi,25:178,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{34:179,99:$Vd},{16:$V2,17:$Vg,21:32,27:180,34:17,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{26:[1,181]},{26:[2,92],70:[1,182]},o($VT,[2,88],{52:[1,183]}),{34:184,99:$Vd},o($Vq,[2,32]),{44:[1,185],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},o([22,26,44,55,70,71,74,95],[2,55],{65:$Vx,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o([22,26,44,55,70,71,74,75,95],[2,56],{65:$Vx,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VU,[2,57],{65:$Vx,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VU,[2,58],{65:$Vx,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VU,[2,59],{65:$Vx,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VU,[2,60],{65:$Vx,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VU,[2,61],{65:$Vx,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VU,[2,62],{65:$Vx,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VV,[2,63],{84:$VJ,85:$VK}),o($VV,[2,64],{84:$VJ,85:$VK}),o($VV,[2,65],{84:$VJ,85:$VK}),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,70]),{4:75,6:3,9:186,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{26:[1,187]},o($VM,[2,80]),{16:$Vh,24:$Vi,25:106,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,88:188,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($VM,[2,81]),o($Vq,[2,34],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),{16:$Vh,24:$Vi,25:189,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o([22,26,44,52,55,65,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,95],[2,72]),{16:$Vh,24:$Vi,25:112,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,87:190,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{7:191,8:192,10:193,11:194,12:$V0,13:$V1},{16:[1,195]},{16:[1,196]},o($VS,[2,86]),{16:$VN,49:124,92:197},o($VM,[2,73]),{52:[1,198]},{34:199,99:$Vd},{34:200,99:$Vd},o($Vf,[2,15]),{26:[1,201],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{30:202,42:204,43:$VW,46:203},{22:[1,206],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{26:[1,208],36:[1,207]},o($Vf,[2,22],{38:209,96:210,97:$VX,98:$VY}),{17:[1,213]},{26:$VP,34:139,40:214,93:138,94:$VQ,99:$Vd},{16:$Vh,24:$Vi,25:215,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($VT,[2,89]),{16:$Vh,24:$Vi,25:216,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{18:[1,217]},{17:[1,218]},o($VR,[2,96]),o($Vq,[2,36],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),{55:[2,94]},{18:[1,219]},{18:[2,4]},{8:220,10:193,11:194,12:$V0,13:$V1,18:[2,7]},{48:[1,221]},{17:[1,222]},{17:[1,223]},{81:[2,98]},{67:[1,224]},o($VT,[2,49]),o($VT,[2,50]),{22:[1,225]},{18:[1,226]},{18:[2,30],47:[1,227]},o($VZ,[2,28],{42:204,46:228,43:$VW}),{16:$Vh,24:$Vi,25:229,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$V2,21:80,32:230,34:17,41:$Vw,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{34:231,99:$Vd},{16:$V2,17:$Vg,21:32,27:232,34:17,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},o($Vf,[2,21]),{24:[1,233]},{16:$V2,17:$Vg,21:32,27:234,34:17,37:[1,235],49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{24:[2,101]},{4:75,6:3,9:236,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{26:[2,91]},o($VT,[2,90],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o([22,26,44,55,70,71,95],[2,53],{65:$Vx,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VM,[2,75]),{4:75,6:3,9:237,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},o($Vf,[2,10]),{18:[2,6]},{16:$VN,49:238},{7:239,8:192,10:193,11:194,12:$V0,13:$V1},{7:240,8:192,10:193,11:194,12:$V0,13:$V1},{24:[1,241]},o($Vf,[2,16]),o($Vf,[2,17]),{44:[1,242]},o($VZ,[2,27]),{44:[1,243],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{26:[1,244]},{26:[1,245]},o($Vf,[2,20]),{16:$Vh,24:$Vi,25:246,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},o($Vf,[2,104]),{24:[2,100]},{18:[1,247]},{18:[1,248]},{16:[1,249]},{18:[1,250]},{18:[1,251]},{16:$Vh,24:$Vi,25:253,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,69:252,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{4:75,6:3,9:254,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{4:75,6:3,9:255,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{16:$V2,17:$Vg,21:32,27:256,34:17,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{16:$V2,17:$Vg,21:32,27:257,34:17,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{26:[1,258],65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},o($Vf,[2,23]),o($VM,[2,76]),{24:[1,259]},o($Vf,[2,11]),o($Vf,[2,12]),{26:[1,260],70:[1,261]},{65:$Vx,70:[1,262],71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK},{18:[2,29]},{45:[1,263]},o($Vf,[2,18]),o($Vf,[2,19]),{16:$V2,17:$Vg,21:32,27:264,34:17,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{26:$VP,34:139,40:265,93:138,94:$VQ,99:$Vd},o($Vq,[2,48]),{16:$Vh,24:$Vi,25:266,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{16:$Vh,24:$Vi,25:267,34:51,39:$Vj,54:$Vk,56:46,64:47,66:42,72:$Vl,73:43,83:$Vm,89:$Vn,90:$Vo,91:$Vp,99:$Vd},{22:[1,268]},o($Vf,[2,103],{96:210,38:269,97:$VX,98:$VY}),{26:[1,270]},o($VT,[2,51],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o($VT,[2,52],{65:$Vx,71:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK}),o([18,43,47],[2,26]),o($Vf,[2,102]),{17:[1,271]},{4:75,6:3,9:272,11:20,12:$V0,13:$V1,14:5,16:$V2,21:4,23:$V3,28:$V4,29:$V5,31:$V6,33:$V7,34:17,37:$V8,39:$V9,49:15,50:$Va,51:$Vb,53:16,56:18,64:19,67:$Vc,99:$Vd},{18:[1,273]},o([12,13,18],[2,31])],
defaultActions: {26:[2,1],190:[2,94],192:[2,4],197:[2,98],212:[2,101],214:[2,91],220:[2,6],235:[2,100],254:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 90
break;
case 2:return 91
break;
case 3:return "$"
break;
case 4:return 60
break;
case 5:return "function"
break;
case 6:return "class"
break;
case 7:return "public"
break;
case 8:return "extends"
break;
case 9:return "implements"
break;
case 10:return "private"
break;
case 11:return "static"
break;
case 12:return 89
break;
case 13:return "if"
break;
case 14:return "do"
break;
case 15:return "elseif"
break;
case 16:return "else"
break;
case 17:return "return"
break;
case 18:return "as"
break;
case 19:return "while"
break;
case 20:return "break"
break;
case 21:return "switch"
break;
case 22:return "default"
break;
case 23:return "case"
break;
case 24:return "foreach"
break;
case 25:return "for"
break;
case 26:return 70
break;
case 27:return 36
break;
case 28:return 86
break;
case 29:return 22
break;
case 30:return 44
break;
case 31:return 75
break;
case 32:return 94
break;
case 33:return 74
break;
case 34:return '|'
break;
case 35:return 80
break;
case 36:return 81
break;
case 37:return 78
break;
case 38:return 79
break;
case 39:return 77
break;
case 40:return 76
break;
case 41:return 52
break;
case 42:return 62
break;
case 43:return 84
break;
case 44:return 63
break;
case 45:return 85
break;
case 46:return 61
break;
case 47:return 58
break;
case 48:return 83
break;
case 49:return 57
break;
case 50:return 59
break;
case 51:return 82
break;
case 52:return 72
break;
case 53:return 65
break;
case 54:return '^'
break;
case 55:return 71
break;
case 56:return 17
break;
case 57:return 18
break;
case 58:return 95
break;
case 59:return 54
break;
case 60:return 55
break;
case 61:return 24
break;
case 62:return 26
break;
case 63:return 16
break;
case 64:return 5
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:%=)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:new\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:as\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:=>)/,/^(?:->)/,/^(?:;)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = php_parser;
exports.Parser = php_parser.Parser;
exports.parse = function () { return php_parser.parse.apply(php_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}