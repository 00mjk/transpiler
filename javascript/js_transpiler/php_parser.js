/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var php_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,22],$Vc=[1,23],$Vd=[5,18,47],$Ve=[5,15,16,18,24,29,30,32,34,38,40,47,52,53,69,104],$Vf=[1,29],$Vg=[23,27],$Vh=[1,51],$Vi=[1,47],$Vj=[1,43],$Vk=[1,46],$Vl=[1,38],$Vm=[1,39],$Vn=[1,42],$Vo=[1,48],$Vp=[1,50],$Vq=[1,67],$Vr=[1,65],$Vs=[1,66],$Vt=[2,95],$Vu=[1,77],$Vv=[1,98],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,99],$VM=[1,100],$VN=[23,27,42,46,57,67,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,100],$VO=[23,27,42,46,57,67,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,100],$VP=[1,129],$VQ=[5,15,16,18,24,29,30,32,34,38,40,47,52,53,69,102,103,104],$VR=[2,101],$VS=[1,144],$VT=[27,57],$VU=[1,178],$VV=[1,179],$VW=[2,5],$VX=[1,182],$VY=[16,42,86,104],$VZ=[27,42],$V_=[23,27,42,46,57,72,75,76,100],$V$=[23,27,42,46,57,72,75,76,77,78,100],$V01=[23,27,42,46,57,72,75,76,77,78,79,80,81,83,84,86,100],$V11=[23,27,42,46,57,72,75,76,77,78,79,80,81,82,83,84,85,86,100],$V21=[23,27,42,46,57,67,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,100],$V31=[1,219],$V41=[1,225],$V51=[1,226],$V61=[18,49];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,"extends":19,"implements":20,"identifiers":21,"statement_with_semicolon":22,";":23,"while":24,"(":25,"e":26,")":27,"bracket_statements":28,"do":29,"switch":30,"case_statements":31,"for":32,"statement_with_semicolon_":33,"foreach":34,"var_name":35,"as":36,"=>":37,"if":38,"elif":39,"function":40,"parameters":41,",":42,"initialize_var1":43,"case_statement":44,"case":45,":":46,"break":47,"case_statements_":48,"default":49,"static":50,"type":51,"System.out.println":52,"return":53,"=":54,"parallel_assignment":55,"[":56,"]":57,"access_array":58,"++":59,"--":60,"+=":61,"%=":62,"-=":63,"*=":64,"/=":65,"function_call":66,".":67,"dot_expr":68,"list":69,"parallel_lhs":70,"parallel_rhs":71,"?":72,"...":73,"parentheses_expr":74,"||":75,"or":76,"&&":77,"and":78,"!==":79,"===":80,"<=":81,"<<":82,"<":83,">=":84,">>":85,">":86,"+":87,"-":88,"*":89,"/":90,"->":91,"access_arr":92,"exprs":93,"new":94,"NUMBER":95,"STRING_LITERAL":96,"types":97,"parameter":98,"&":99,"][":100,"else_if":101,"else":102,"elseif":103,"$":104,"var_names":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:"extends",20:"implements",23:";",24:"while",25:"(",27:")",29:"do",30:"switch",32:"for",34:"foreach",36:"as",37:"=>",38:"if",40:"function",42:",",43:"initialize_var1",45:"case",46:":",47:"break",49:"default",50:"static",52:"System.out.println",53:"return",54:"=",56:"[",57:"]",59:"++",60:"--",61:"+=",62:"%=",63:"-=",64:"*=",65:"/=",67:".",69:"list",72:"?",73:"...",75:"||",76:"or",77:"&&",78:"and",79:"!==",80:"===",81:"<=",82:"<<",83:"<",84:">=",85:">>",86:">",87:"+",88:"-",89:"*",90:"/",91:"->",94:"new",95:"NUMBER",96:"STRING_LITERAL",99:"&",100:"][",102:"else",103:"elseif",104:"$"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[7,0],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[14,7],[14,7],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,9],[6,7],[6,6],[6,5],[6,8],[21,3],[21,1],[33,1],[33,1],[44,6],[48,2],[48,1],[31,4],[31,1],[10,10],[22,4],[22,2],[22,1],[22,4],[22,1],[22,5],[22,3],[22,3],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,3],[55,9],[70,3],[70,3],[71,3],[71,3],[26,5],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,1],[68,3],[68,1],[58,4],[66,4],[66,3],[74,5],[74,7],[74,1],[74,1],[74,2],[74,3],[74,3],[74,1],[74,1],[74,1],[51,3],[51,4],[51,1],[98,1],[98,2],[98,3],[41,3],[41,1],[41,0],[92,3],[92,1],[93,3],[93,1],[97,3],[97,1],[101,2],[101,1],[39,6],[39,5],[39,2],[35,2],[105,3],[105,1],[28,3],[28,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 7: case 30:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 8: case 31: case 79: case 100: case 103:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["class_statements",[]]
break;
case 6:
this.$ = ["statements",$$[$0]]
break;
case 11:
this.$ = ["class","public",$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = ["class_extends","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["class_implements","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14: case 117:
this.$ = ["semicolon",$$[$0-1]];
break;
case 16:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 18:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach_with_index","Object",$$[$0-4],$$[$0-2],$$[$0-6],$$[$0]];
break;
case 21:
this.$ = ["foreach","Object",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 22:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 23:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25: case 78: case 99: case 102: case 104: case 106: case 114:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 26: case 105: case 107: case 115:
this.$ = [$$[$0]];
break;
case 29:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 32:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 34:
this.$ = ["static_method",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-2]];
break;
case 35:
this.$ = ["println",$$[$0-1]];
break;
case 36:
this.$ = ["return",$$[$0]];
break;
case 37:
this.$ = ["return"];
break;
case 38:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 40:
this.$ = ["function_call","array_push",[$$[$0-4],$$[$0]]];
break;
case 41: case 42:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 43: case 44:
this.$ = [$$[$0],$$[$0-1]];
break;
case 45: case 46: case 47: case 48: case 49: case 59: case 61: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 52:
this.$ = ["parallel_assignment",["parallel_lhs",$$[$0-6]],["parallel_rhs",$$[$0-1]]]
break;
case 53: case 55:
this.$ = [$$[$0-2].concat([$$[$0]])];
break;
case 54: case 56:
this.$ = [$$[$0-2],$$[$0]]
break;
case 57:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 58:
this.$ = ["unpack_array",$$[$0]]
break;
case 60:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 62:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 63:
this.$ = ['!=',$$[$0-2],$$[$0]];
break;
case 64:
this.$ = ['==',$$[$0-2],$$[$0]];
break;
case 76:
this.$ = ["-",$$[$0]];
break;
case 77:
this.$ = [".", $$[$0]];
break;
case 80:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 81:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 82:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 83:
this.$= ["anonymous_class",$$[$0-1]]
break;
case 84:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]]
break;
case 87:
this.$ = ["initializer_list","Object",[]];
break;
case 88:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 89:
this.$ = $$[$0-1];
break;
case 90: case 91: case 92:
this.$ = yytext;
break;
case 93:
this.$ = [$$[$0-2],"[]"];
break;
case 94:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 96:
this.$ = ["Object", $$[$0]];
break;
case 97:
this.$ = ["ref_parameter","Object", $$[$0]];
break;
case 98:
this.$ = ["default_parameter","Object", $$[$0-2],$$[$0]];
break;
case 101:
this.$ = [];
break;
case 110:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 111:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 112:
this.$ = ["else",$$[$0]];
break;
case 113:
this.$ = $$[$0];
break;
case 116:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{1:[3]},{5:[1,24]},o($Vd,[2,3],{6:3,22:4,14:5,51:15,55:16,35:17,58:18,66:19,4:25,15:$V0,16:$V1,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,38:$V7,40:$V8,52:$V9,53:$Va,69:$Vb,104:$Vc}),{23:[1,26]},o($Ve,[2,15]),{25:[1,27]},{16:$V1,17:$Vf,22:30,28:28,35:17,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{25:[1,31]},{25:[1,32]},{25:[1,33]},{25:[1,34]},{16:[1,35]},{25:[1,36]},o($Vg,[2,37],{26:37,68:40,74:41,58:44,66:45,35:49,16:$Vh,25:$Vi,40:$Vj,56:$Vk,73:$Vl,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc}),{35:52,104:$Vc},o($Vg,[2,39]),{54:[1,54],56:[1,53],59:[1,55],60:[1,56],61:[1,57],62:[1,58],63:[1,59],64:[1,60],65:[1,61],67:[1,62]},{54:[1,63]},o($Vg,[2,50]),{16:[1,64]},{25:$Vq,56:$Vr,83:$Vs,104:$Vt},{25:[1,68]},{16:[1,69]},{1:[2,1]},o($Vd,[2,2]),o($Ve,[2,14]),{16:$Vh,25:$Vi,26:70,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{24:[1,71]},{4:73,6:3,9:72,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{23:[1,74]},{16:$Vh,25:$Vi,26:75,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$V1,22:78,33:76,35:17,43:$Vu,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{35:79,104:$Vc},{16:$Vh,25:$Vi,26:80,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{25:[1,81]},{16:$Vh,25:$Vi,26:82,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($Vg,[2,36],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),{16:$Vh,25:$Vi,35:49,40:$Vj,56:$Vk,58:44,66:45,74:101,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:102,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($VN,[2,77]),o($VN,[2,79],{91:[1,103]}),{15:[1,104]},{25:[1,105]},o($VO,[2,85]),o($VO,[2,86]),{16:$Vh,25:$Vi,26:108,35:49,40:$Vj,56:$Vk,57:[1,106],58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,93:107,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:109,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($VO,[2,90]),o($VO,[2,91],{56:[1,110]}),o($VO,[2,92]),{25:$Vq},{54:[1,111]},{16:$Vh,25:$Vi,26:114,35:49,40:$Vj,56:$Vk,57:[1,112],58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,92:113,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:115,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($Vg,[2,43]),o($Vg,[2,44]),{16:$Vh,25:$Vi,26:116,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:117,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:118,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:119,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:120,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,35:49,40:$Vj,56:$Vk,58:44,66:45,68:121,74:41,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:122,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{17:[1,123],19:[1,124],20:[1,125]},{57:[1,126]},{16:$VP,51:128,97:127},{16:$Vh,25:$Vi,26:108,27:[1,131],35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,93:130,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{35:133,70:132,104:$Vc},o([23,27,36,37,42,46,54,56,57,59,60,61,62,63,64,65,67,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,100],[2,113]),{27:[1,134],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{25:[1,135]},{18:[1,136]},o([18,47],[2,6]),o($VQ,[2,117]),{27:[1,137],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{23:[1,138]},o($Vg,[2,27]),o($Vg,[2,28]),{36:[1,139]},{27:[1,140],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{27:$VR,35:143,41:141,98:142,99:$VS,104:$Vc},{27:[1,145],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{16:$Vh,25:$Vi,26:146,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:147,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:148,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:149,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:150,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:151,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:152,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:153,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:154,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:155,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:156,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:157,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:158,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:159,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:160,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:161,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:162,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:163,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($VN,[2,58]),o($VN,[2,76]),{16:$Vh,25:$Vi,35:49,40:$Vj,56:$Vk,58:44,66:45,68:164,74:41,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{17:[1,165]},{27:$VR,35:143,41:166,98:142,99:$VS,104:$Vc},o($VO,[2,87]),{57:[1,167]},o($VT,[2,105],{42:[1,168],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),{27:[1,169],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{16:$Vh,25:$Vi,26:114,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,92:113,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:170,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{54:[1,171]},{57:[1,172]},{57:[2,103],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,100:[1,173]},o($Vg,[2,42],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($Vg,[2,45],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($Vg,[2,46],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($Vg,[2,47],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($Vg,[2,48],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($Vg,[2,49],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($Vg,[2,51]),o($Vg,[2,41],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),{7:174,8:175,10:176,11:177,12:$VU,13:$VV,18:$VW},{16:[1,180]},{16:$VX,21:181},o($VY,[2,93]),{86:[1,183]},{42:[1,184],86:[2,107]},o([16,42,86],$Vt,{56:$Vr,83:$Vs}),{27:[1,185]},o($VO,[2,82]),{27:[1,186],42:[1,187]},{42:[1,188]},{16:$V1,17:$Vf,22:30,28:189,35:17,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{16:$Vh,25:$Vi,26:190,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($VQ,[2,116]),{17:[1,191]},{16:$Vh,25:$Vi,26:192,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{35:193,104:$Vc},{16:$V1,17:$Vf,22:30,28:194,35:17,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{27:[1,195]},{27:[2,100],42:[1,196]},o($VZ,[2,96],{54:[1,197]}),{35:198,104:$Vc},o($Vg,[2,35]),{46:[1,199],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},o($V_,[2,59],{67:$Vv,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V_,[2,60],{67:$Vv,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V$,[2,61],{67:$Vv,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V$,[2,62],{67:$Vv,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V01,[2,63],{67:$Vv,82:$VE,85:$VH,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V01,[2,64],{67:$Vv,82:$VE,85:$VH,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V01,[2,65],{67:$Vv,82:$VE,85:$VH,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V11,[2,66],{67:$Vv,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V01,[2,67],{67:$Vv,82:$VE,85:$VH,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V01,[2,68],{67:$Vv,82:$VE,85:$VH,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V11,[2,69],{67:$Vv,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V01,[2,70],{67:$Vv,82:$VE,85:$VH,87:$VJ,88:$VK,89:$VL,90:$VM}),o($V21,[2,71],{89:$VL,90:$VM}),o($V21,[2,72],{89:$VL,90:$VM}),o($V21,[2,73],{89:$VL,90:$VM}),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,78]),{4:73,6:3,9:200,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{27:[1,201]},o($VO,[2,88]),{16:$Vh,25:$Vi,26:108,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,93:202,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($VO,[2,89]),o($Vg,[2,38],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),{16:$Vh,25:$Vi,26:203,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o([23,27,42,46,54,57,67,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,100],[2,80]),{16:$Vh,25:$Vi,26:114,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,92:204,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{18:[1,205]},{18:[2,4]},{8:206,10:176,11:177,12:$VU,13:$VV,18:[2,8]},{50:[1,207]},{50:[2,9]},{50:[2,10]},{17:[1,208]},{17:[1,209]},{17:[2,26],42:[1,210]},o($VY,[2,94]),{16:$VP,51:128,97:211},o($VO,[2,81]),{54:[1,212]},{35:213,104:$Vc},{35:214,104:$Vc},o($Ve,[2,16]),{27:[1,215],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{31:216,44:218,45:$V31,48:217},{23:[1,220],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{27:[1,222],37:[1,221]},o($Ve,[2,23],{39:223,101:224,102:$V41,103:$V51}),{17:[1,227]},{27:$VR,35:143,41:228,98:142,99:$VS,104:$Vc},{16:$Vh,25:$Vi,26:229,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($VZ,[2,97]),{16:$Vh,25:$Vi,26:230,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{18:[1,231]},{17:[1,232]},o($VT,[2,104]),o($Vg,[2,40],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),{57:[2,102]},o($Ve,[2,11]),{18:[2,7]},{16:$VP,51:233},{7:234,8:175,10:176,11:177,12:$VU,13:$VV,18:$VW},{7:235,8:175,10:176,11:177,12:$VU,13:$VV,18:$VW},{16:$VX,21:236},{86:[2,106]},{69:[1,237]},o($VZ,[2,53]),o($VZ,[2,54]),{23:[1,238]},{18:[1,239]},{18:[2,33],49:[1,240]},o($V61,[2,31],{44:218,48:241,45:$V31}),{16:$Vh,25:$Vi,26:242,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$V1,22:78,33:243,35:17,43:$Vu,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{35:244,104:$Vc},{16:$V1,17:$Vf,22:30,28:245,35:17,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},o($Ve,[2,22]),{25:[1,246]},{16:$V1,17:$Vf,22:30,28:247,35:17,38:[1,248],51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{25:[2,109]},{4:73,6:3,9:249,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{27:[2,99]},o($VZ,[2,98],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o([23,27,42,46,57,72,100],[2,57],{67:$Vv,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($VO,[2,83]),{4:73,6:3,9:250,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{16:[1,251]},{18:[1,252]},{18:[1,253]},{17:[2,25]},{25:[1,254]},o($Ve,[2,17]),o($Ve,[2,18]),{46:[1,255]},o($V61,[2,30]),{46:[1,256],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{27:[1,257]},{27:[1,258]},o($Ve,[2,21]),{16:$Vh,25:$Vi,26:259,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},o($Ve,[2,112]),{25:[2,108]},{18:[1,260]},{18:[1,261]},{25:[1,262]},o($Ve,[2,12]),o($Ve,[2,13]),{16:$Vh,25:$Vi,26:264,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,71:263,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{4:73,6:3,9:265,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{4:73,6:3,9:266,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{16:$V1,17:$Vf,22:30,28:267,35:17,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{16:$V1,17:$Vf,22:30,28:268,35:17,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{27:[1,269],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},o($Ve,[2,24]),o($VO,[2,84]),{27:$VR,35:143,41:270,98:142,99:$VS,104:$Vc},{27:[1,271],42:[1,272]},{42:[1,273],67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM},{18:[2,32]},{47:[1,274]},o($Ve,[2,19]),o($Ve,[2,20]),{16:$V1,17:$Vf,22:30,28:275,35:17,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{27:[1,276]},o($Vg,[2,52]),{16:$Vh,25:$Vi,26:277,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{16:$Vh,25:$Vi,26:278,35:49,40:$Vj,56:$Vk,58:44,66:45,68:40,73:$Vl,74:41,88:$Vm,94:$Vn,95:$Vo,96:$Vp,104:$Vc},{23:[1,279]},o($Ve,[2,111],{101:224,39:280,102:$V41,103:$V51}),{17:[1,281]},o($VZ,[2,55],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o($VZ,[2,56],{67:$Vv,72:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM}),o([18,45,49],[2,29]),o($Ve,[2,110]),{4:73,6:3,9:282,14:5,15:$V0,16:$V1,22:4,24:$V2,29:$V3,30:$V4,32:$V5,34:$V6,35:17,38:$V7,40:$V8,51:15,52:$V9,53:$Va,55:16,58:18,66:19,69:$Vb,104:$Vc},{18:[1,283]},o([12,13,18],[2,34])],
defaultActions: {24:[2,1],175:[2,4],178:[2,9],179:[2,10],204:[2,102],206:[2,7],211:[2,106],226:[2,109],228:[2,99],236:[2,25],248:[2,108],265:[2,32]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 95
break;
case 2:return 96
break;
case 3:return "$"
break;
case 4:return 62
break;
case 5:return "function"
break;
case 6:return "class"
break;
case 7:return "public"
break;
case 8:return "extends"
break;
case 9:return "implements"
break;
case 10:return "private"
break;
case 11:return "static"
break;
case 12:return 94
break;
case 13:return 78
break;
case 14:return 76
break;
case 15:return "if"
break;
case 16:return "do"
break;
case 17:return "elseif"
break;
case 18:return "else"
break;
case 19:return "return"
break;
case 20:return "as"
break;
case 21:return "while"
break;
case 22:return "break"
break;
case 23:return "switch"
break;
case 24:return "default"
break;
case 25:return "case"
break;
case 26:return "foreach"
break;
case 27:return "for"
break;
case 28:return 42
break;
case 29:return 37
break;
case 30:return 91
break;
case 31:return 23
break;
case 32:return 46
break;
case 33:return 77
break;
case 34:return 99
break;
case 35:return 75
break;
case 36:return '|'
break;
case 37:return 84
break;
case 38:return 85
break;
case 39:return 86
break;
case 40:return 81
break;
case 41:return 82
break;
case 42:return 83
break;
case 43:return 80
break;
case 44:return 79
break;
case 45:return 54
break;
case 46:return 64
break;
case 47:return 89
break;
case 48:return 65
break;
case 49:return 90
break;
case 50:return 63
break;
case 51:return 60
break;
case 52:return 88
break;
case 53:return 59
break;
case 54:return 61
break;
case 55:return 87
break;
case 56:return 73
break;
case 57:return 67
break;
case 58:return '^'
break;
case 59:return 72
break;
case 60:return 17
break;
case 61:return 18
break;
case 62:return 100
break;
case 63:return 56
break;
case 64:return 57
break;
case 65:return 25
break;
case 66:return 27
break;
case 67:return 16
break;
case 68:return 5
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:%=)/,/^(?:function\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:new\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:as\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:foreach\b)/,/^(?:for\b)/,/^(?:,)/,/^(?:=>)/,/^(?:->)/,/^(?:;)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:===)/,/^(?:!==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = php_parser;
exports.Parser = php_parser.Parser;
exports.parse = function () { return php_parser.parse.apply(php_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}