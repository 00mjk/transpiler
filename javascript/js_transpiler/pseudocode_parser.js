/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pseudocode_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,17],$V5=[1,9],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,23],$Vc=[1,24],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[5,13,18,42,87,88],$Vh=[5,10,12,13,18,19,21,24,28,33,35,37,42,45,46,80,81,82,83,84,87,88],$Vi=[1,35],$Vj=[1,39],$Vk=[1,29],$Vl=[1,31],$Vm=[1,34],$Vn=[1,41],$Vo=[2,67],$Vp=[5,9,10,12,13,16,18,19,21,24,28,33,35,37,42,45,46,80,81,82,83,84,87,88],$Vq=[1,65],$Vr=[1,64],$Vs=[5,9,10,12,13,15,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,77,78,80,81,82,83,84,87,88],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,80,81,82,83,84,87,88],$VJ=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,80,81,82,83,84,87,88],$VK=[1,100],$VL=[2,90],$VM=[1,104],$VN=[2,81],$VO=[1,136],$VP=[5,10,12,13,18,19,20,21,24,28,33,35,37,42,45,46,80,81,82,83,84,87,88],$VQ=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,58,59,60,61,62,63,64,65,78,80,81,82,83,84,87,88],$VR=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,58,59,60,61,62,63,64,65,66,67,68,78,80,81,82,83,84,87,88],$VS=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,58,59,60,61,62,63,64,65,66,67,68,69,70,71,78,80,81,82,83,84,87,88],$VT=[1,165],$VU=[1,166],$VV=[1,190],$VW=[18,44];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"statement_with_semicolon":8,";":9,"while":10,"e":11,"do":12,"end":13,"bracket_statements":14,"(":15,")":16,"{":17,"}":18,"repeat":19,"until":20,"for":21,"_":22,",":23,"IDENTIFIER":24,"in":25,"pairs":26,"dot_expr":27,"if":28,"then":29,"elif":30,"function_or_def":31,"parameters":32,"foreach":33,"type":34,"public":35,"static":36,"switch":37,"case_statements":38,"case_statement":39,"case":40,":":41,"break":42,"case_statements_":43,"default":44,"return":45,"local":46,"=":47,"identifiers":48,"access_array":49,"++":50,"--":51,"+=":52,"-=":53,"*=":54,"/=":55,".":56,"function_call":57,"or":58,"and":59,"<=":60,"<":61,">=":62,"==":63,"~=":64,">":65,"+":66,"-":67,"..":68,"*":69,"/":70,"%":71,"^":72,"not_expr":73,"!":74,"parentheses_expr":75,"parentheses_expr_":76,"[":77,"]":78,"exprs":79,"NUMBER":80,"STRING_LITERAL":81,"function":82,"func":83,"def":84,"parameter":85,"types":86,"elseif":87,"else":88,"key_values":89,"key_value":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:";",10:"while",12:"do",13:"end",15:"(",16:")",17:"{",18:"}",19:"repeat",20:"until",21:"for",22:"_",23:",",24:"IDENTIFIER",25:"in",26:"pairs",28:"if",29:"then",33:"foreach",35:"public",36:"static",37:"switch",40:"case",41:":",42:"break",44:"default",45:"return",46:"local",47:"=",50:"++",51:"--",52:"+=",53:"-=",54:"*=",55:"/=",56:".",58:"or",59:"and",60:"<=",61:"<",62:">=",63:"==",64:"~=",65:">",66:"+",67:"-",68:"..",69:"*",70:"/",71:"%",72:"^",74:"!",77:"[",78:"]",80:"NUMBER",81:"STRING_LITERAL",82:"function",83:"func",84:"def",87:"elseif",88:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[6,2],[6,1],[6,5],[6,7],[6,5],[6,4],[6,12],[6,12],[6,6],[6,5],[6,7],[6,8],[6,9],[6,8],[6,10],[6,7],[14,3],[14,2],[39,6],[43,2],[43,1],[38,4],[38,1],[34,1],[8,2],[8,4],[8,2],[8,3],[8,3],[8,2],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,1],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,1],[73,2],[73,1],[27,3],[27,1],[49,4],[57,3],[57,4],[76,1],[76,1],[76,1],[31,1],[31,1],[31,1],[75,6],[75,7],[75,3],[75,1],[75,1],[75,1],[85,1],[32,3],[32,1],[32,0],[79,3],[79,1],[86,3],[86,1],[30,5],[30,4],[30,2],[48,3],[48,1],[89,3],[89,1],[90,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 25: case 62: case 80:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5: case 22:
this.$ = ["semicolon",$$[$0-1]];
break;
case 6:
this.$ = ["semicolon",$$[$0]];
break;
case 7: case 9:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 8:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 10:
this.$ = ["do_while",$$[$0],$$[$0-2]];
break;
case 11:
this.$ = ["foreach","Object",$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 12:
this.$ = ["foreach_with_index","Object",$$[$0-10],$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 13:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 14:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 17:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 18:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 21:
this.$= $$[$0-1];
break;
case 23:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 26:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 29:
this.$ = ["return",$$[$0]];
break;
case 30:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 31:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 32: case 33:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 34: case 35:
this.$ = [$$[$0],$$[$0-1]];
break;
case 36: case 37: case 38: case 39: case 44: case 45: case 46: case 47: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 40:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 42:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 43:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 48:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 57:
this.$ = ["-",$$[$0]];
break;
case 59:
this.$ = ["!", [".",$$[$0]]];
break;
case 60:
this.$ = [".", $$[$0]];
break;
case 61: case 79: case 82: case 84: case 89:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 63:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 64:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 65:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 66: case 67: case 68:
this.$ = yytext;
break;
case 72:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 73:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]];
break;
case 74:
this.$ = ["parentheses",$$[$0-1]];
break;
case 78:
this.$ = ["Object", $$[$0]];
break;
case 81:
this.$ = [];
break;
case 83: case 85: case 90: case 92:
this.$ = [$$[$0]];
break;
case 86:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 87:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 88:
this.$ = ["else",$$[$0]];
break;
case 91:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 93:
this.$ = [$$[$0-2],$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{1:[3]},{5:[1,25]},o($Vg,[2,3],{6:3,8:4,31:10,49:16,57:18,76:22,4:26,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf}),o($Vh,[2,6],{9:[1,27]}),{11:28,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{8:42,14:40,17:$Vn,24:$V4,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc},{8:42,14:43,17:$Vn,24:$V4,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc},{15:[1,46],22:[1,44],24:[1,45]},{11:47,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{24:[1,48]},{15:[1,49]},{36:[1,50]},{15:[1,51]},{11:52,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{24:[1,53],48:54},{47:[1,55]},o([15,77],$Vo,{47:[1,56],50:[1,57],51:[1,58],52:[1,59],53:[1,60],54:[1,61],55:[1,62],56:[1,63]}),o($Vp,[2,41]),{24:[2,69]},{24:[2,70]},{24:[2,71]},{15:$Vq,77:$Vr},o($Vs,[2,66]),o($Vs,[2,68]),{1:[2,1]},o($Vg,[2,2]),o($Vh,[2,5]),{12:[1,66],17:[1,67],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{11:83,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($VI,[2,58]),{15:$Vi,24:$Vj,27:84,49:36,57:37,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($VI,[2,60]),o($VI,[2,62],{56:[1,85]}),{15:[1,86]},{11:87,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($VJ,[2,75]),o($VJ,[2,76]),o($VJ,[2,77],{15:$Vq,77:$Vr}),o($Vs,$Vo),{10:[1,88]},{4:90,6:3,7:89,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{9:[1,91]},{20:[1,92]},{23:[1,93]},{23:[1,94]},{8:95,24:$V4,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc},{17:[1,97],29:[1,96],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{15:[1,98]},{24:$VK,34:99},{24:$VK,34:101},{11:102,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($Vp,[2,29],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,$VL,{23:$VM,47:[1,103]}),o($Vp,[2,31]),{11:105,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:106,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($Vp,[2,34]),o($Vp,[2,35]),{11:107,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:108,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:109,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:110,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{15:$Vi,24:$Vj,27:111,49:36,57:37,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:112,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:115,15:$Vi,16:[1,113],24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,79:114,80:$Vb,81:$Vc,82:$Vm},{4:90,6:3,7:116,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{4:90,6:3,7:117,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{11:118,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:119,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:120,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:121,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:122,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:123,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:124,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:125,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:126,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:127,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:128,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:129,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:130,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:131,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{11:132,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($VI,[2,57]),o($VI,[2,59]),{15:$Vi,24:$Vj,27:133,49:36,57:37,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{16:$VN,24:$VO,32:134,85:135},{16:[1,137],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{15:[1,138]},{18:[1,139]},o([13,18,42,87,88],[2,4]),o($VP,[2,22]),{11:140,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{24:[1,141]},{24:[1,142]},{9:[1,143]},{4:90,6:3,7:144,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{4:90,6:3,7:145,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{16:$VN,24:$VO,32:146,85:135},{24:[1,147]},{24:[2,28]},{24:[1,148]},{16:[1,149],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{11:150,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{24:[1,152],48:151},o($Vp,[2,32],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,[2,33],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,[2,36],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,[2,37],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,[2,38],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,[2,39],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,[2,40]),{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,78:[1,153]},o($VJ,[2,64]),{16:[1,154]},{16:[2,83],23:[1,155],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{13:[1,156]},{18:[1,157]},o([5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,58,78,80,81,82,83,84,87,88],[2,42],{59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o([5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,58,59,78,80,81,82,83,84,87,88],[2,43],{60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($VQ,[2,44],{66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($VQ,[2,45],{66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($VQ,[2,46],{66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($VQ,[2,47],{66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($VQ,[2,48],{66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($VQ,[2,49],{66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($VR,[2,50],{69:$VE,70:$VF,71:$VG,72:$VH}),o($VR,[2,51],{69:$VE,70:$VF,71:$VG,72:$VH}),o($VR,[2,52],{69:$VE,70:$VF,71:$VG,72:$VH}),o($VS,[2,53],{72:$VH}),o($VS,[2,54],{72:$VH}),o($VS,[2,55],{72:$VH}),o($VI,[2,56]),o($VI,[2,61]),{16:[1,158]},{16:[2,80],23:[1,159]},o([16,23],[2,78]),o($VJ,[2,74]),{11:160,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($VP,[2,21]),o($Vh,[2,10],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),{25:[1,161]},{25:[1,162]},{11:163,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{30:164,87:$VT,88:$VU},{18:[1,167]},{16:[1,168]},{25:[1,169]},{15:[1,170]},{17:[1,171]},o($Vp,[2,30],{58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH}),o($Vp,[2,89]),o($Vp,$VL,{23:$VM}),o([5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,45,46,47,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,80,81,82,83,84,87,88],[2,63]),o($VJ,[2,65]),{11:115,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,79:172,80:$Vb,81:$Vc,82:$Vm},o($Vh,[2,7]),o($Vh,[2,9]),{4:90,6:3,7:173,8:4,10:$V0,12:$V1,17:[1,174],19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{16:$VN,24:$VO,32:175,85:135},{16:[1,176],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{26:[1,177]},{26:[1,178]},{9:[1,179],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{13:[1,180]},{11:181,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{4:90,6:3,7:182,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($Vh,[2,14]),{4:90,6:3,7:183,8:4,10:$V0,12:$V1,17:[1,184],19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{24:[1,185]},{16:$VN,24:$VO,32:186,85:135},{38:187,39:189,40:$VV,43:188},{16:[2,82]},{13:[1,191]},{4:90,6:3,7:192,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{16:[2,79]},{9:[1,193]},{15:[1,194]},{15:[1,195]},{8:196,24:$V4,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc},o($Vh,[2,13]),{29:[1,197],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},{13:[2,88]},{13:[1,198]},{4:90,6:3,7:199,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{16:[1,200]},{16:[1,201]},{18:[1,202]},{18:[2,27],44:[1,203]},o($VW,[2,25],{39:189,43:204,40:$VV}),{11:205,15:$Vi,24:$Vj,27:32,49:36,57:37,67:$Vk,73:30,74:$Vl,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},o($VJ,[2,72]),{18:[1,206]},o($Vh,[2,8]),{15:$Vi,24:$Vj,27:207,49:36,57:37,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{15:$Vi,24:$Vj,27:208,49:36,57:37,75:33,76:38,80:$Vb,81:$Vc,82:$Vm},{16:[1,209]},{4:90,6:3,7:210,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($Vh,[2,15]),{18:[1,211]},{8:42,14:212,17:$Vn,24:$V4,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc},{17:[1,213]},o($Vh,[2,20]),{41:[1,214]},o($VW,[2,24]),{41:[1,215],58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH},o($VJ,[2,73]),{16:[1,216]},{16:[1,217]},{8:42,14:218,17:$Vn,24:$V4,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc},{13:[2,87],30:219,87:$VT,88:$VU},o($Vh,[2,16]),o($Vh,[2,18]),{4:90,6:3,7:220,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{4:90,6:3,7:221,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{4:90,6:3,7:222,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{12:[1,223]},{12:[1,224]},o($Vh,[2,17]),{13:[2,86]},{18:[1,225]},{18:[2,26]},{42:[1,226]},{4:90,6:3,7:227,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},{4:90,6:3,7:228,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:$V9,46:$Va,49:16,57:18,76:22,80:$Vb,81:$Vc,82:$Vd,83:$Ve,84:$Vf},o($Vh,[2,19]),{9:[1,229]},{13:[1,230]},{13:[1,231]},o([18,40,44],[2,23]),o($Vh,[2,11]),o($Vh,[2,12])],
defaultActions: {19:[2,69],20:[2,70],21:[2,71],25:[2,1],100:[2,28],172:[2,82],175:[2,79],182:[2,88],219:[2,86],221:[2,26]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 80
break;
case 2:return 81
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return 35
break;
case 6:return 36
break;
case 7:return "func"
break;
case 8:return "def"
break;
case 9:return "end"
break;
case 10:return "then"
break;
case 11:return 87
break;
case 12:return 33
break;
case 13:return 28
break;
case 14:return 88
break;
case 15:return 45
break;
case 16:return 10
break;
case 17:return 21
break;
case 18:return 46
break;
case 19:return 19
break;
case 20:return 20
break;
case 21:return 'of'
break;
case 22:return 'not'
break;
case 23:return 23
break;
case 24:return 68
break;
case 25:return 56
break;
case 26:return 41
break;
case 27:return 9
break;
case 28:return 59
break;
case 29:return 58
break;
case 30:return 62
break;
case 31:return 65
break;
case 32:return 60
break;
case 33:return 61
break;
case 34:return 64
break;
case 35:return 63
break;
case 36:return 47
break;
case 37:return 54
break;
case 38:return 69
break;
case 39:return 55
break;
case 40:return 70
break;
case 41:return 71
break;
case 42:return 53
break;
case 43:return 51
break;
case 44:return 67
break;
case 45:return 52
break;
case 46:return 50
break;
case 47:return 66
break;
case 48:return 72
break;
case 49:return 17
break;
case 50:return 18
break;
case 51:return 77
break;
case 52:return 78
break;
case 53:return 15
break;
case 54:return 16
break;
case 55:return 22
break;
case 56:return 26
break;
case 57:return 25
break;
case 58:return 12
break;
case 59:return 24
break;
case 60:return 5
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:func\b)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:then\b)/,/^(?:elseif\b)/,/^(?:foreach\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:local\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pseudocode_parser;
exports.Parser = pseudocode_parser.Parser;
exports.parse = function () { return pseudocode_parser.parse.apply(pseudocode_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}