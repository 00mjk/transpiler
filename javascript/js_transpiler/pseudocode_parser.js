/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pseudocode_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,17],$V5=[1,9],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,22],$Va=[1,23],$Vb=[1,14],$Vc=[1,25],$Vd=[1,26],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[5,13,18,42,89,90],$Vi=[5,10,12,13,18,19,21,24,28,33,35,37,42,46,47,48,82,83,84,85,86,89,90],$Vj=[1,37],$Vk=[1,41],$Vl=[1,31],$Vm=[1,33],$Vn=[1,36],$Vo=[1,43],$Vp=[2,69],$Vq=[5,9,10,12,13,16,18,19,21,24,28,33,35,37,42,46,47,48,82,83,84,85,86,89,90],$Vr=[1,67],$Vs=[1,66],$Vt=[5,9,10,12,13,15,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,80,82,83,84,85,86,89,90],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,80,82,83,84,85,86,89,90],$VK=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,80,82,83,84,85,86,89,90],$VL=[1,102],$VM=[2,92],$VN=[1,106],$VO=[2,83],$VP=[1,138],$VQ=[5,10,12,13,18,19,20,21,24,28,33,35,37,42,46,47,48,82,83,84,85,86,89,90],$VR=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,60,61,62,63,64,65,66,67,80,82,83,84,85,86,89,90],$VS=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,60,61,62,63,64,65,66,67,68,69,70,80,82,83,84,85,86,89,90],$VT=[5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,60,61,62,63,64,65,66,67,68,69,70,71,72,73,80,82,83,84,85,86,89,90],$VU=[1,167],$VV=[1,168],$VW=[1,192],$VX=[18,44];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"statement_with_semicolon":8,";":9,"while":10,"e":11,"do":12,"end":13,"bracket_statements":14,"(":15,")":16,"{":17,"}":18,"repeat":19,"until":20,"for":21,"_":22,",":23,"IDENTIFIER":24,"in":25,"pairs":26,"dot_expr":27,"if":28,"then":29,"elif":30,"function_or_def":31,"parameters":32,"foreach":33,"type":34,"public":35,"static":36,"switch":37,"case_statements":38,"case_statement":39,"case":40,":":41,"break":42,"case_statements_":43,"default":44,"local_or_var":45,"local":46,"var":47,"return":48,"=":49,"identifiers":50,"access_array":51,"++":52,"--":53,"+=":54,"-=":55,"*=":56,"/=":57,".":58,"function_call":59,"or":60,"and":61,"<=":62,"<":63,">=":64,"==":65,"~=":66,">":67,"+":68,"-":69,"..":70,"*":71,"/":72,"%":73,"^":74,"not_expr":75,"!":76,"parentheses_expr":77,"parentheses_expr_":78,"[":79,"]":80,"exprs":81,"NUMBER":82,"STRING_LITERAL":83,"function":84,"func":85,"def":86,"parameter":87,"types":88,"elseif":89,"else":90,"key_values":91,"key_value":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:";",10:"while",12:"do",13:"end",15:"(",16:")",17:"{",18:"}",19:"repeat",20:"until",21:"for",22:"_",23:",",24:"IDENTIFIER",25:"in",26:"pairs",28:"if",29:"then",33:"foreach",35:"public",36:"static",37:"switch",40:"case",41:":",42:"break",44:"default",46:"local",47:"var",48:"return",49:"=",52:"++",53:"--",54:"+=",55:"-=",56:"*=",57:"/=",58:".",60:"or",61:"and",62:"<=",63:"<",64:">=",65:"==",66:"~=",67:">",68:"+",69:"-",70:"..",71:"*",72:"/",73:"%",74:"^",76:"!",79:"[",80:"]",82:"NUMBER",83:"STRING_LITERAL",84:"function",85:"func",86:"def",89:"elseif",90:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[6,2],[6,1],[6,5],[6,7],[6,5],[6,4],[6,12],[6,12],[6,6],[6,5],[6,7],[6,8],[6,9],[6,8],[6,10],[6,7],[14,3],[14,2],[39,6],[43,2],[43,1],[38,4],[38,1],[34,1],[45,1],[45,1],[8,2],[8,4],[8,2],[8,3],[8,3],[8,2],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,1],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,1],[75,2],[75,1],[27,3],[27,1],[51,4],[59,3],[59,4],[78,1],[78,1],[78,1],[31,1],[31,1],[31,1],[77,6],[77,7],[77,3],[77,1],[77,1],[77,1],[87,1],[32,3],[32,1],[32,0],[81,3],[81,1],[88,3],[88,1],[30,5],[30,4],[30,2],[50,3],[50,1],[91,3],[91,1],[92,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 25: case 64: case 82:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5: case 22:
this.$ = ["semicolon",$$[$0-1]];
break;
case 6:
this.$ = ["semicolon",$$[$0]];
break;
case 7: case 9:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 8:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 10:
this.$ = ["do_while",$$[$0],$$[$0-2]];
break;
case 11:
this.$ = ["foreach","Object",$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 12:
this.$ = ["foreach_with_index","Object",$$[$0-10],$$[$0-8],$$[$0-4],$$[$0-1]];
break;
case 13:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 14:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 17:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 18:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["function",$$[$0-9],$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 20:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 21:
this.$= $$[$0-1];
break;
case 23:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 26:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 31:
this.$ = ["return",$$[$0]];
break;
case 32:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 33:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 34: case 35:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 36: case 37:
this.$ = [$$[$0],$$[$0-1]];
break;
case 38: case 39: case 40: case 41: case 46: case 47: case 48: case 49: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 42:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 44:
this.$ = ['||',$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ['&&',$$[$0-2],$$[$0]];
break;
case 50:
this.$ = ["!=",$$[$0-2],$$[$0]];
break;
case 59:
this.$ = ["-",$$[$0]];
break;
case 61:
this.$ = ["!", [".",$$[$0]]];
break;
case 62:
this.$ = [".", $$[$0]];
break;
case 63: case 81: case 84: case 86: case 91:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 65:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 66:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 67:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 68: case 69: case 70:
this.$ = yytext;
break;
case 74:
this.$ = ["anonymous_function","Object",$$[$0-3],$$[$0-1]];
break;
case 75:
this.$ = ["anonymous_function","Object",$$[$0-4],$$[$0-1]];
break;
case 76:
this.$ = ["parentheses",$$[$0-1]];
break;
case 80:
this.$ = ["Object", $$[$0]];
break;
case 83:
this.$ = [];
break;
case 85: case 87: case 92: case 94:
this.$ = [$$[$0]];
break;
case 88:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 89:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 90:
this.$ = ["else",$$[$0]];
break;
case 93:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 95:
this.$ = [$$[$0-2],$$[$0]]
break;
}
},
table: [{3:1,4:2,6:3,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{1:[3]},{5:[1,27]},o($Vh,[2,3],{6:3,8:4,31:10,45:15,51:16,59:18,78:24,4:28,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,33:$V6,35:$V7,37:$V8,46:$V9,47:$Va,48:$Vb,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg}),o($Vi,[2,6],{9:[1,29]}),{11:30,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{8:44,14:42,17:$Vo,24:$V4,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd},{8:44,14:45,17:$Vo,24:$V4,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd},{15:[1,48],22:[1,46],24:[1,47]},{11:49,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{24:[1,50]},{15:[1,51]},{36:[1,52]},{15:[1,53]},{11:54,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{24:[1,55],50:56},{49:[1,57]},o([15,79],$Vp,{49:[1,58],52:[1,59],53:[1,60],54:[1,61],55:[1,62],56:[1,63],57:[1,64],58:[1,65]}),o($Vq,[2,43]),{24:[2,71]},{24:[2,72]},{24:[2,73]},{24:[2,29]},{24:[2,30]},{15:$Vr,79:$Vs},o($Vt,[2,68]),o($Vt,[2,70]),{1:[2,1]},o($Vh,[2,2]),o($Vi,[2,5]),{12:[1,68],17:[1,69],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{11:85,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($VJ,[2,60]),{15:$Vj,24:$Vk,27:86,51:38,59:39,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($VJ,[2,62]),o($VJ,[2,64],{58:[1,87]}),{15:[1,88]},{11:89,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($VK,[2,77]),o($VK,[2,78]),o($VK,[2,79],{15:$Vr,79:$Vs}),o($Vt,$Vp),{10:[1,90]},{4:92,6:3,7:91,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{9:[1,93]},{20:[1,94]},{23:[1,95]},{23:[1,96]},{8:97,24:$V4,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd},{17:[1,99],29:[1,98],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{15:[1,100]},{24:$VL,34:101},{24:$VL,34:103},{11:104,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($Vq,[2,31],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,$VM,{23:$VN,49:[1,105]}),o($Vq,[2,33]),{11:107,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:108,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($Vq,[2,36]),o($Vq,[2,37]),{11:109,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:110,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:111,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:112,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{15:$Vj,24:$Vk,27:113,51:38,59:39,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:114,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:117,15:$Vj,16:[1,115],24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,81:116,82:$Vc,83:$Vd,84:$Vn},{4:92,6:3,7:118,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:92,6:3,7:119,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{11:120,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:121,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:122,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:123,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:124,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:125,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:126,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:127,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:128,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:129,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:130,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:131,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:132,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:133,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{11:134,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($VJ,[2,59]),o($VJ,[2,61]),{15:$Vj,24:$Vk,27:135,51:38,59:39,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{16:$VO,24:$VP,32:136,87:137},{16:[1,139],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{15:[1,140]},{18:[1,141]},o([13,18,42,89,90],[2,4]),o($VQ,[2,22]),{11:142,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{24:[1,143]},{24:[1,144]},{9:[1,145]},{4:92,6:3,7:146,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:92,6:3,7:147,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{16:$VO,24:$VP,32:148,87:137},{24:[1,149]},{24:[2,28]},{24:[1,150]},{16:[1,151],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{11:152,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{24:[1,154],50:153},o($Vq,[2,34],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,[2,35],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,[2,38],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,[2,39],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,[2,40],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,[2,41],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,[2,42]),{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,80:[1,155]},o($VK,[2,66]),{16:[1,156]},{16:[2,85],23:[1,157],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{13:[1,158]},{18:[1,159]},o([5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,60,80,82,83,84,85,86,89,90],[2,44],{61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o([5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,60,61,80,82,83,84,85,86,89,90],[2,45],{62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VR,[2,46],{68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VR,[2,47],{68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VR,[2,48],{68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VR,[2,49],{68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VR,[2,50],{68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VR,[2,51],{68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VS,[2,52],{71:$VF,72:$VG,73:$VH,74:$VI}),o($VS,[2,53],{71:$VF,72:$VG,73:$VH,74:$VI}),o($VS,[2,54],{71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,55],{74:$VI}),o($VT,[2,56],{74:$VI}),o($VT,[2,57],{74:$VI}),o($VJ,[2,58]),o($VJ,[2,63]),{16:[1,160]},{16:[2,82],23:[1,161]},o([16,23],[2,80]),o($VK,[2,76]),{11:162,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($VQ,[2,21]),o($Vi,[2,10],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{25:[1,163]},{25:[1,164]},{11:165,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{30:166,89:$VU,90:$VV},{18:[1,169]},{16:[1,170]},{25:[1,171]},{15:[1,172]},{17:[1,173]},o($Vq,[2,32],{60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($Vq,[2,91]),o($Vq,$VM,{23:$VN}),o([5,9,10,12,13,16,17,18,19,21,23,24,28,29,33,35,37,41,42,46,47,48,49,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,80,82,83,84,85,86,89,90],[2,65]),o($VK,[2,67]),{11:117,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,81:174,82:$Vc,83:$Vd,84:$Vn},o($Vi,[2,7]),o($Vi,[2,9]),{4:92,6:3,7:175,8:4,10:$V0,12:$V1,17:[1,176],19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{16:$VO,24:$VP,32:177,87:137},{16:[1,178],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{26:[1,179]},{26:[1,180]},{9:[1,181],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{13:[1,182]},{11:183,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{4:92,6:3,7:184,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vi,[2,14]),{4:92,6:3,7:185,8:4,10:$V0,12:$V1,17:[1,186],19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{24:[1,187]},{16:$VO,24:$VP,32:188,87:137},{38:189,39:191,40:$VW,43:190},{16:[2,84]},{13:[1,193]},{4:92,6:3,7:194,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{16:[2,81]},{9:[1,195]},{15:[1,196]},{15:[1,197]},{8:198,24:$V4,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd},o($Vi,[2,13]),{29:[1,199],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{13:[2,90]},{13:[1,200]},{4:92,6:3,7:201,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{16:[1,202]},{16:[1,203]},{18:[1,204]},{18:[2,27],44:[1,205]},o($VX,[2,25],{39:191,43:206,40:$VW}),{11:207,15:$Vj,24:$Vk,27:34,51:38,59:39,69:$Vl,75:32,76:$Vm,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},o($VK,[2,74]),{18:[1,208]},o($Vi,[2,8]),{15:$Vj,24:$Vk,27:209,51:38,59:39,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{15:$Vj,24:$Vk,27:210,51:38,59:39,77:35,78:40,82:$Vc,83:$Vd,84:$Vn},{16:[1,211]},{4:92,6:3,7:212,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vi,[2,15]),{18:[1,213]},{8:44,14:214,17:$Vo,24:$V4,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd},{17:[1,215]},o($Vi,[2,20]),{41:[1,216]},o($VX,[2,24]),{41:[1,217],60:$Vu,61:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},o($VK,[2,75]),{16:[1,218]},{16:[1,219]},{8:44,14:220,17:$Vo,24:$V4,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd},{13:[2,89],30:221,89:$VU,90:$VV},o($Vi,[2,16]),o($Vi,[2,18]),{4:92,6:3,7:222,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:92,6:3,7:223,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:92,6:3,7:224,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{12:[1,225]},{12:[1,226]},o($Vi,[2,17]),{13:[2,88]},{18:[1,227]},{18:[2,26]},{42:[1,228]},{4:92,6:3,7:229,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},{4:92,6:3,7:230,8:4,10:$V0,12:$V1,19:$V2,21:$V3,24:$V4,28:$V5,31:10,33:$V6,35:$V7,37:$V8,45:15,46:$V9,47:$Va,48:$Vb,51:16,59:18,78:24,82:$Vc,83:$Vd,84:$Ve,85:$Vf,86:$Vg},o($Vi,[2,19]),{9:[1,231]},{13:[1,232]},{13:[1,233]},o([18,40,44],[2,23]),o($Vi,[2,11]),o($Vi,[2,12])],
defaultActions: {19:[2,71],20:[2,72],21:[2,73],22:[2,29],23:[2,30],27:[2,1],102:[2,28],174:[2,84],177:[2,81],184:[2,90],221:[2,88],223:[2,26]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 82
break;
case 2:return 83
break;
case 3:return "$"
break;
case 4:return "function"
break;
case 5:return 35
break;
case 6:return 36
break;
case 7:return "func"
break;
case 8:return "def"
break;
case 9:return "end"
break;
case 10:return "then"
break;
case 11:return 89
break;
case 12:return 33
break;
case 13:return 28
break;
case 14:return 90
break;
case 15:return 48
break;
case 16:return 10
break;
case 17:return 21
break;
case 18:return 47
break;
case 19:return 46
break;
case 20:return 19
break;
case 21:return 20
break;
case 22:return 'of'
break;
case 23:return 'not'
break;
case 24:return 23
break;
case 25:return 70
break;
case 26:return 58
break;
case 27:return 41
break;
case 28:return 9
break;
case 29:return 61
break;
case 30:return 60
break;
case 31:return 64
break;
case 32:return 67
break;
case 33:return 62
break;
case 34:return 63
break;
case 35:return 66
break;
case 36:return 65
break;
case 37:return 49
break;
case 38:return 56
break;
case 39:return 71
break;
case 40:return 57
break;
case 41:return 72
break;
case 42:return 73
break;
case 43:return 55
break;
case 44:return 53
break;
case 45:return 69
break;
case 46:return 54
break;
case 47:return 52
break;
case 48:return 68
break;
case 49:return 74
break;
case 50:return 17
break;
case 51:return 18
break;
case 52:return 79
break;
case 53:return 80
break;
case 54:return 15
break;
case 55:return 16
break;
case 56:return 22
break;
case 57:return 26
break;
case 58:return 25
break;
case 59:return 12
break;
case 60:return 24
break;
case 61:return 5
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|--+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:function\b)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:func\b)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:then\b)/,/^(?:elseif\b)/,/^(?:foreach\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:var\b)/,/^(?:local\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:of\b)/,/^(?:not\b)/,/^(?:,)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:~=)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:pairs\b)/,/^(?:in\b)/,/^(?:do\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pseudocode_parser;
exports.Parser = pseudocode_parser.Parser;
exports.parse = function () { return pseudocode_parser.parse.apply(pseudocode_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}