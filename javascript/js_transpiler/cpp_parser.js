/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cpp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,16],$V2=[1,20],$V3=[1,4],$V4=[1,21],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,10],$V9=[1,11],$Va=[1,13],$Vb=[1,14],$Vc=[1,17],$Vd=[1,18],$Ve=[1,23],$Vf=[1,22],$Vg=[5,18,45],$Vh=[5,15,16,18,19,21,25,34,37,38,40,41,45,67,68,73,74,88,91],$Vi=[1,30],$Vj=[1,47],$Vk=[1,44],$Vl=[1,40],$Vm=[1,48],$Vn=[1,42],$Vo=[1,46],$Vp=[1,50],$Vq=[2,117],$Vr=[1,61],$Vs=[20,32],$Vt=[16,17,24,30,50,77,93,94],$Vu=[2,116],$Vv=[1,68],$Vw=[1,69],$Vx=[2,141],$Vy=[1,81],$Vz=[1,82],$VA=[1,89],$VB=[1,91],$VC=[1,88],$VD=[1,90],$VE=[1,85],$VF=[1,84],$VG=[1,86],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,83],$VM=[1,87],$VN=[1,96],$VO=[18,20,22,24,27,32,58,59,60,61,62,63,64,65,66,77,80,81,82],$VP=[1,97],$VQ=[2,99],$VR=[1,102],$VS=[1,101],$VT=[18,20,22,24,27,30,32,58,59,60,61,62,63,64,65,66,71,77,80,81,82,86],$VU=[1,107],$VV=[1,116],$VW=[1,119],$VX=[5,15,16,18,19,21,25,34,37,38,40,41,45,67,68,73,74,88,91,98],$VY=[2,125],$VZ=[1,142],$V_=[1,146],$V$=[1,166],$V01=[1,171],$V11=[1,188],$V21=[1,189],$V31=[1,186],$V41=[24,77],$V51=[18,20,32],$V61=[18,20,27,32,60,61,77,80],$V71=[18,20,27,32,58,59,60,61,62,77,80,81],$V81=[18,20,22,24,27,32,58,59,60,61,62,77,80,81],$V91=[18,20,22,24,27,32,58,59,60,61,62,63,64,77,80,81],$Va1=[18,32],$Vb1=[18,32,77],$Vc1=[22,24,58,59,60,61,62,63,64,65,66,80,81,82],$Vd1=[2,73],$Ve1=[16,49,88,91],$Vf1=[1,242],$Vg1=[1,246],$Vh1=[32,77],$Vi1=[18,20,22,24,27,32,58,59,60,61,62,63,64,65,66,71,77,80,81,82],$Vj1=[18,47],$Vk1=[2,74],$Vl1=[12,13,16,18,49,88,91],$Vm1=[1,344],$Vn1=[18,77];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"namespace":15,"IDENTIFIER":16,"{":17,"}":18,"class":19,";":20,"template":21,"<":22,"type_params":23,">":24,"enum":25,"identifiers":26,":":27,"implements":28,"type":29,"(":30,"parameters":31,")":32,"statement_with_semicolon":33,"while":34,"e":35,"bracket_statements":36,"do":37,"switch":38,"case_statements":39,"for":40,"if":41,"elif":42,"case_statement":43,"case":44,"break":45,"case_statements_":46,"default":47,"=":48,"static":49,"operator":50,"OPERATOR":51,"+=":52,"-=":53,"*=":54,"/=":55,"++":56,"--":57,"<=":58,">=":59,"&&":60,"||":61,"==":62,"+":63,"-":64,"*":65,"/":66,"return":67,"const":68,"exprs":69,"access_array":70,".":71,"dot_expr":72,"function_call":73,"cout":74,"parentheses_expr":75,"key_values":76,",":77,"key_value":78,"STRING_LITERAL":79,"?":80,"!=":81,"%":82,"initializer_list":83,"[":84,"access_arr":85,"]":86,"new":87,"Dictionary":88,"NUMBER":89,"types":90,"Object":91,"parameter":92,"&":93,"...":94,"expr":95,"type_param":96,"typename":97,"else":98,"add":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"namespace",16:"IDENTIFIER",17:"{",18:"}",19:"class",20:";",21:"template",22:"<",24:">",25:"enum",27:":",28:"implements",30:"(",32:")",34:"while",37:"do",38:"switch",40:"for",41:"if",44:"case",45:"break",47:"default",48:"=",49:"static",50:"operator",52:"+=",53:"-=",54:"*=",55:"/=",56:"++",57:"--",58:"<=",59:">=",60:"&&",61:"||",62:"==",63:"+",64:"-",65:"*",66:"/",67:"return",68:"const",71:".",73:"function_call",74:"cout",77:",",79:"STRING_LITERAL",80:"?",81:"!=",82:"%",84:"[",86:"]",87:"new",88:"Dictionary",89:"NUMBER",91:"Object",93:"&",94:"...",97:"typename",98:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,5],[14,6],[14,8],[14,5],[14,8],[14,7],[6,12],[6,2],[6,1],[6,5],[6,7],[6,7],[6,9],[6,8],[6,6],[6,5],[6,8],[43,6],[46,2],[46,1],[39,4],[39,1],[10,6],[10,4],[10,7],[10,8],[10,7],[10,9],[10,8],[10,9],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[33,2],[33,5],[33,3],[33,6],[33,4],[33,2],[33,3],[33,3],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,4],[33,7],[76,3],[76,1],[78,5],[35,5],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,4],[35,4],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[35,2],[35,1],[72,3],[72,3],[72,1],[70,4],[83,4],[83,5],[83,4],[83,5],[75,3],[75,10],[75,1],[75,3],[75,4],[75,1],[75,1],[75,1],[29,3],[29,4],[29,1],[29,1],[29,1],[92,3],[92,3],[92,4],[92,2],[92,3],[31,3],[31,1],[31,0],[85,3],[85,1],[69,3],[69,1],[95,2],[95,1],[90,3],[90,1],[23,3],[23,1],[96,2],[96,2],[42,7],[42,2],[26,3],[26,1],[99,3],[99,1],[36,3],[36,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6: case 28:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 29: case 99: case 124: case 127:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = [$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 11:
this.$ = [$$[$0-5],"public",$$[$0-4],$$[$0-2]];
break;
case 12:
this.$ = ["generic_class","public",$$[$0-3],$$[$0-1],$$[$0-5]];
break;
case 13:
this.$ = ["enum",$$[$0-4],"public",$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends","public",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements","public",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16:
this.$ = ["generic_function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],$$[$0-9]];
break;
case 17: case 145:
this.$ = ["semicolon",$$[$0-1]];
break;
case 19:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 21:
this.$ = ["switch",$$[$0-4],$$[$0-1]];
break;
case 22:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 25:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 27:
this.$ = ["case",$$[$0-4],$$[$0-2]]
break;
case 30:
this.$ = $$[$0-3].concat([["default",$$[$0]]])
break;
case 32:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 33:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 35:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 36:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 37:
this.$ = ["static_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 38:
this.$ = ["instance_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 39:
this.$ = ["instance_overload_operator","public",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 57:
this.$ = ["return",$$[$0]];
break;
case 58:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 59:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 60:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 61:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 62:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 63: case 64:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 65: case 66:
this.$ = [$$[$0],$$[$0-1]];
break;
case 67: case 68: case 69: case 70: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 89: case 90: case 91: case 92: case 93:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 71:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 73: case 88:
this.$ = ["<<",$$[$0-3],$$[$0]];
break;
case 74:
this.$ = ["<<",["<<",$$[$0-6],$$[$0-3]],$$[$0]];
break;
case 75:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 76: case 129: case 131: case 133: case 135: case 141: case 143:
this.$ = [$$[$0]];
break;
case 77: case 114:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 78:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 87:
this.$ = [">>",$$[$0-3],$$[$0]];
break;
case 95:
this.$ = ["-",$$[$0]];
break;
case 96:
this.$ = [".", $$[$0]];
break;
case 97: case 98: case 123: case 126: case 128: case 132: case 134: case 140: case 142:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 100:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 101:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 102:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 103:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 104:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 105: case 144:
this.$= $$[$0-1];
break;
case 106:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 108:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 109:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 110: case 111: case 112:
this.$ = yytext;
break;
case 113:
this.$ = [$$[$0-2],"[]"];
break;
case 118:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 119:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 120:
this.$ = ["optional_arg",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 121:
this.$ = [$$[$0-1],$$[$0]];
break;
case 122:
this.$=["final_parameter",$$[$0-1],$$[$0]]
break;
case 125:
this.$= []
break;
case 130:
this.$ = ["function_call_ref",$$[$0]];
break;
case 136: case 137:
this.$ = $$[$0];
break;
case 138:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 139:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{1:[3]},{5:[1,24]},o($Vg,[2,3],{6:3,33:5,14:6,29:12,70:15,4:25,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,73:$Vc,74:$Vd,88:$Ve,91:$Vf}),{22:[1,26]},{20:[1,27]},o($Vh,[2,18]),{30:[1,28]},{16:$V1,17:$Vi,29:32,33:31,36:29,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{30:[1,33]},{30:[1,34]},{30:[1,35]},{16:[1,36],26:37},{16:$Vj,30:$Vk,35:38,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vp,29:49,88:$Ve,91:$Vf},{48:[1,51]},{16:$Vq,22:$Vr,48:[1,52],52:[1,55],53:[1,56],54:[1,57],55:[1,58],56:[1,53],57:[1,54],71:[1,59],84:[1,60]},o($Vs,[2,72]),{22:[1,62]},{16:[1,63]},{16:[1,64]},{16:[1,65]},o($Vt,[2,115]),o([16,24,50,77,93,94],$Vu),{1:[2,1]},o($Vg,[2,2]),{19:$Vv,23:66,96:67,97:$Vw},o($Vh,[2,17]),{16:$Vj,30:$Vk,35:70,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{34:[1,71]},{4:73,6:3,9:72,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{20:[1,74]},{16:[1,75],26:37},{16:$Vj,30:$Vk,35:76,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$V1,29:78,33:77,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{16:$Vj,30:$Vk,35:79,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{20:$Vx,30:[1,80],48:$Vy,77:$Vz},o($Vs,[2,62]),o($Vs,[2,57],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($VO,[2,94],{71:$VP}),{16:$Vj,30:$Vk,35:98,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($VO,[2,96]),{16:$Vp,29:99,88:[1,100],91:$Vf},o($VO,$VQ,{30:$VR,71:$VS}),{16:$Vj,30:$Vk,35:103,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($VT,[2,107]),o($VT,[2,110]),o($VT,[2,111],{84:[1,104]}),o($VT,[2,112]),{16:[1,105],26:106},o($Vt,$Vq,{22:$Vr,84:$VU}),{16:$Vj,30:$Vk,35:108,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:109,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($Vs,[2,65]),o($Vs,[2,66]),{16:$Vj,30:$Vk,35:110,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:111,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:112,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:113,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,70:45,72:114,75:43,79:$Vm,83:115,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,70:45,75:118,79:$Vm,85:117,86:$VV,87:$VW,89:$Vo},{16:$Vp,29:121,88:$Ve,90:120,91:$Vf},{22:[1,122]},{17:[1,123]},{17:[1,124],27:[1,125],28:[1,126]},{17:[1,127]},{24:[1,128]},{24:[2,135],77:[1,129]},{16:$Vp,29:130,88:$Ve,91:$Vf},{16:$Vp,29:131,88:$Ve,91:$Vf},{22:$VA,24:$VB,32:[1,132],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{30:[1,133]},{18:[1,134]},o([18,45],[2,5]),o($VX,[2,145]),o($Vs,$Vx,{48:$Vy,77:$Vz}),{22:$VA,24:$VB,32:[1,135],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{20:[1,136]},{16:[1,137],26:37},{22:$VA,24:$VB,32:[1,138],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{16:$Vp,29:141,31:139,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{16:$Vj,17:[1,143],30:$Vk,35:144,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$V_,26:145},{16:$Vj,30:$Vk,35:147,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:148,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:149,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:150,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:151,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:152,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,22:[1,154],30:$Vk,35:153,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:155,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,24:[1,157],30:$Vk,35:156,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:158,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:159,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:160,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:161,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,35:162,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,70:45,72:163,75:43,79:$Vm,83:115,87:$Vn,89:$Vo},o($VO,[2,95]),{17:[1,164],30:[1,165]},o([17,30],$Vu,{22:$V$}),{16:$Vj,30:$Vk,70:45,72:167,75:43,79:$Vm,83:115,87:$Vn,89:$Vo},{16:$Vj,30:$Vk,32:[1,168],35:172,64:$Vl,69:169,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo,93:$V01,95:170},{22:$VA,24:$VB,32:[1,173],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{16:$Vj,30:$Vk,70:45,75:118,79:$Vm,85:117,87:$VW,89:$Vo},o($Vs,$Vx,{48:[1,174],77:$Vz}),o($Vs,[2,59]),{86:$VV},o($Vs,[2,63],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vs,[2,64],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vs,[2,67],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vs,[2,68],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vs,[2,69],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vs,[2,70],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vs,[2,71]),{71:$VP},o($Vt,[2,113]),{86:[1,175]},{30:$VR,77:[1,176],86:[2,127]},{88:[1,177]},{24:[1,178]},{24:[2,133],77:[1,179]},{16:$Vj,30:$Vk,35:181,64:$Vl,70:45,72:41,75:180,79:$Vm,83:39,87:$Vn,89:$Vo},{7:182,8:183,10:184,11:185,12:$V11,13:$V21,16:$Vp,29:187,49:$V31,88:$Ve,91:$Vf},{7:190,8:183,10:184,11:185,12:$V11,13:$V21,16:$Vp,29:187,49:$V31,88:$Ve,91:$Vf},{12:[1,191]},{16:[1,192]},{16:$V_,26:193},{16:[1,195],29:194,88:$Ve,91:$Vf},{19:$Vv,23:196,96:67,97:$Vw},o($V41,[2,136]),o($V41,[2,137]),{16:$V1,17:$Vi,29:32,33:31,36:197,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{16:$Vj,30:$Vk,35:198,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($VX,[2,144]),{17:[1,199]},{16:$Vj,30:$Vk,35:200,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{20:$Vx,27:[1,201],48:$Vy,77:$Vz},{16:$V1,17:$Vi,29:32,33:31,36:202,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{32:[1,203]},{32:[2,124],77:[1,204]},{16:[1,207],93:[1,205],94:[1,206]},{16:$Vp,29:208,88:$Ve,91:$Vf},{16:$Vj,30:$Vk,35:172,64:$Vl,69:209,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo,93:$V01,95:170},o($Vs,[2,61],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($V51,[2,140]),o($V51,$Vx,{77:$Vz}),{22:$VA,24:$VB,27:[1,210],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},o($V61,[2,79],{22:$VA,24:$VB,58:$VC,59:$VD,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,81:$VM,82:$VN}),o($V61,[2,80],{22:$VA,24:$VB,58:$VC,59:$VD,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,81:$VM,82:$VN}),o($V71,[2,81],{22:$VA,24:$VB,63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),o($V71,[2,82],{22:$VA,24:$VB,63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),o($V71,[2,83],{22:$VA,24:$VB,63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),o($V81,[2,84],{63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),{16:$Vj,30:$Vk,35:211,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($V71,[2,85],{22:$VA,24:$VB,63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),o($V81,[2,86],{63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),{16:$Vj,30:$Vk,35:212,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($V91,[2,89],{65:$VJ,66:$VK,82:$VN}),o($V91,[2,90],{65:$VJ,66:$VK,82:$VN}),o($VO,[2,91]),o($VO,[2,92]),o($VO,[2,93]),o($VO,[2,97]),{16:$Vj,18:[1,213],30:$Vk,35:172,64:$Vl,69:214,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo,93:$V01,95:170},{16:$Vj,30:$Vk,32:[1,215],35:172,64:$Vl,69:216,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo,93:$V01,95:170},{16:$Vp,29:217,88:$Ve,91:$Vf},o($VO,[2,98]),o($VT,[2,108]),{32:[1,218]},o($Va1,[2,129],{77:[1,219]}),{16:$Vj,30:$Vk,35:220,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($Vb1,[2,131],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($VT,[2,105]),{16:$Vj,30:$Vk,35:221,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o([18,20,22,24,27,30,32,48,58,59,60,61,62,63,64,65,66,71,77,80,81,82,86],[2,100]),{16:$Vj,30:$Vk,70:45,75:118,79:$Vm,85:222,87:$VW,89:$Vo},{22:$V$},o($Vt,[2,114]),{16:$Vp,29:121,88:$Ve,90:223,91:$Vf},o($Vc1,$VQ,{20:$Vd1,32:$Vd1,30:$VR,71:$VS}),{22:[1,224],24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{18:[1,225]},{18:[2,4]},{8:226,10:184,11:185,12:$V11,13:$V21,16:$Vp,18:[2,7],29:187,49:$V31,88:$Ve,91:$Vf},{16:$Vp,29:227,49:[1,228],88:$Ve,91:$Vf},{16:$Vp,29:229,88:$Ve,91:$Vf},{16:[1,230],50:[1,231]},o($Ve1,[2,8]),o($Ve1,[2,9]),{18:[1,232]},{16:[1,233]},{17:[1,234]},{18:[1,235]},{16:[1,236]},{16:$Vq,17:[1,237],22:$Vr,84:$VU},{24:[2,134]},o($Vh,[2,19]),{22:$VA,24:$VB,32:[1,238],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{39:239,43:241,44:$Vf1,46:240},{20:[1,243],22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{16:[1,244]},o($Vh,[2,25],{42:245,98:$Vg1}),{17:[1,247]},{16:$Vp,29:141,31:248,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{16:[1,249]},{16:[1,250]},o($Vh1,[2,121],{48:[1,251]}),{16:[1,252]},{18:[1,253]},{16:$Vj,30:$Vk,35:254,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($V81,[2,88],{63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),o($V81,[2,87],{63:$VH,64:$VI,65:$VJ,66:$VK,82:$VN}),o($Vi1,[2,101]),{18:[1,255]},o($Vi1,[2,103]),{32:[1,256]},{77:[1,257]},o($VT,[2,109]),{16:$Vj,30:$Vk,35:172,64:$Vl,69:258,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo,93:$V01,95:170},o($Vb1,[2,130],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vs,[2,58],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),{86:[2,126]},{24:[2,132]},{16:$Vj,22:[1,259],30:$Vk,35:153,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($Vh,[2,10]),{18:[2,6]},{16:[1,260]},{16:$Vp,29:261,88:$Ve,91:$Vf},{16:[1,262]},{30:[1,263]},{22:[1,273],24:[1,274],51:264,52:[1,265],53:[1,266],54:[1,267],55:[1,268],56:[1,269],57:[1,270],58:[1,271],59:[1,272],60:[1,275],61:[1,276],62:[1,277],63:[1,278],64:[1,279],65:[1,280],66:[1,281]},{20:[1,282]},{17:[1,283]},{7:284,8:183,10:184,11:185,12:$V11,13:$V21,16:$Vp,29:187,49:$V31,88:$Ve,91:$Vf},o($Vh,[2,13]),{30:[1,285]},{7:286,8:183,10:184,11:185,12:$V11,13:$V21,16:$Vp,29:187,49:$V31,88:$Ve,91:$Vf},{20:[1,287]},{18:[1,288]},{18:[2,31],47:[1,289]},o($Vj1,[2,29],{43:241,46:290,44:$Vf1}),{16:$Vj,30:$Vk,35:291,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$V1,29:32,33:292,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{32:[1,293]},o($Vh,[2,24]),{16:$V1,17:$Vi,29:32,33:31,36:295,41:[1,294],67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{4:73,6:3,9:296,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{32:[2,123]},o($Vh1,[2,118]),o($Vh1,[2,119]),{16:$Vj,30:$Vk,35:297,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($Vh1,[2,122]),o($Vs,[2,60]),o([18,20,27,32,77],[2,78],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),o($Vi1,[2,102]),o($Vi1,[2,104]),{16:$Vp,29:298,88:$Ve,91:$Vf},o($Va1,[2,128]),{16:$Vj,30:$Vk,35:211,64:$Vl,70:45,72:41,75:299,79:$Vm,83:39,87:$Vn,89:$Vo},{20:[1,301],30:[1,302],48:[1,300]},{16:[1,303]},{30:[1,304]},{16:$Vp,29:141,31:305,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{30:[1,306]},{30:[2,40]},{30:[2,41]},{30:[2,42]},{30:[2,43]},{30:[2,44]},{30:[2,45]},{30:[2,46]},{30:[2,47]},{30:[2,48]},{30:[2,49]},{30:[2,50]},{30:[2,51]},{30:[2,52]},{30:[2,53]},{30:[2,54]},{30:[2,55]},{30:[2,56]},o($Vh,[2,11]),{7:307,8:183,10:184,11:185,12:$V11,13:$V21,16:$Vp,29:187,49:$V31,88:$Ve,91:$Vf},{18:[1,308]},{16:$Vp,29:141,31:309,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{18:[1,310]},o($Vh,[2,20]),o($Vh,[2,21]),{27:[1,311]},o($Vj1,[2,28]),{22:$VA,24:$VB,27:[1,312],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{32:[1,313]},{16:$V1,17:$Vi,29:32,33:31,36:314,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{30:[1,315]},o($Vh,[2,139]),{18:[1,316]},o($Vh1,[2,120],{22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN}),{24:[1,317]},o($Vc1,$VQ,{20:$Vk1,32:$Vk1,30:$VR,71:$VS}),{16:$Vj,30:$Vk,35:318,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($Vl1,[2,33]),{16:$Vp,29:141,31:319,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{30:[1,321],48:[1,320]},{16:$Vp,29:141,31:322,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{32:[1,323]},{16:$Vp,29:141,31:324,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{18:[1,325]},o($Vh,[2,15]),{32:[1,326]},o($Vh,[2,12]),{4:73,6:3,9:327,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{4:73,6:3,9:328,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{16:$V1,17:$Vi,29:32,33:31,36:329,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},o($Vh,[2,23]),{16:$Vj,30:$Vk,35:330,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($Vh,[2,26]),{17:[1,331]},{20:[1,332],22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{32:[1,333]},{16:$Vj,30:$Vk,35:334,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},{16:$Vp,29:141,31:335,32:$VY,68:$VZ,88:$Ve,91:$Vf,92:140},{32:[1,336]},{17:[1,337]},{32:[1,338]},o($Vh,[2,14]),{17:[1,339]},{18:[2,30]},{45:[1,340]},o($Vh,[2,22]),{22:$VA,24:$VB,32:[1,341],58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{17:$Vm1,76:342,78:343},o($Vl1,[2,32]),{20:[1,345]},{20:[1,346],22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},{32:[1,347]},{17:[1,348]},{4:73,6:3,9:349,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{17:[1,350]},{4:73,6:3,9:351,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{20:[1,352]},{16:$V1,17:$Vi,29:32,33:31,36:353,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{18:[1,354],77:[1,355]},o($Vn1,[2,76]),{79:[1,356]},o($Vl1,[2,36]),o($Vl1,[2,34]),{20:[1,357]},{4:73,6:3,9:358,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{18:[1,359]},{4:73,6:3,9:360,14:6,15:$V0,16:$V1,19:$V2,21:$V3,25:$V4,29:12,33:5,34:$V5,37:$V6,38:$V7,40:$V8,41:$V9,67:$Va,68:$Vb,70:15,73:$Vc,74:$Vd,88:$Ve,91:$Vf},{18:[1,361]},o([18,44,47],[2,27]),{42:362,98:$Vg1},o($VT,[2,106]),{17:$Vm1,78:363},{77:[1,364]},o($Vl1,[2,35]),{18:[1,365]},o($Vl1,[2,38]),{18:[1,366]},o($Vh,[2,16]),o($Vh,[2,138]),o($Vn1,[2,75]),{16:$Vj,30:$Vk,35:367,64:$Vl,70:45,72:41,75:43,79:$Vm,83:39,87:$Vn,89:$Vo},o($Vl1,[2,37]),o($Vl1,[2,39]),{18:[1,368],22:$VA,24:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,80:$VL,81:$VM,82:$VN},o($Vn1,[2,77])],
defaultActions: {24:[2,1],183:[2,4],196:[2,134],222:[2,126],223:[2,132],226:[2,6],248:[2,123],265:[2,40],266:[2,41],267:[2,42],268:[2,43],269:[2,44],270:[2,45],271:[2,46],272:[2,47],273:[2,48],274:[2,49],275:[2,50],276:[2,51],277:[2,52],278:[2,53],279:[2,54],280:[2,55],281:[2,56],327:[2,30]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 89
break;
case 2:return 79
break;
case 3:return "typename"
break;
case 4:return "template"
break;
case 5:return "class"
break;
case 6:return "cout"
break;
case 7:return "switch"
break;
case 8:return 44
break;
case 9:return "break"
break;
case 10:return 47
break;
case 11:return "public"
break;
case 12:return "extends"
break;
case 13:return "operator"
break;
case 14:return "implements"
break;
case 15:return "Dictionary"
break;
case 16:return "private"
break;
case 17:return "static"
break;
case 18:return "if"
break;
case 19:return 37
break;
case 20:return "in"
break;
case 21:return "else"
break;
case 22:return "return"
break;
case 23:return "while"
break;
case 24:return "foreach"
break;
case 25:return "const"
break;
case 26:return "for"
break;
case 27:return "new"
break;
case 28:return 77
break;
case 29:return 20
break;
case 30:return 71
break;
case 31:return 27
break;
case 32:return 81
break;
case 33:return '!'
break;
case 34:return 60
break;
case 35:return 93
break;
case 36:return 61
break;
case 37:return '>>'
break;
case 38:return 59
break;
case 39:return 24
break;
case 40:return 58
break;
case 41:return 22
break;
case 42:return 62
break;
case 43:return 48
break;
case 44:return 54
break;
case 45:return 65
break;
case 46:return 55
break;
case 47:return 66
break;
case 48:return 82
break;
case 49:return 53
break;
case 50:return 57
break;
case 51:return 64
break;
case 52:return 56
break;
case 53:return 52
break;
case 54:return 63
break;
case 55:return '^'
break;
case 56:return 80
break;
case 57:return 17
break;
case 58:return 18
break;
case 59:return 84
break;
case 60:return 86
break;
case 61:return 30
break;
case 62:return 32
break;
case 63:return 16
break;
case 64:return 5
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:typename\b)/,/^(?:template\b)/,/^(?:class\b)/,/^(?:cout\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:operator\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:do\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:foreach\b)/,/^(?:const\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cpp_parser;
exports.Parser = cpp_parser.Parser;
exports.parse = function () { return cpp_parser.parse.apply(cpp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}