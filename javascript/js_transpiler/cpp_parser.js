/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cpp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,15],$V3=[1,14],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,11],$V9=[1,12],$Va=[1,18],$Vb=[1,17],$Vc=[5,18],$Vd=[5,12,13,15,16,18,27,32,33,36,60,61,79,82],$Ve=[1,39],$Vf=[1,36],$Vg=[1,32],$Vh=[1,40],$Vi=[1,34],$Vj=[1,38],$Vk=[1,42],$Vl=[2,104],$Vm=[1,53],$Vn=[16,17,28,41,52,67,84,85],$Vo=[2,103],$Vp=[15,16,20,21,22,40,79,82],$Vq=[2,123],$Vr=[1,65],$Vs=[1,66],$Vt=[19,30],$Vu=[1,72],$Vv=[1,74],$Vw=[1,73],$Vx=[1,75],$Vy=[1,69],$Vz=[1,68],$VA=[1,70],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,67],$VG=[1,71],$VH=[1,80],$VI=[18,19,24,30,49,50,51,52,53,54,55,56,57,58,59,67,70,71,72],$VJ=[1,81],$VK=[1,86],$VL=[18,19,24,28,30,49,50,51,52,53,54,55,56,57,58,59,64,67,70,71,72,77],$VM=[1,100],$VN=[1,103],$VO=[2,111],$VP=[1,122],$VQ=[1,140],$VR=[1,145],$VS=[1,158],$VT=[1,166],$VU=[18,19,30],$VV=[18,19,24,30,53,54,67,70],$VW=[18,19,24,30,49,50,51,52,53,54,55,67,70,71],$VX=[18,19,24,30,49,50,51,52,53,54,55,56,57,67,70,71],$VY=[18,30],$VZ=[18,30,67],$V_=[1,207],$V$=[30,67],$V01=[18,19,24,30,49,50,51,52,53,54,55,56,57,58,59,64,67,70,71,72],$V11=[5,12,13,15,16,18,27,32,33,36,60,61,79,82,87],$V21=[12,13,16,18,40,79,82],$V31=[1,295],$V41=[18,67];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,";":19,"abstract":20,"interface":21,"enum":22,"identifiers":23,":":24,"implements":25,"statement_with_semicolon":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"for":32,"foreach":33,"type":34,"in":35,"if":36,"elif":37,"parameters":38,"=":39,"static":40,"operator":41,"OPERATOR":42,"+=":43,"-=":44,"*=":45,"/=":46,"++":47,"--":48,"<=":49,">=":50,"<":51,">":52,"&&":53,"||":54,"==":55,"+":56,"-":57,"*":58,"/":59,"return":60,"const":61,"exprs":62,"access_array":63,".":64,"dot_expr":65,"key_values":66,",":67,"key_value":68,"STRING_LITERAL":69,"?":70,"!=":71,"%":72,"initializer_list":73,"parentheses_expr":74,"[":75,"access_arr":76,"]":77,"new":78,"Dictionary":79,"NUMBER":80,"types":81,"Object":82,"parameter":83,"&":84,"...":85,"expr":86,"else":87,"add":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:";",20:"abstract",21:"interface",22:"enum",24:":",25:"implements",27:"while",28:"(",30:")",32:"for",33:"foreach",35:"in",36:"if",39:"=",40:"static",41:"operator",43:"+=",44:"-=",45:"*=",46:"/=",47:"++",48:"--",49:"<=",50:">=",51:"<",52:">",53:"&&",54:"||",55:"==",56:"+",57:"-",58:"*",59:"/",60:"return",61:"const",64:".",67:",",69:"STRING_LITERAL",70:"?",71:"!=",72:"%",75:"[",77:"]",78:"new",79:"Dictionary",80:"NUMBER",82:"Object",84:"&",85:"...",87:"else"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,9],[14,8],[6,2],[6,1],[6,5],[6,9],[6,8],[6,6],[6,5],[6,8],[10,6],[10,4],[10,7],[10,8],[10,7],[10,9],[10,8],[10,9],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[66,3],[66,1],[68,5],[29,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[65,3],[65,3],[65,1],[63,4],[73,4],[73,5],[73,4],[73,5],[74,3],[74,10],[74,1],[74,3],[74,4],[74,1],[74,1],[74,1],[34,3],[34,4],[34,1],[34,1],[34,1],[83,3],[83,3],[83,4],[83,2],[38,3],[38,1],[38,0],[76,3],[76,1],[62,3],[62,1],[86,2],[86,1],[81,3],[81,1],[37,9],[37,4],[23,3],[23,1],[88,3],[88,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 86: case 110: case 113:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = [$$[$0-5],"public",$$[$0-4],$$[$0-2]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 127:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 22:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 25:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 26:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 28:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 29:
this.$ = ["static_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 30:
this.$ = ["instance_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 31:
this.$ = ["instance_overload_operator","public",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 49:
this.$ = ["return",$$[$0]];
break;
case 50:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 51:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 52:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 53:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 54:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 55: case 56:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 57: case 58:
this.$ = [$$[$0],$$[$0-1]];
break;
case 59: case 60: case 61: case 62: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 63:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 64:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 65: case 115: case 117: case 119: case 123: case 125:
this.$ = [$$[$0]];
break;
case 66: case 101:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 67:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 82:
this.$ = ["-",$$[$0]];
break;
case 83:
this.$ = [".", $$[$0]];
break;
case 84: case 85: case 109: case 112: case 114: case 118: case 122: case 124:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 87:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 88:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 89:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 90:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 91:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 92: case 126:
this.$= $$[$0-1];
break;
case 93:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 95:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 96:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 97: case 98: case 99:
this.$ = yytext;
break;
case 100:
this.$ = [$$[$0-2],"[]"];
break;
case 105:
this.$ = ["ref_parameter",$$[$0-2],$$[$0]]
break;
case 106:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 107:
this.$ = ["optional_arg",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 108:
this.$ = [$$[$0-1],$$[$0]];
break;
case 111:
this.$= []
break;
case 116:
this.$ = ["function_call_ref",$$[$0]];
break;
case 120:
this.$ = ["elif",$$[$0-5],$$[$0-2],$$[$0]]
break;
case 121:
this.$ = ["else",$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{1:[3]},{5:[1,21]},o($Vc,[2,3],{6:3,26:4,14:5,34:10,63:13,11:16,4:22,12:$V0,13:$V1,15:$V2,16:$V3,27:$V4,32:$V5,33:$V6,36:$V7,60:$V8,61:$V9,79:$Va,82:$Vb}),{19:[1,23]},o($Vd,[2,17]),{28:[1,24]},{28:[1,25]},{28:[1,26]},{28:[1,27]},{16:[1,28],23:29},{16:$Ve,28:$Vf,29:30,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Vk,34:41,79:$Va,82:$Vb},{39:[1,43]},{16:$Vl,39:[1,44],43:[1,47],44:[1,48],45:[1,49],46:[1,50],47:[1,45],48:[1,46],51:$Vm,64:[1,51],75:[1,52]},{16:[1,54]},{15:[1,58],20:[1,55],21:[1,56],22:[1,57]},o($Vn,[2,102]),o([16,41,52,67,84,85],$Vo),o($Vp,[2,8]),o($Vp,[2,9]),{1:[2,1]},o($Vc,[2,2]),o($Vd,[2,16]),{16:$Ve,28:$Vf,29:59,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$V3,26:60,34:61,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{16:$Vk,34:62,79:$Va,82:$Vb},{16:$Ve,28:$Vf,29:63,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{19:$Vq,28:[1,64],39:$Vr,67:$Vs},o($Vt,[2,54]),o($Vt,[2,49],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($VI,[2,81],{64:$VJ}),{16:$Ve,28:$Vf,29:82,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($VI,[2,83]),{16:$Vk,34:83,79:[1,84],82:$Vb},o($VI,[2,86],{28:$VK,64:[1,85]}),{16:$Ve,28:$Vf,29:87,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($VL,[2,94]),o($VL,[2,97]),o($VL,[2,98],{75:[1,88]}),o($VL,[2,99]),{16:[1,89],23:90},o($Vn,$Vl,{51:$Vm,75:[1,91]}),{16:$Ve,28:$Vf,29:92,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:93,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($Vt,[2,57]),o($Vt,[2,58]),{16:$Ve,28:$Vf,29:94,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:95,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:96,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:97,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,63:37,65:98,69:$Vh,73:99,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,63:37,69:$Vh,74:102,76:101,77:$VM,78:$VN,80:$Vj},{16:$Vk,34:105,79:$Va,81:104,82:$Vb},{17:[1,106]},{15:[1,107]},{16:[1,108]},{16:[1,109]},{16:[1,110]},{30:[1,111],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},{19:[1,112]},{16:[1,113],23:29},{16:[1,114]},{30:[1,115],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},{16:$Vk,30:$VO,34:118,38:116,79:$Va,82:$Vb,83:117},{16:$Ve,17:[1,119],28:$Vf,29:120,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$VP,23:121},{16:$Ve,28:$Vf,29:123,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:124,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:125,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:126,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:127,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:128,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:129,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:130,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:131,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:132,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:133,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:134,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:135,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:136,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,63:37,65:137,69:$Vh,73:99,74:35,78:$Vi,80:$Vj},o($VI,[2,82]),{17:[1,138],28:[1,139]},o([17,28],$Vo,{51:$VQ}),{16:$Ve,28:$Vf,63:37,65:141,69:$Vh,73:99,74:35,78:$Vi,80:$Vj},{16:$Ve,28:$Vf,29:146,30:[1,142],57:$Vg,62:143,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj,84:$VR,86:144},{30:[1,147],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},{16:$Ve,28:$Vf,63:37,69:$Vh,74:102,76:101,78:$VN,80:$Vj},o($Vt,$Vq,{39:[1,148],67:$Vs}),o($Vt,[2,51]),{77:$VM},o($Vt,[2,55],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($Vt,[2,56],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($Vt,[2,59],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($Vt,[2,60],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($Vt,[2,61],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($Vt,[2,62],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($Vt,[2,63]),{64:$VJ},o($Vn,[2,100]),{77:[1,149]},{28:$VK,67:[1,150],77:[2,113]},{79:[1,151]},{52:[1,152]},{52:[2,119],67:[1,153]},{7:154,8:155,10:156,11:157,12:$V0,13:$V1,16:$Vk,34:159,40:$VS,79:$Va,82:$Vb},{16:[1,160]},{17:[1,161]},{17:[1,162]},{24:[1,163],25:[1,164]},{16:$V3,17:$VT,26:167,31:165,34:61,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{16:$Ve,28:$Vf,29:168,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($Vt,$Vq,{39:$Vr,67:$Vs}),{35:[1,169]},{16:$V3,17:$VT,26:167,31:170,34:61,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{30:[1,171]},{30:[2,110],67:[1,172]},{16:[1,175],84:[1,173],85:[1,174]},{16:$Ve,28:$Vf,29:146,57:$Vg,62:176,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj,84:$VR,86:144},o($Vt,[2,53],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($VU,[2,122]),o($VU,$Vq,{67:$Vs}),{24:[1,177],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},o($VV,[2,68],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,71:$VG,72:$VH}),o($VV,[2,69],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,71:$VG,72:$VH}),o($VW,[2,70],{56:$VB,57:$VC,58:$VD,59:$VE,72:$VH}),o($VW,[2,71],{56:$VB,57:$VC,58:$VD,59:$VE,72:$VH}),o($VW,[2,72],{56:$VB,57:$VC,58:$VD,59:$VE,72:$VH}),o($VW,[2,73],{56:$VB,57:$VC,58:$VD,59:$VE,72:$VH}),o($VW,[2,74],{56:$VB,57:$VC,58:$VD,59:$VE,72:$VH}),o($VW,[2,75],{56:$VB,57:$VC,58:$VD,59:$VE,72:$VH}),o($VX,[2,76],{58:$VD,59:$VE,72:$VH}),o($VX,[2,77],{58:$VD,59:$VE,72:$VH}),o($VI,[2,78]),o($VI,[2,79]),o($VI,[2,80]),o($VI,[2,84]),{16:$Ve,18:[1,178],28:$Vf,29:146,57:$Vg,62:179,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj,84:$VR,86:144},{16:$Ve,28:$Vf,29:146,30:[1,180],57:$Vg,62:181,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj,84:$VR,86:144},{16:$Vk,34:182,79:$Va,82:$Vb},o($VI,[2,85]),o($VL,[2,95]),{30:[1,183]},o($VY,[2,115],{67:[1,184]}),{16:$Ve,28:$Vf,29:185,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($VZ,[2,117],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($VL,[2,92]),{16:$Ve,28:$Vf,29:186,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o([18,19,24,28,30,39,49,50,51,52,53,54,55,56,57,58,59,64,67,70,71,72,77],[2,87]),{16:$Ve,28:$Vf,63:37,69:$Vh,74:102,76:187,78:$VN,80:$Vj},{51:$VQ},o($Vn,[2,101]),{16:$Vk,34:105,79:$Va,81:188,82:$Vb},{18:[1,189]},{18:[2,4]},{8:190,10:156,11:157,12:$V0,13:$V1,16:$Vk,18:[2,7],34:159,40:$VS,79:$Va,82:$Vb},{16:$Vk,34:191,40:[1,192],79:$Va,82:$Vb},{16:$Vk,34:193,79:$Va,82:$Vb},{16:[1,194],41:[1,195]},{17:[1,196]},{7:197,8:155,10:156,11:157,12:$V0,13:$V1,16:$Vk,34:159,40:$VS,79:$Va,82:$Vb},{16:$VP,23:198},{12:[1,199]},{16:[1,200]},o($Vd,[2,18]),{4:202,6:3,9:201,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{19:[1,203]},{19:[1,204],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},{16:[1,205]},o($Vd,[2,22],{37:206,87:$V_}),{17:[1,208]},{16:$Vk,30:$VO,34:118,38:209,79:$Va,82:$Vb,83:117},{16:[1,210]},{16:[1,211]},o($V$,[2,108],{39:[1,212]}),{18:[1,213]},{16:$Ve,28:$Vf,29:214,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($V01,[2,88]),{18:[1,215]},o($V01,[2,90]),{30:[1,216]},{67:[1,217]},o($VL,[2,96]),{16:$Ve,28:$Vf,29:146,57:$Vg,62:218,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj,84:$VR,86:144},o($VZ,[2,116],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($Vt,[2,50],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),{77:[2,112]},{52:[2,118]},{19:[1,219]},{18:[2,6]},{16:[1,220]},{16:$Vk,34:221,79:$Va,82:$Vb},{16:[1,222]},{28:[1,223]},{42:224,43:[1,225],44:[1,226],45:[1,227],46:[1,228],47:[1,229],48:[1,230],49:[1,231],50:[1,232],51:[1,233],52:[1,234],53:[1,235],54:[1,236],55:[1,237],56:[1,238],57:[1,239],58:[1,240],59:[1,241]},{7:242,8:155,10:156,11:157,12:$V0,13:$V1,16:$Vk,34:159,40:$VS,79:$Va,82:$Vb},{18:[1,243]},{18:[1,244]},{16:[1,245]},{17:[1,246]},{18:[1,247]},{18:[2,5]},o($V11,[2,127]),{16:$V3,26:248,34:61,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{30:[1,249]},o($Vd,[2,21]),{17:[1,251],36:[1,250]},{4:202,6:3,9:252,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{30:[2,109]},o($V$,[2,105]),o($V$,[2,106]),{16:$Ve,28:$Vf,29:253,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($Vt,[2,52]),o([18,19,24,30,67],[2,67],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),o($V01,[2,89]),o($V01,[2,91]),{16:$Vk,34:254,79:$Va,82:$Vb},o($VY,[2,114]),o($Vd,[2,10]),{19:[1,256],28:[1,257],39:[1,255]},{16:[1,258]},{28:[1,259]},{16:$Vk,30:$VO,34:118,38:260,79:$Va,82:$Vb,83:117},{28:[1,261]},{28:[2,32]},{28:[2,33]},{28:[2,34]},{28:[2,35]},{28:[2,36]},{28:[2,37]},{28:[2,38]},{28:[2,39]},{28:[2,40]},{28:[2,41]},{28:[2,42]},{28:[2,43]},{28:[2,44]},{28:[2,45]},{28:[2,46]},{28:[2,47]},{28:[2,48]},{18:[1,262]},o($Vd,[2,12]),o($Vd,[2,13]),{17:[1,263]},{7:264,8:155,10:156,11:157,12:$V0,13:$V1,16:$Vk,34:159,40:$VS,79:$Va,82:$Vb},o($V11,[2,126]),{30:[1,265]},{16:$V3,17:$VT,26:167,31:266,34:61,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{28:[1,267]},{4:202,6:3,9:268,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{18:[1,269]},o($V$,[2,107],{49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH}),{52:[1,270]},{16:$Ve,28:$Vf,29:271,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($V21,[2,25]),{16:$Vk,30:$VO,34:118,38:272,79:$Va,82:$Vb,83:117},{28:[1,274],39:[1,273]},{16:$Vk,30:$VO,34:118,38:275,79:$Va,82:$Vb,83:117},{30:[1,276]},{16:$Vk,30:$VO,34:118,38:277,79:$Va,82:$Vb,83:117},o($Vd,[2,11]),{7:278,8:155,10:156,11:157,12:$V0,13:$V1,16:$Vk,34:159,40:$VS,79:$Va,82:$Vb},{18:[1,279]},{16:$V3,17:$VT,26:167,31:280,34:61,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},o($Vd,[2,20]),{16:$Ve,28:$Vf,29:281,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{18:[1,282]},o($Vd,[2,23]),{17:[1,283]},{19:[1,284],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},{30:[1,285]},{16:$Ve,28:$Vf,29:286,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},{16:$Vk,30:$VO,34:118,38:287,79:$Va,82:$Vb,83:117},{30:[1,288]},{17:[1,289]},{30:[1,290]},{18:[1,291]},o($Vd,[2,15]),o($Vd,[2,19]),{30:[1,292],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},o($Vd,[2,121]),{17:$V31,66:293,68:294},o($V21,[2,24]),{19:[1,296]},{19:[1,297],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},{30:[1,298]},{17:[1,299]},{4:202,6:3,9:300,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{17:[1,301]},o($Vd,[2,14]),{17:[1,302]},{18:[1,303],67:[1,304]},o($V41,[2,65]),{69:[1,305]},o($V21,[2,28]),o($V21,[2,26]),{19:[1,306]},{4:202,6:3,9:307,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{18:[1,308]},{4:202,6:3,9:309,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},{4:202,6:3,9:310,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:$V7,60:$V8,61:$V9,63:13,79:$Va,82:$Vb},o($VL,[2,93]),{17:$V31,68:311},{67:[1,312]},o($V21,[2,27]),{18:[1,313]},o($V21,[2,30]),{18:[1,314]},{18:[1,315]},o($V41,[2,64]),{16:$Ve,28:$Vf,29:316,57:$Vg,63:37,65:33,69:$Vh,73:31,74:35,78:$Vi,80:$Vj},o($V21,[2,29]),o($V21,[2,31]),{37:317,87:$V_},{18:[1,318],49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,70:$VF,71:$VG,72:$VH},o($Vd,[2,120]),o($V41,[2,66])],
defaultActions: {21:[2,1],155:[2,4],187:[2,112],188:[2,118],190:[2,6],202:[2,5],209:[2,109],225:[2,32],226:[2,33],227:[2,34],228:[2,35],229:[2,36],230:[2,37],231:[2,38],232:[2,39],233:[2,40],234:[2,41],235:[2,42],236:[2,43],237:[2,44],238:[2,45],239:[2,46],240:[2,47],241:[2,48]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 80
break;
case 2:return 69
break;
case 3:return "class"
break;
case 4:return "public"
break;
case 5:return "extends"
break;
case 6:return "operator"
break;
case 7:return "implements"
break;
case 8:return "Dictionary"
break;
case 9:return "private"
break;
case 10:return "static"
break;
case 11:return "if"
break;
case 12:return "in"
break;
case 13:return "else"
break;
case 14:return "return"
break;
case 15:return "while"
break;
case 16:return "foreach"
break;
case 17:return "const"
break;
case 18:return "for"
break;
case 19:return "new"
break;
case 20:return 67
break;
case 21:return 19
break;
case 22:return 64
break;
case 23:return 24
break;
case 24:return 53
break;
case 25:return 84
break;
case 26:return 54
break;
case 27:return 50
break;
case 28:return 52
break;
case 29:return 49
break;
case 30:return 51
break;
case 31:return 55
break;
case 32:return 39
break;
case 33:return 45
break;
case 34:return 58
break;
case 35:return 46
break;
case 36:return 59
break;
case 37:return 72
break;
case 38:return 44
break;
case 39:return 48
break;
case 40:return 57
break;
case 41:return 47
break;
case 42:return 43
break;
case 43:return 56
break;
case 44:return '^'
break;
case 45:return 70
break;
case 46:return 17
break;
case 47:return 18
break;
case 48:return 75
break;
case 49:return 77
break;
case 50:return 28
break;
case 51:return 30
break;
case 52:return 16
break;
case 53:return 5
break;
case 54:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|\/\/+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:operator\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:foreach\b)/,/^(?:const\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cpp_parser;
exports.Parser = cpp_parser.Parser;
exports.parse = function () { return cpp_parser.parse.apply(cpp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}