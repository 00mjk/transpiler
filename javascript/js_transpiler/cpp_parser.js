/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cpp_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,15],$V3=[1,14],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,11],$V8=[1,12],$V9=[1,19],$Va=[1,18],$Vb=[1,17],$Vc=[5,18],$Vd=[5,12,13,15,16,18,27,32,33,59,60,78,81,86],$Ve=[1,39],$Vf=[1,36],$Vg=[1,32],$Vh=[1,40],$Vi=[1,34],$Vj=[1,38],$Vk=[1,42],$Vl=[2,103],$Vm=[1,53],$Vn=[16,17,28,40,51,66,83],$Vo=[2,102],$Vp=[15,16,20,21,22,39,78,81],$Vq=[2,123],$Vr=[1,65],$Vs=[1,66],$Vt=[19,30],$Vu=[1,72],$Vv=[1,74],$Vw=[1,73],$Vx=[1,75],$Vy=[1,69],$Vz=[1,68],$VA=[1,70],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,67],$VG=[1,71],$VH=[1,80],$VI=[18,19,24,30,48,49,50,51,52,53,54,55,56,57,58,66,69,70,71],$VJ=[1,81],$VK=[1,86],$VL=[18,19,24,28,30,48,49,50,51,52,53,54,55,56,57,58,63,66,69,70,71,76],$VM=[1,100],$VN=[1,103],$VO=[2,109],$VP=[1,122],$VQ=[1,140],$VR=[1,156],$VS=[1,165],$VT=[18,19,30],$VU=[18,19,24,30,52,53,66,69],$VV=[18,19,24,30,48,49,50,51,52,53,54,66,69,70],$VW=[18,19,24,30,48,49,50,51,52,53,54,55,56,66,69,70],$VX=[18,30],$VY=[30,66],$VZ=[18,19,24,30,48,49,50,51,52,53,54,55,56,57,58,63,66,69,70,71],$V_=[1,242],$V$=[5,12,13,15,16,18,27,32,33,59,60,78,81,85,86],$V01=[12,13,16,18,39,78,81],$V11=[1,289],$V21=[18,66];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_statements":7,"class_statements_":8,"statements":9,"class_statement":10,"access_modifier":11,"public":12,"private":13,"class_":14,"class":15,"IDENTIFIER":16,"{":17,"}":18,";":19,"abstract":20,"interface":21,"enum":22,"identifiers":23,":":24,"implements":25,"statement_with_semicolon":26,"while":27,"(":28,"e":29,")":30,"bracket_statements":31,"for":32,"foreach":33,"type":34,"in":35,"if_statement":36,"parameters":37,"=":38,"static":39,"operator":40,"OPERATOR":41,"+=":42,"-=":43,"*=":44,"/=":45,"++":46,"--":47,"<=":48,">=":49,"<":50,">":51,"&&":52,"||":53,"==":54,"+":55,"-":56,"*":57,"/":58,"return":59,"const":60,"exprs":61,"access_array":62,".":63,"dot_expr":64,"key_values":65,",":66,"key_value":67,"STRING_LITERAL":68,"?":69,"!=":70,"%":71,"initializer_list":72,"parentheses_expr":73,"[":74,"access_arr":75,"]":76,"new":77,"Dictionary":78,"NUMBER":79,"types":80,"Object":81,"parameter":82,"...":83,"elif":84,"else":85,"if":86,"else_statement":87,"add":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"public",13:"private",15:"class",16:"IDENTIFIER",17:"{",18:"}",19:";",20:"abstract",21:"interface",22:"enum",24:":",25:"implements",27:"while",28:"(",30:")",32:"for",33:"foreach",35:"in",38:"=",39:"static",40:"operator",42:"+=",43:"-=",44:"*=",45:"/=",46:"++",47:"--",48:"<=",49:">=",50:"<",51:">",52:"&&",53:"||",54:"==",55:"+",56:"-",57:"*",58:"/",59:"return",60:"const",63:".",66:",",68:"STRING_LITERAL",69:"?",70:"!=",71:"%",74:"[",76:"]",77:"new",78:"Dictionary",79:"NUMBER",81:"Object",83:"...",85:"else",86:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[9,1],[8,2],[8,1],[11,1],[11,1],[14,6],[14,7],[14,6],[14,6],[14,9],[14,8],[6,2],[6,1],[6,5],[6,9],[6,8],[6,1],[6,8],[10,6],[10,4],[10,7],[10,8],[10,7],[10,9],[10,8],[10,9],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[26,2],[26,5],[26,3],[26,6],[26,4],[26,2],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[65,3],[65,1],[67,5],[29,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,2],[29,1],[64,3],[64,3],[64,1],[62,4],[72,4],[72,5],[72,4],[72,5],[73,3],[73,10],[73,1],[73,3],[73,4],[73,1],[73,1],[73,1],[34,3],[34,4],[34,1],[34,1],[34,1],[82,3],[82,4],[82,2],[37,3],[37,1],[37,0],[75,3],[75,1],[61,3],[61,1],[80,3],[80,1],[84,7],[84,6],[84,1],[87,2],[36,6],[36,5],[23,3],[23,1],[88,3],[88,1],[31,3],[31,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 6:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 7: case 85: case 108: case 111:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["class_statements",$$[$0]]
break;
case 5:
this.$ = ["statements",$$[$0]]
break;
case 10:
this.$ = [$$[$0-5],"public",$$[$0-4],$$[$0-2]];
break;
case 11:
this.$ = ["abstract_class",$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 12:
this.$ = [$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 13:
this.$ = ["enum",$$[$0-4],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 14:
this.$ = ["class_extends",$$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]];
break;
case 15:
this.$ = ["class_implements",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 16: case 127:
this.$ = ["semicolon",$$[$0-1]];
break;
case 18:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ["for",$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ["foreach",$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["function","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 23:
this.$ = ["initialize_instance_var_with_value",$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 24:
this.$ = ["initialize_instance_var",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 25:
this.$ = ["initialize_static_instance_var",$$[$0-6],$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 26:
this.$ = ["interface_static_method",$$[$0-7],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 27:
this.$ = ["interface_instance_method",$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-2]];
break;
case 28:
this.$ = ["static_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 29:
this.$ = ["instance_method","public",$$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 30:
this.$ = ["instance_overload_operator","public",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 48:
this.$ = ["return",$$[$0]];
break;
case 49:
this.$ = ["initialize_constant",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 50:
this.$ = ["initialize_empty_constants",$$[$0-1],$$[$0]];
break;
case 51:
this.$ = ["initialize_var",$$[$0-5],$$[$0-4],["initializer_list",$$[$0-5],$$[$0-1]]]
break;
case 52:
this.$ = ["initialize_var",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 53:
this.$ = ["initialize_empty_vars",$$[$0-1],$$[$0]];
break;
case 54: case 55:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 56: case 57:
this.$ = [$$[$0],$$[$0-1]];
break;
case 58: case 59: case 60: case 61: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 62:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 63:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 64: case 113: case 115: case 123: case 125:
this.$ = [$$[$0]];
break;
case 65: case 100:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 66:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 81:
this.$ = ["-",$$[$0]];
break;
case 82:
this.$ = [".", $$[$0]];
break;
case 83: case 84: case 107: case 110: case 112: case 114: case 122: case 124:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 86:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 87:
this.$ = ["initializer_list",$$[$0-2],[]];
break;
case 88:
this.$ = ["initializer_list",$$[$0-3],$$[$0-1]];
break;
case 89:
this.$ = [$$[$0-3],$$[$0-2],[]];
break;
case 90:
this.$ = [$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 91: case 126:
this.$= $$[$0-1];
break;
case 92:
this.$ = ["associative_array",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 94:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 95:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 96: case 97: case 98:
this.$ = yytext;
break;
case 99:
this.$ = [$$[$0-2],"[]"];
break;
case 104:
this.$ = ["varargs",$$[$0-2],$$[$0]]
break;
case 105:
this.$ = ["optional_arg",$$[$0-3],$$[$0-2],$$[$0]];
break;
case 106:
this.$ = [$$[$0-1],$$[$0]];
break;
case 109:
this.$= []
break;
case 116:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 117:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 119:
this.$ = ["else",$$[$0]];
break;
case 120:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 121:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:9,59:$V7,60:$V8,62:13,78:$V9,81:$Va,86:$Vb},{1:[3]},{5:[1,22]},o($Vc,[2,3],{6:3,26:4,14:5,36:9,34:10,62:13,11:16,4:23,12:$V0,13:$V1,15:$V2,16:$V3,27:$V4,32:$V5,33:$V6,59:$V7,60:$V8,78:$V9,81:$Va,86:$Vb}),{19:[1,24]},o($Vd,[2,17]),{28:[1,25]},{28:[1,26]},{28:[1,27]},o($Vd,[2,21]),{16:[1,28],23:29},{16:$Ve,28:$Vf,29:30,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Vk,34:41,78:$V9,81:$Va},{38:[1,43]},{16:$Vl,38:[1,44],42:[1,47],43:[1,48],44:[1,49],45:[1,50],46:[1,45],47:[1,46],50:$Vm,63:[1,51],74:[1,52]},{16:[1,54]},{15:[1,58],20:[1,55],21:[1,56],22:[1,57]},{28:[1,59]},o($Vn,[2,101]),o([16,40,51,66,83],$Vo),o($Vp,[2,8]),o($Vp,[2,9]),{1:[2,1]},o($Vc,[2,2]),o($Vd,[2,16]),{16:$Ve,28:$Vf,29:60,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$V3,26:61,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va},{16:$Vk,34:63,78:$V9,81:$Va},{19:$Vq,28:[1,64],38:$Vr,66:$Vs},o($Vt,[2,53]),o($Vt,[2,48],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($VI,[2,80],{63:$VJ}),{16:$Ve,28:$Vf,29:82,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($VI,[2,82]),{16:$Vk,34:83,78:[1,84],81:$Va},o($VI,[2,85],{28:$VK,63:[1,85]}),{16:$Ve,28:$Vf,29:87,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($VL,[2,93]),o($VL,[2,96]),o($VL,[2,97],{74:[1,88]}),o($VL,[2,98]),{16:[1,89],23:90},o($Vn,$Vl,{50:$Vm,74:[1,91]}),{16:$Ve,28:$Vf,29:92,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:93,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($Vt,[2,56]),o($Vt,[2,57]),{16:$Ve,28:$Vf,29:94,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:95,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:96,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:97,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,62:37,64:98,68:$Vh,72:99,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,62:37,68:$Vh,73:102,75:101,76:$VM,77:$VN,79:$Vj},{16:$Vk,34:105,78:$V9,80:104,81:$Va},{17:[1,106]},{15:[1,107]},{16:[1,108]},{16:[1,109]},{16:[1,110]},{16:$Ve,28:$Vf,29:111,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{30:[1,112],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},{19:[1,113]},{16:[1,114],23:29},{16:[1,115]},{16:$Vk,30:$VO,34:118,37:116,78:$V9,81:$Va,82:117},{16:$Ve,17:[1,119],28:$Vf,29:120,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$VP,23:121},{16:$Ve,28:$Vf,29:123,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:124,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:125,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:126,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:127,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:128,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:129,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:130,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:131,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:132,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:133,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:134,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:135,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:136,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,62:37,64:137,68:$Vh,72:99,73:35,77:$Vi,79:$Vj},o($VI,[2,81]),{17:[1,138],28:[1,139]},o([17,28],$Vo,{50:$VQ}),{16:$Ve,28:$Vf,62:37,64:141,68:$Vh,72:99,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:144,30:[1,142],56:$Vg,61:143,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{30:[1,145],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},{16:$Ve,28:$Vf,62:37,68:$Vh,73:102,75:101,77:$VN,79:$Vj},o($Vt,$Vq,{38:[1,146],66:$Vs}),o($Vt,[2,50]),{76:$VM},o($Vt,[2,54],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($Vt,[2,55],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($Vt,[2,58],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($Vt,[2,59],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($Vt,[2,60],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($Vt,[2,61],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($Vt,[2,62]),{63:$VJ},o($Vn,[2,99]),{76:[1,147]},{28:$VK,66:[1,148],76:[2,111]},{78:[1,149]},{51:[1,150]},{51:[2,115],66:[1,151]},{7:152,8:153,10:154,11:155,12:$V0,13:$V1,16:$Vk,34:157,39:$VR,78:$V9,81:$Va},{16:[1,158]},{17:[1,159]},{17:[1,160]},{24:[1,161],25:[1,162]},{30:[1,163],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},{16:$V3,17:$VS,26:166,31:164,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va},{16:$Ve,28:$Vf,29:167,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($Vt,$Vq,{38:$Vr,66:$Vs}),{35:[1,168]},{30:[1,169]},{30:[2,108],66:[1,170]},{16:[1,172],83:[1,171]},{16:$Ve,28:$Vf,29:144,56:$Vg,61:173,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($Vt,[2,52],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($VT,[2,122]),o($VT,$Vq,{66:$Vs}),{24:[1,174],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},o($VU,[2,67],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,70:$VG,71:$VH}),o($VU,[2,68],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,70:$VG,71:$VH}),o($VV,[2,69],{55:$VB,56:$VC,57:$VD,58:$VE,71:$VH}),o($VV,[2,70],{55:$VB,56:$VC,57:$VD,58:$VE,71:$VH}),o($VV,[2,71],{55:$VB,56:$VC,57:$VD,58:$VE,71:$VH}),o($VV,[2,72],{55:$VB,56:$VC,57:$VD,58:$VE,71:$VH}),o($VV,[2,73],{55:$VB,56:$VC,57:$VD,58:$VE,71:$VH}),o($VV,[2,74],{55:$VB,56:$VC,57:$VD,58:$VE,71:$VH}),o($VW,[2,75],{57:$VD,58:$VE,71:$VH}),o($VW,[2,76],{57:$VD,58:$VE,71:$VH}),o($VI,[2,77]),o($VI,[2,78]),o($VI,[2,79]),o($VI,[2,83]),{16:$Ve,18:[1,175],28:$Vf,29:144,56:$Vg,61:176,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Ve,28:$Vf,29:144,30:[1,177],56:$Vg,61:178,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Vk,34:179,78:$V9,81:$Va},o($VI,[2,84]),o($VL,[2,94]),{30:[1,180]},o($VX,[2,113],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,66:[1,181],69:$VF,70:$VG,71:$VH}),o($VL,[2,91]),{16:$Ve,28:$Vf,29:182,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o([18,19,24,28,30,38,48,49,50,51,52,53,54,55,56,57,58,63,66,69,70,71,76],[2,86]),{16:$Ve,28:$Vf,62:37,68:$Vh,73:102,75:183,77:$VN,79:$Vj},{50:$VQ},o($Vn,[2,100]),{16:$Vk,34:105,78:$V9,80:184,81:$Va},{18:[1,185]},{18:[2,4]},{8:186,10:154,11:155,12:$V0,13:$V1,16:$Vk,18:[2,7],34:157,39:$VR,78:$V9,81:$Va},{16:$Vk,34:187,39:[1,188],78:$V9,81:$Va},{16:$Vk,34:189,78:$V9,81:$Va},{16:[1,190],40:[1,191]},{17:[1,192]},{7:193,8:153,10:154,11:155,12:$V0,13:$V1,16:$Vk,34:157,39:$VR,78:$V9,81:$Va},{16:$VP,23:194},{12:[1,195]},{16:[1,196]},{16:$V3,17:$VS,26:166,31:197,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va},o($Vd,[2,18]),{4:199,6:3,9:198,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:9,59:$V7,60:$V8,62:13,78:$V9,81:$Va,86:$Vb},{19:[1,200]},{19:[1,201],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},{16:[1,202]},{17:[1,203]},{16:$Vk,30:$VO,34:118,37:204,78:$V9,81:$Va,82:117},{16:[1,205]},o($VY,[2,106],{38:[1,206]}),{18:[1,207]},{16:$Ve,28:$Vf,29:208,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($VZ,[2,87]),{18:[1,209]},o($VZ,[2,89]),{30:[1,210]},{66:[1,211]},o($VL,[2,95]),{16:$Ve,28:$Vf,29:144,56:$Vg,61:212,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($Vt,[2,49],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),{76:[2,110]},{51:[2,114]},{19:[1,213]},{18:[2,6]},{16:[1,214]},{16:$Vk,34:215,78:$V9,81:$Va},{16:[1,216]},{28:[1,217]},{41:218,42:[1,219],43:[1,220],44:[1,221],45:[1,222],46:[1,223],47:[1,224],48:[1,225],49:[1,226],50:[1,227],51:[1,228],52:[1,229],53:[1,230],54:[1,231],55:[1,232],56:[1,233],57:[1,234],58:[1,235]},{7:236,8:153,10:154,11:155,12:$V0,13:$V1,16:$Vk,34:157,39:$VR,78:$V9,81:$Va},{18:[1,237]},{18:[1,238]},{16:[1,239]},{17:[1,240]},o($Vd,[2,121],{84:241,87:243,85:$V_}),{18:[1,244]},{18:[2,5]},o($V$,[2,127]),{16:$V3,26:245,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va},{30:[1,246]},{4:199,6:3,9:247,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:9,59:$V7,60:$V8,62:13,78:$V9,81:$Va,86:$Vb},{30:[2,107]},o($VY,[2,104]),{16:$Ve,28:$Vf,29:248,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($Vt,[2,51]),o([18,19,24,30,66],[2,66],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),o($VZ,[2,88]),o($VZ,[2,90]),{16:$Vk,34:249,78:$V9,81:$Va},o($VX,[2,112]),o($Vd,[2,10]),{19:[1,251],28:[1,252],38:[1,250]},{16:[1,253]},{28:[1,254]},{16:$Vk,30:$VO,34:118,37:255,78:$V9,81:$Va,82:117},{28:[1,256]},{28:[2,31]},{28:[2,32]},{28:[2,33]},{28:[2,34]},{28:[2,35]},{28:[2,36]},{28:[2,37]},{28:[2,38]},{28:[2,39]},{28:[2,40]},{28:[2,41]},{28:[2,42]},{28:[2,43]},{28:[2,44]},{28:[2,45]},{28:[2,46]},{28:[2,47]},{18:[1,257]},o($Vd,[2,12]),o($Vd,[2,13]),{17:[1,258]},{7:259,8:153,10:154,11:155,12:$V0,13:$V1,16:$Vk,34:157,39:$VR,78:$V9,81:$Va},o($Vd,[2,120]),{16:$V3,17:$VS,26:166,31:261,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va,86:[1,260]},o($Vd,[2,118]),o($V$,[2,126]),{30:[1,262]},{16:$V3,17:$VS,26:166,31:263,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va},{18:[1,264]},o($VY,[2,105],{48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH}),{51:[1,265]},{16:$Ve,28:$Vf,29:266,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($V01,[2,24]),{16:$Vk,30:$VO,34:118,37:267,78:$V9,81:$Va,82:117},{28:[1,269],38:[1,268]},{16:$Vk,30:$VO,34:118,37:270,78:$V9,81:$Va,82:117},{30:[1,271]},{16:$Vk,30:$VO,34:118,37:272,78:$V9,81:$Va,82:117},o($Vd,[2,11]),{7:273,8:153,10:154,11:155,12:$V0,13:$V1,16:$Vk,34:157,39:$VR,78:$V9,81:$Va},{18:[1,274]},{28:[1,275]},o($Vd,[2,119]),{16:$V3,17:$VS,26:166,31:276,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va},o($Vd,[2,20]),o($Vd,[2,22]),{17:[1,277]},{19:[1,278],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},{30:[1,279]},{16:$Ve,28:$Vf,29:280,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},{16:$Vk,30:$VO,34:118,37:281,78:$V9,81:$Va,82:117},{30:[1,282]},{17:[1,283]},{30:[1,284]},{18:[1,285]},o($Vd,[2,15]),{16:$Ve,28:$Vf,29:286,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($Vd,[2,19]),{17:$V11,65:287,67:288},o($V01,[2,23]),{19:[1,290]},{19:[1,291],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},{30:[1,292]},{17:[1,293]},{4:199,6:3,9:294,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:9,59:$V7,60:$V8,62:13,78:$V9,81:$Va,86:$Vb},{17:[1,295]},o($Vd,[2,14]),{30:[1,296],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},{18:[1,297],66:[1,298]},o($V21,[2,64]),{68:[1,299]},o($V01,[2,27]),o($V01,[2,25]),{19:[1,300]},{4:199,6:3,9:301,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:9,59:$V7,60:$V8,62:13,78:$V9,81:$Va,86:$Vb},{18:[1,302]},{4:199,6:3,9:303,11:16,12:$V0,13:$V1,14:5,15:$V2,16:$V3,26:4,27:$V4,32:$V5,33:$V6,34:10,36:9,59:$V7,60:$V8,62:13,78:$V9,81:$Va,86:$Vb},{16:$V3,17:$VS,26:166,31:304,34:62,59:$V7,60:$V8,62:13,78:$V9,81:$Va},o($VL,[2,92]),{17:$V11,67:305},{66:[1,306]},o($V01,[2,26]),{18:[1,307]},o($V01,[2,29]),{18:[1,308]},o($Vd,[2,117],{87:243,84:309,85:$V_}),o($V21,[2,63]),{16:$Ve,28:$Vf,29:310,56:$Vg,62:37,64:33,68:$Vh,72:31,73:35,77:$Vi,79:$Vj},o($V01,[2,28]),o($V01,[2,30]),o($Vd,[2,116]),{18:[1,311],48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,69:$VF,70:$VG,71:$VH},o($V21,[2,65])],
defaultActions: {22:[2,1],153:[2,4],183:[2,110],184:[2,114],186:[2,6],199:[2,5],204:[2,107],219:[2,31],220:[2,32],221:[2,33],222:[2,34],223:[2,35],224:[2,36],225:[2,37],226:[2,38],227:[2,39],228:[2,40],229:[2,41],230:[2,42],231:[2,43],232:[2,44],233:[2,45],234:[2,46],235:[2,47]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 79
break;
case 2:return 68
break;
case 3:return "class"
break;
case 4:return "public"
break;
case 5:return "extends"
break;
case 6:return "operator"
break;
case 7:return "implements"
break;
case 8:return "Dictionary"
break;
case 9:return "private"
break;
case 10:return "static"
break;
case 11:return "if"
break;
case 12:return "in"
break;
case 13:return "else"
break;
case 14:return "return"
break;
case 15:return "while"
break;
case 16:return "foreach"
break;
case 17:return "const"
break;
case 18:return "for"
break;
case 19:return "new"
break;
case 20:return 66
break;
case 21:return 19
break;
case 22:return 63
break;
case 23:return 24
break;
case 24:return 52
break;
case 25:return 53
break;
case 26:return 49
break;
case 27:return 51
break;
case 28:return 48
break;
case 29:return 50
break;
case 30:return 54
break;
case 31:return 38
break;
case 32:return 44
break;
case 33:return 57
break;
case 34:return 45
break;
case 35:return 58
break;
case 36:return 71
break;
case 37:return 43
break;
case 38:return 47
break;
case 39:return 56
break;
case 40:return 46
break;
case 41:return 42
break;
case 42:return 55
break;
case 43:return '^'
break;
case 44:return 69
break;
case 45:return 17
break;
case 46:return 18
break;
case 47:return 74
break;
case 48:return 76
break;
case 49:return 28
break;
case 50:return 30
break;
case 51:return 16
break;
case 52:return 5
break;
case 53:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:operator\b)/,/^(?:implements\b)/,/^(?:Dictionary\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:foreach\b)/,/^(?:const\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cpp_parser;
exports.Parser = cpp_parser.Parser;
exports.parse = function () { return cpp_parser.parse.apply(cpp_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}