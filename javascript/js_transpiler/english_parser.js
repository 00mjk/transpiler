/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var english_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,8],$V2=[1,9],$V3=[1,17],$V4=[1,18],$V5=[1,13],$V6=[1,19],$V7=[1,20],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,12],$Vc=[1,27],$Vd=[5,17],$Ve=[11,77],$Vf=[1,32],$Vg=[2,79],$Vh=[1,40],$Vi=[11,17,19,20,21,22,32,77,83],$Vj=[2,83],$Vk=[11,17,19,20,21,22,24,25,32,77,83],$Vl=[9,11,17,19,20,21,22,24,25,27,28,32,77,83],$Vm=[2,66],$Vn=[9,11,17,19,20,21,22,24,25,27,28,32,34,35,39,40,41,42,43,44,45,46,77,83],$Vo=[9,11,17,19,20,21,22,24,25,27,28,32,34,35,39,40,41,42,43,44,45,46,69,70,71,72,73,77,83],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,91],$Vt=[1,92],$Vu=[1,93],$Vv=[1,94],$Vw=[1,95],$Vx=[1,96],$Vy=[1,97],$Vz=[48,49,50,51,52,53,54,55,56,57,60,62,63,64,65,66,76,78,79,80,81],$VA=[1,114],$VB=[17,32,83],$VC=[2,28],$VD=[62,63,64,65,66,76,78,79,80,81],$VE=[17,32];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"statements_conjunction":8,"and":9,"if_then_expr":10,".":11,"statement_with_semicolon":12,"function":13,"grammar_var":14,"{":15,"parameters":16,"}":17,"or_expr":18,"if":19,"then":20,"implies":21,"means":22,"and_expr":23,"or":24,"||":25,"bool_expr":26,"but":27,"&&":28,"return":29,"=":30,"parameter":31,",":32,"linking_verb":33,"is":34,"are":35,"the_add_expr":36,"not_verb_phrase":37,"add_expr":38,">":39,"<":40,"<=":41,">=":42,"==":43,"equals":44,"contains":45,"!=":46,"preposition":47,"between":48,"under":49,"over":50,"below":51,"above":52,"beneath":53,"on":54,"in":55,"onto":56,"to":57,"verb_phrase":58,"than":59,"not":60,"comparison_operator":61,"each":62,"every":63,"a":64,"an":65,"the":66,"the_parentheses_expr":67,"parentheses_expr":68,"minus":69,"plus":70,"+":71,"-":72,"of":73,"array":74,"function_call":75,"(":76,")":77,"NUMBER":78,"STRING_LITERAL":79,"IDENTIFIER":80,"[":81,"or_exprs":82,"]":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"and",11:".",13:"function",15:"{",17:"}",19:"if",20:"then",21:"implies",22:"means",24:"or",25:"||",27:"but",28:"&&",29:"return",30:"=",32:",",34:"is",35:"are",39:">",40:"<",41:"<=",42:">=",43:"==",44:"equals",45:"contains",46:"!=",48:"between",49:"under",50:"over",51:"below",52:"above",53:"beneath",54:"on",55:"in",56:"onto",57:"to",59:"than",60:"not",62:"each",63:"every",64:"a",65:"an",66:"the",69:"minus",70:"plus",71:"+",72:"-",73:"of",76:"(",77:")",78:"NUMBER",79:"STRING_LITERAL",80:"IDENTIFIER",81:"[",83:"]"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,3],[8,1],[6,2],[10,1],[10,8],[10,3],[10,4],[10,3],[10,3],[18,3],[18,3],[18,1],[23,3],[23,3],[23,3],[23,1],[12,2],[12,3],[12,1],[31,1],[31,2],[16,3],[16,1],[16,0],[33,1],[33,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[58,2],[58,3],[58,1],[58,3],[37,2],[37,1],[61,1],[61,1],[61,1],[61,1],[36,2],[36,2],[36,2],[36,2],[36,2],[36,1],[67,2],[67,2],[67,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,1],[68,1],[68,1],[68,3],[68,1],[68,1],[68,1],[14,1],[14,1],[74,3],[82,3],[82,1],[75,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements", $$[$0-1]];
break;
case 2:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 27:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5:
this.$=["&&",$$[$0-2],$$[$0]];
break;
case 7:
[this.$ = $$[$0-1]];
break;
case 8:
this.$ = ["semicolon",$$[$0]]
break;
case 9:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 10: case 12: case 14: case 17: case 18: case 52: case 54:
this.$ = [$$[$0-2],$$[$0-1],$$[$0]];
break;
case 11:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]]
break;
case 13:
this.$ = [$$[$0-2],$$[$0-1],$$[$0]]
break;
case 15: case 19:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 21: case 25: case 51: case 61: case 62: case 63:
this.$ = [$$[$0-1],$$[$0]];
break;
case 22:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 23: case 53: case 60:
this.$ = $$[$0]
break;
case 24:
this.$ = ["Object", $$[$0]];
break;
case 26:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 28:
this.$ = []
break;
case 31:
this.$= [$$[$0-2],$$[$0-1],$$[$0]];
break;
case 32:
this.$= [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 33: case 34: case 35: case 36: case 37: case 38: case 39:
this.$=[$$[$0-1],$$[$0-2],$$[$0]];
break;
case 55:
this.$=[$$[$0-1],$$[$0]];
break;
case 64:
this.$ = ["a",$$[$0]];
break;
case 65: case 68:
this.$ = $$[$0];
break;
case 67:
this.$ = ["a", $$[$0]];
break;
case 70: case 71:
this.$= [$$[$0-2],$$[$0-1],$$[$0]]
break;
case 72: case 73:
this.$= [$$[$0-1],$$[$0-2],$$[$0]]
break;
case 74:
this.$=[$$[$0-2],$$[$0-1],$$[$0]]
break;
case 78:
this.$ = ["parentheses",$$[$0-1]];
break;
case 81:
this.$ = yytext;
break;
case 83:
this.$=$$[$0];
break;
case 84:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 85:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 86:
this.$ = [$$[$0]];
break;
case 87:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:$V0,14:10,18:7,19:$V1,23:11,26:14,29:$V2,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{1:[3]},{5:[1,28]},o($Vd,[2,3],{6:3,10:4,12:5,18:7,14:10,23:11,26:14,36:15,38:16,68:21,74:22,75:23,4:29,13:$V0,19:$V1,29:$V2,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc}),{11:[1,30]},o($Ve,[2,8]),{14:31,64:$Vf,80:$Vb},o($Ve,[2,23],{19:[1,33],21:[1,34],22:[1,35]}),{14:37,18:36,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,18:38,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o([9,11,19,21,22,24,25,27,28,34,35,39,40,41,42,43,44,45,46,69,70,71,72,73,77],$Vg,{15:$Vh,30:[1,39]}),o($Vi,[2,16],{24:[1,41],25:[1,42]}),o([9,11,15,17,19,20,21,22,24,25,27,28,30,32,34,35,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,59,64,69,70,71,72,73,77,80,83],[2,82]),o([9,11,15,17,19,20,21,22,24,25,27,28,30,32,34,35,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,59,69,70,71,72,73,77,83],$Vj,{68:21,74:22,75:23,14:37,38:43,64:$Vf,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc}),o($Vk,[2,20],{9:[1,44],27:[1,45],28:[1,46]}),o($Vl,[2,40],{33:47,34:[1,48],35:[1,49]}),o([9,11,17,19,20,21,22,24,25,27,28,32,34,35,77,83],$Vm,{39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57]}),{14:37,38:58,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:59,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:60,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:61,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($Vn,[2,75],{69:[1,62],70:[1,63],71:[1,64],72:[1,65],73:[1,66]}),o($Vo,[2,76]),o($Vo,[2,77]),{10:67,12:5,13:$V0,14:10,18:7,19:$V1,23:11,26:14,29:$V2,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($Vo,[2,80]),o($Vo,[2,81]),{14:37,18:69,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc,82:68},{1:[2,1]},o($Vd,[2,2]),o([5,13,17,19,29,62,63,64,65,66,76,78,79,80,81],[2,7]),{15:[1,70]},o([9,11,15,17,19,20,21,22,24,25,27,28,32,34,35,39,40,41,42,43,44,45,46,64,69,70,71,72,73,77,80,83],$Vj),{14:37,18:71,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,18:72,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,18:73,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{20:[1,74]},o($Vo,$Vg,{15:$Vh}),o($Ve,[2,21]),{14:37,18:75,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,18:69,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc,82:76},{14:37,18:77,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,18:78,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($Vn,[2,63]),{14:37,26:79,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,26:80,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,26:81,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:86,36:87,37:82,38:98,47:85,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:84,60:[1,83],62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($Vz,[2,29]),o($Vz,[2,30]),{14:37,38:99,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:100,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:101,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:102,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:103,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:104,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:105,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,38:106,64:$Vf,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($Vn,[2,61]),o($Vn,[2,62]),o($Vn,[2,64]),o($Vn,[2,65]),{14:37,36:107,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,36:108,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,36:109,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,36:110,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,36:111,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{77:[1,112]},{32:$VA,83:[1,113]},o($VB,[2,86]),{14:117,16:115,17:$VC,31:116,64:$Vf,80:$Vb},o($Ve,[2,10]),o($Ve,[2,12]),o($Ve,[2,13]),{14:37,18:118,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($Ve,[2,22]),{17:[1,119],32:$VA},o($Vi,[2,14]),o($Vi,[2,15]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vl,[2,31]),{14:86,36:87,38:98,47:85,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:120,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($Vl,[2,56]),{14:37,36:121,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o([9,11,17,19,20,21,22,24,25,27,28,32,69,70,71,72,73,77,83],$Vg,{47:122,15:$Vh,48:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,59:[1,123]}),o($Vl,[2,53]),o($VD,[2,41]),o($VD,[2,42]),o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),o($VD,[2,50]),o($Vn,$Vm),o($Vl,[2,32]),o($Vl,[2,33]),o($Vl,[2,34]),o($Vl,[2,35]),o($Vl,[2,36]),o($Vl,[2,37]),o($Vl,[2,38]),o($Vl,[2,39]),o($Vn,[2,70]),o($Vn,[2,71]),o($Vn,[2,72]),o($Vn,[2,73]),o($Vn,[2,74]),o($Vo,[2,78]),o($Vo,[2,84]),{14:37,18:124,23:11,26:14,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{17:[1,125]},{17:[2,27],32:[1,126]},o($VE,[2,24],{14:127,64:$Vf,80:$Vb}),o($Ve,[2,11]),o($Vo,[2,87]),o($Vl,[2,55]),o($Vl,[2,51]),{14:37,36:128,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{14:37,36:129,38:98,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},o($VB,[2,85]),{15:[1,130]},{14:117,16:131,17:$VC,31:116,64:$Vf,80:$Vb},o($VE,[2,25]),o($Vl,[2,52]),o($Vl,[2,54]),{4:133,6:3,7:132,10:4,12:5,13:$V0,14:10,18:7,19:$V1,23:11,26:14,29:$V2,36:15,38:16,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,68:21,74:22,75:23,76:$V8,78:$V9,79:$Va,80:$Vb,81:$Vc},{17:[2,26]},{17:[1,134]},{17:[2,4]},o($Ve,[2,9])],
defaultActions: {28:[2,1],131:[2,26],133:[2,4]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 78
break;
case 2:return 79
break;
case 3:return ':'
break;
case 4:return ';'
break;
case 5:return 32
break;
case 6:return 11
break;
case 7:return 46
break;
case 8:return 42
break;
case 9:return 39
break;
case 10:return 41
break;
case 11:return 43
break;
case 12:return 25
break;
case 13:return 28
break;
case 14:return 30
break;
case 15:return 40
break;
case 16:return 71
break;
case 17:return 72
break;
case 18:return 13
break;
case 19:return 48
break;
case 20:return 21
break;
case 21:return 70
break;
case 22:return 69
break;
case 23:return 59
break;
case 24:return 20
break;
case 25:return 22
break;
case 26:return 29
break;
case 27:return 63
break;
case 28:return 45
break;
case 29:return 44
break;
case 30:return 62
break;
case 31:return 9
break;
case 32:return 66
break;
case 33:return 60
break;
case 34:return 24
break;
case 35:return 73
break;
case 36:return 34
break;
case 37:return 19
break;
case 38:return 57
break;
case 39:return 64
break;
case 40:return 49
break;
case 41:return 54
break;
case 42:return 55
break;
case 43:return 'how'
break;
case 44:return 35
break;
case 45:return 60
break;
case 46:return 65
break;
case 47:return 51
break;
case 48:return 52
break;
case 49:return 76
break;
case 50:return 77
break;
case 51:return 81
break;
case 52:return 83
break;
case 53:return 15
break;
case 54:return 17
break;
case 55:return 80
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:==)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:=)/,/^(?:<)/,/^(?:\+)/,/^(?:-)/,/^(?:function\b)/,/^(?:between\b)/,/^(?:implies\b)/,/^(?:plus\b)/,/^(?:minus\b)/,/^(?:than\b)/,/^(?:then\b)/,/^(?:means\b)/,/^(?:return\b)/,/^(?:every\b)/,/^(?:contains\b)/,/^(?:equals\b)/,/^(?:each\b)/,/^(?:and\b)/,/^(?:the\b)/,/^(?:not\b)/,/^(?:or\b)/,/^(?:of\b)/,/^(?:is\b)/,/^(?:if\b)/,/^(?:to\b)/,/^(?:a\b)/,/^(?:under\b)/,/^(?:on\b)/,/^(?:in\b)/,/^(?:how\b)/,/^(?:are\b)/,/^(?:not\b)/,/^(?:an\b)/,/^(?:below\b)/,/^(?:above\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = english_parser;
exports.Parser = english_parser.Parser;
exports.parse = function () { return english_parser.parse.apply(english_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}