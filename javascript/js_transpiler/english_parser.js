/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var english_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[1,12],$V4=[1,17],$V5=[1,18],$V6=[1,13],$V7=[1,19],$V8=[1,20],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[5,18],$Ve=[11,84],$Vf=[1,36],$Vg=[2,86],$Vh=[1,41],$Vi=[11,18,19,20,21,22,32,84,89],$Vj=[2,89],$Vk=[2,90],$Vl=[11,18,19,20,21,22,24,25,32,84,89],$Vm=[9,11,18,19,20,21,22,24,25,27,28,32,84,89],$Vn=[2,70],$Vo=[9,11,18,19,20,21,22,24,25,27,28,32,34,35,36,37,45,46,47,48,49,50,51,52,84,89],$Vp=[2,82],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[9,11,18,19,20,21,22,24,25,27,28,32,34,35,36,37,45,46,47,48,49,50,51,52,73,74,76,77,78,79,80,84,89],$Vw=[40,42,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,83,85,86,87],$Vx=[1,93],$Vy=[1,94],$Vz=[1,95],$VA=[1,96],$VB=[1,97],$VC=[1,98],$VD=[1,99],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,122],$VI=[18,32,89],$VJ=[2,28],$VK=[40,66,67,68,69,70,83,85,86,87],$VL=[18,32];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"statements":7,"statements_conjunction":8,"and":9,"if_then_expr":10,".":11,"statement_with_semicolon":12,"or_expr":13,"function":14,"grammar_var":15,"{":16,"parameters":17,"}":18,"if":19,"then":20,"implies":21,"means":22,"and_expr":23,"or":24,"||":25,"bool_expr":26,"but":27,"&&":28,"return":29,"=":30,"parameter":31,",":32,"linking_verb":33,"is":34,"are":35,"does":36,"did":37,"the_mul_expr":38,"no":39,"IDENTIFIER":40,"than":41,"not":42,"verb_phrase":43,"mul_expr":44,">":45,"<":46,"<=":47,">=":48,"==":49,"equals":50,"contains":51,"!=":52,"preposition":53,"between":54,"under":55,"over":56,"below":57,"above":58,"beneath":59,"on":60,"in":61,"onto":62,"to":63,"not_verb_phrase":64,"comparison_operator":65,"each":66,"every":67,"a":68,"an":69,"the":70,"the_parentheses_expr":71,"parentheses_expr":72,"*":73,"/":74,"add_expr":75,"minus":76,"plus":77,"+":78,"-":79,"of":80,"array":81,"function_call":82,"(":83,")":84,"NUMBER":85,"STRING_LITERAL":86,"[":87,"or_exprs":88,"]":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"and",11:".",14:"function",16:"{",18:"}",19:"if",20:"then",21:"implies",22:"means",24:"or",25:"||",27:"but",28:"&&",29:"return",30:"=",32:",",34:"is",35:"are",36:"does",37:"did",39:"no",40:"IDENTIFIER",41:"than",42:"not",45:">",46:"<",47:"<=",48:">=",49:"==",50:"equals",51:"contains",52:"!=",54:"between",55:"under",56:"over",57:"below",58:"above",59:"beneath",60:"on",61:"in",62:"onto",63:"to",66:"each",67:"every",68:"a",69:"an",70:"the",73:"*",74:"/",76:"minus",77:"plus",78:"+",79:"-",80:"of",83:"(",84:")",85:"NUMBER",86:"STRING_LITERAL",87:"[",89:"]"},
productions_: [0,[3,2],[4,2],[4,1],[7,1],[8,3],[8,1],[6,2],[10,1],[10,1],[10,8],[10,3],[10,4],[10,3],[10,3],[13,3],[13,3],[13,1],[23,3],[23,3],[23,3],[23,1],[12,2],[12,3],[31,1],[31,2],[17,3],[17,1],[17,0],[33,1],[33,1],[33,1],[33,1],[26,6],[26,5],[26,4],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[43,2],[43,3],[43,1],[43,3],[64,1],[65,1],[65,1],[65,1],[65,1],[38,2],[38,2],[38,2],[38,2],[38,2],[38,1],[71,2],[71,2],[71,1],[44,3],[44,3],[44,1],[75,3],[75,3],[75,3],[75,3],[75,3],[75,1],[72,1],[72,1],[72,3],[72,1],[72,1],[72,1],[15,1],[15,1],[81,3],[88,3],[88,1],[82,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements", $$[$0-1]];
break;
case 2:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 27:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = ["statements",$$[$0]]
break;
case 5:
this.$=["&&",$$[$0-2],$$[$0]];
break;
case 7:
this.$ = $$[$0-1];
break;
case 8:
this.$ = ["semicolon",$$[$0]];
break;
case 9: case 69: case 72:
this.$ = $$[$0];
break;
case 10:
this.$ = ["function","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]]
break;
case 11: case 13: case 15: case 18: case 19: case 57: case 59:
this.$ = [$$[$0-2],$$[$0-1],$$[$0]];
break;
case 12:
this.$ = [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]]
break;
case 14:
this.$ = [$$[$0-2],$$[$0-1],$$[$0]]
break;
case 16: case 20:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 22: case 25: case 56: case 65: case 66: case 67:
this.$ = [$$[$0-1],$$[$0]];
break;
case 23:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["Object", $$[$0]];
break;
case 26:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 28:
this.$ = []
break;
case 33:
this.$= [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 34:
this.$= [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]];
break;
case 35:
this.$= [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]];
break;
case 36:
this.$= [$$[$0-2],$$[$0-1],$$[$0]];
break;
case 37:
this.$= [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 38: case 39: case 40: case 41: case 42: case 43: case 44:
this.$=[$$[$0-1],$$[$0-2],$$[$0]];
break;
case 58: case 64:
this.$ = $$[$0]
break;
case 68:
this.$ = ["a",$$[$0]];
break;
case 71:
this.$ = ["a", $$[$0]];
break;
case 74: case 75: case 79: case 80:
this.$= [$$[$0-1],$$[$0-2],$$[$0]]
break;
case 77: case 78:
this.$= [$$[$0-2],$$[$0-1],$$[$0]]
break;
case 81:
this.$=[$$[$0-2],$$[$0-1],$$[$0]]
break;
case 85:
this.$ = ["parentheses",$$[$0-1]];
break;
case 88:
this.$ = yytext;
break;
case 90:
this.$=$$[$0];
break;
case 91:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 92:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 93:
this.$ = [$$[$0]];
break;
case 94:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:6,14:$V0,15:10,19:$V1,23:11,26:14,29:$V2,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{1:[3]},{5:[1,29]},o($Vd,[2,3],{6:3,10:4,12:5,13:6,15:10,23:11,26:14,38:15,44:16,72:21,75:22,81:23,82:24,4:30,14:$V0,19:$V1,29:$V2,40:$V3,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,83:$V9,85:$Va,86:$Vb,87:$Vc}),{11:[1,31]},o($Ve,[2,8]),o($Ve,[2,9],{19:[1,32],21:[1,33],22:[1,34]}),{15:35,40:$V3,68:$Vf},{13:37,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{13:39,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o([9,11,19,21,22,24,25,27,28,34,35,36,37,45,46,47,48,49,50,51,52,73,74,76,77,78,79,80,84],$Vg,{16:$Vh,30:[1,40]}),o($Vi,[2,17],{24:[1,42],25:[1,43]}),o([9,11,16,18,19,20,21,22,24,25,27,28,30,32,34,35,36,37,40,41,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,68,73,74,76,77,78,79,80,84,89],$Vj),o([9,11,16,18,19,20,21,22,24,25,27,28,30,32,34,35,36,37,41,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,73,74,76,77,78,79,80,84,89],$Vk,{72:21,75:22,81:23,82:24,15:38,44:44,40:$V3,68:$Vf,83:$V9,85:$Va,86:$Vb,87:$Vc}),o($Vl,[2,21],{9:[1,45],27:[1,46],28:[1,47]}),o($Vm,[2,45],{33:49,34:[1,48],35:[1,50],36:[1,51],37:[1,52]}),o([9,11,18,19,20,21,22,24,25,27,28,32,34,35,36,37,84,89],$Vn,{45:[1,53],46:[1,54],47:[1,55],48:[1,56],49:[1,57],50:[1,58],51:[1,59],52:[1,60]}),{15:38,40:$V3,44:61,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:62,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:63,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:64,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vo,$Vp,{73:[1,65],74:[1,66],76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($Vo,[2,76]),o($Vv,[2,83]),o($Vv,[2,84]),{10:72,12:5,13:6,14:$V0,15:10,19:$V1,23:11,26:14,29:$V2,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vv,[2,87]),o($Vv,[2,88]),{13:74,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc,88:73},{1:[2,1]},o($Vd,[2,2]),o([5,14,18,19,29,40,66,67,68,69,70,83,85,86,87],[2,7]),{13:75,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{13:76,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{13:77,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{16:[1,78]},o([9,11,16,18,19,20,21,22,24,25,27,28,32,34,35,36,37,40,45,46,47,48,49,50,51,52,68,73,74,76,77,78,79,80,84,89],$Vk),{20:[1,79]},o($Vv,$Vg,{16:$Vh}),o($Ve,[2,22]),{13:80,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{13:74,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc,88:81},{13:82,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{13:83,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vo,[2,67]),{15:38,26:84,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,26:85,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,26:86,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vw,[2,29],{39:[1,87]}),{15:91,38:92,40:$V3,42:[1,88],43:89,44:103,53:90,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vw,[2,30]),o($Vw,[2,31]),o($Vw,[2,32]),{15:38,40:$V3,44:104,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:105,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:106,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:107,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:108,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:109,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:110,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,44:111,68:$Vf,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vo,[2,65]),o($Vo,[2,66]),o($Vo,[2,68]),o($Vo,[2,69]),{15:38,38:112,40:$V3,44:103,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,38:113,40:$V3,44:103,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,68:$Vf,72:115,75:114,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,68:$Vf,72:115,75:116,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,68:$Vf,72:115,75:117,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,68:$Vf,72:115,75:118,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,40:$V3,68:$Vf,72:115,75:119,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{84:[1,120]},{32:$VH,89:[1,121]},o($VI,[2,93]),o($Ve,[2,11]),o($Ve,[2,13]),o($Ve,[2,14]),{15:125,17:123,18:$VJ,31:124,40:$V3,68:$Vf},{13:126,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Ve,[2,23]),{18:[1,127],32:$VH},o($Vi,[2,15]),o($Vi,[2,16]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),{40:[1,128]},{15:91,38:92,40:[1,129],43:130,44:103,53:90,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vm,[2,36]),{15:38,38:131,40:$V3,44:103,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o([9,11,18,19,20,21,22,24,25,27,28,32,73,74,76,77,78,79,80,84,89],$Vg,{53:132,16:$Vh,41:[1,133],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($Vm,[2,58]),o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),o($VK,[2,49]),o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55]),o($Vo,$Vn),o($Vm,[2,37]),o($Vm,[2,38]),o($Vm,[2,39]),o($Vm,[2,40]),o($Vm,[2,41]),o($Vm,[2,42]),o($Vm,[2,43]),o($Vm,[2,44]),o($Vo,[2,74]),o($Vo,[2,75]),o($Vo,[2,77]),o($Vo,$Vp,{76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu}),o($Vo,[2,78]),o($Vo,[2,79]),o($Vo,[2,80]),o($Vo,[2,81]),o($Vv,[2,85]),o($Vv,[2,91]),{13:134,15:38,23:11,26:14,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{18:[1,135]},{18:[2,27],32:[1,136]},o($VL,[2,24],{15:137,40:$V3,68:$Vf}),o($Ve,[2,12]),o($Vv,[2,94]),{41:[1,138]},o([9,11,16,18,19,20,21,22,24,25,27,28,32,41,54,55,56,57,58,59,60,61,62,63,73,74,76,77,78,79,80,84,89],$Vj,{72:21,75:22,81:23,82:24,15:38,44:103,38:139,40:$V3,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,83:$V9,85:$Va,86:$Vb,87:$Vc}),o($Vm,[2,35]),o($Vm,[2,56]),{15:38,38:140,40:$V3,44:103,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{15:38,38:141,40:$V3,44:103,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($VI,[2,92]),{16:[1,142]},{15:125,17:143,18:$VJ,31:124,40:$V3,68:$Vf},o($VL,[2,25]),{15:38,38:144,40:$V3,44:103,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},o($Vm,[2,34]),o($Vm,[2,57]),o($Vm,[2,59]),{4:146,6:3,7:145,10:4,12:5,13:6,14:$V0,15:10,19:$V1,23:11,26:14,29:$V2,38:15,40:$V3,44:16,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,72:21,75:22,81:23,82:24,83:$V9,85:$Va,86:$Vb,87:$Vc},{18:[2,26]},o($Vm,[2,33]),{18:[1,147]},{18:[2,4]},o($Ve,[2,10])],
defaultActions: {29:[2,1],143:[2,26],146:[2,4]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 85
break;
case 2:return 86
break;
case 3:return ':'
break;
case 4:return ';'
break;
case 5:return 32
break;
case 6:return 11
break;
case 7:return 52
break;
case 8:return 48
break;
case 9:return 45
break;
case 10:return 47
break;
case 11:return 49
break;
case 12:return 30
break;
case 13:return 25
break;
case 14:return 28
break;
case 15:return 46
break;
case 16:return 78
break;
case 17:return 79
break;
case 18:return 73
break;
case 19:return 74
break;
case 20:return 14
break;
case 21:return 54
break;
case 22:return 21
break;
case 23:return 77
break;
case 24:return 76
break;
case 25:return 41
break;
case 26:return 20
break;
case 27:return 22
break;
case 28:return 29
break;
case 29:return 67
break;
case 30:return 51
break;
case 31:return 50
break;
case 32:return 66
break;
case 33:return 9
break;
case 34:return 70
break;
case 35:return 42
break;
case 36:return 39
break;
case 37:return 24
break;
case 38:return 80
break;
case 39:return 34
break;
case 40:return 19
break;
case 41:return 63
break;
case 42:return 68
break;
case 43:return 55
break;
case 44:return 60
break;
case 45:return 61
break;
case 46:return 'how'
break;
case 47:return 35
break;
case 48:return 42
break;
case 49:return 69
break;
case 50:return 57
break;
case 51:return 58
break;
case 52:return 36
break;
case 53:return 37
break;
case 54:return 83
break;
case 55:return 84
break;
case 56:return 87
break;
case 57:return 89
break;
case 58:return 16
break;
case 59:return 18
break;
case 60:return 40
break;
case 61:return 5
break;
case 62:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:==)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:<)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:function\b)/,/^(?:between\b)/,/^(?:implies\b)/,/^(?:plus\b)/,/^(?:minus\b)/,/^(?:than\b)/,/^(?:then\b)/,/^(?:means\b)/,/^(?:return\b)/,/^(?:every\b)/,/^(?:contains\b)/,/^(?:equals\b)/,/^(?:each\b)/,/^(?:and\b)/,/^(?:the\b)/,/^(?:not\b)/,/^(?:no\b)/,/^(?:or\b)/,/^(?:of\b)/,/^(?:is\b)/,/^(?:if\b)/,/^(?:to\b)/,/^(?:a\b)/,/^(?:under\b)/,/^(?:on\b)/,/^(?:in\b)/,/^(?:how\b)/,/^(?:are\b)/,/^(?:not\b)/,/^(?:an\b)/,/^(?:below\b)/,/^(?:above\b)/,/^(?:does\b)/,/^(?:did\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = english_parser;
exports.Parser = english_parser.Parser;
exports.parse = function () { return english_parser.parse.apply(english_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}