/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var perl_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,7],$V3=[1,21],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,13],$V8=[1,20],$V9=[1,17],$Va=[1,16],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[5,20,22,23,24,27,28,32,35,36,37,43,73,74,75,81,82],$Vh=[1,35],$Vi=[1,37],$Vj=[9,25],$Vk=[9,20,22,25],$Vl=[1,44],$Vm=[1,46],$Vn=[2,64],$Vo=[2,71],$Vp=[1,60],$Vq=[1,61],$Vr=[9,20,22,25,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,79],$Vs=[2,72],$Vt=[5,20,22,23,24,27,28,31,32,35,36,37,43,73,74,75,81,82],$Vu=[1,91],$Vv=[1,92],$Vw=[1,93],$Vx=[1,94],$Vy=[1,95],$Vz=[1,96],$VA=[1,97],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[2,89],$VJ=[1,108],$VK=[25,79],$VL=[1,122],$VM=[1,123],$VN=[9,20,22,24,25,39,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,79],$VO=[5,20,22,23,24,27,28,31,32,35,36,37,43,73,74,75,80,81,82],$VP=[9,20,22,25,52,53,54,55,70,79],$VQ=[9,20,22,25,52,53,54,55,56,57,58,59,60,70,79],$VR=[9,20,22,25,52,53,54,55,56,57,58,59,60,61,62,63,70,79],$VS=[1,174];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"top_level_statements":4,"EOF":5,"top_level_statement":6,"statement":7,"initialize_var1":8,";":9,"initialize_var_":10,"initialize_var":11,"statements_":12,"statements_without_vars":13,"initialize_vars":14,"class_statements":15,"class_statements_":16,"statements":17,"class_statement":18,"statement_with_semicolon":19,"if":20,"e":21,"unless":22,"while":23,"(":24,")":25,"bracket_statements":26,"do":27,"foreach":28,"var_name":29,"{":30,"}":31,"for":32,"statement_with_semicolon_":33,"elif":34,"sub":35,"IDENTIFIER":36,"my":37,"parameters":38,"=":39,"@_":40,"static":41,"parentheses_expr":42,"return":43,"var_names":44,"access_array":45,"++":46,"--":47,"+=":48,"-=":49,"*=":50,"/=":51,"?":52,":":53,"||":54,"&&":55,"<=":56,"<":57,">=":58,">":59,"==":60,"+":61,".":62,"-":63,"*":64,"/":65,"%":66,"not_expr":67,"!":68,"[":69,"]":70,"exprs":71,"key_values":72,"NUMBER":73,"STRING_LITERAL":74,"<>":75,"type":76,"types":77,"parameter":78,",":79,"else":80,"$":81,"@":82,"key_value":83,"=>":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:";",20:"if",22:"unless",23:"while",24:"(",25:")",27:"do",28:"foreach",30:"{",31:"}",32:"for",35:"sub",36:"IDENTIFIER",37:"my",39:"=",40:"@_",41:"static",43:"return",46:"++",47:"--",48:"+=",49:"-=",50:"*=",51:"/=",52:"?",53:":",54:"||",55:"&&",56:"<=",57:"<",58:">=",59:">",60:"==",61:"+",62:".",63:"-",64:"*",65:"/",66:"%",68:"!",69:"[",70:"]",73:"NUMBER",74:"STRING_LITERAL",75:"<>",79:",",80:"else",81:"$",82:"@",84:"=>"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[8,1],[11,1],[12,1],[12,3],[13,2],[13,1],[14,3],[14,1],[15,1],[17,1],[16,2],[16,1],[7,4],[7,4],[7,2],[7,5],[7,7],[7,8],[7,11],[7,6],[7,5],[7,7],[7,12],[33,1],[33,1],[18,8],[18,7],[19,1],[19,2],[19,2],[19,3],[19,3],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[10,4],[21,5],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[67,2],[67,1],[45,4],[42,1],[42,3],[42,4],[42,2],[42,3],[42,3],[42,1],[42,1],[42,1],[42,1],[76,3],[76,4],[76,1],[78,1],[38,3],[38,1],[71,3],[71,1],[77,3],[77,1],[34,7],[34,2],[29,2],[29,2],[44,3],[44,1],[72,3],[72,1],[83,3],[83,3],[26,3],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 3: case 11: case 13: case 17: case 79:
this.$ =
 [$$[$0]];
break;
case 5:
this.$ = ["semicolon",$$[$0-1]]
break;
case 6:
this.$ = ["initialize_var"].concat($$[$0]);
break;
case 7:
this.$ = ["lexically_scoped_var"].concat($$[$0]);
break;
case 9:
this.$ = [["lexically_scoped_vars",$$[$0-2],$$[$0]]]
break;
case 10: case 16:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 12: case 90:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 14:
this.$ = ["class_statements",$$[$0]]
break;
case 15:
this.$ = ["statements",$$[$0]]
break;
case 18:
this.$ = ["if",$$[$0-1],["statements",["semicolon",$$[$0-3]]]];
break;
case 19:
this.$ = ["unless",$$[$0-1],["statements",[["semicolon",$$[$0-3]]]]];
break;
case 20: case 95:
this.$ = ["semicolon",$$[$0-1]];
break;
case 21:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ["do_while",$$[$0-5],$$[$0-2]];
break;
case 23:
this.$ = ["foreach","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 24:
this.$ = ["for",$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 25:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 26:
this.$ = ["if",$$[$0-2],$$[$0]];
break;
case 27:
this.$ = ["unless",$$[$0-4],$$[$0-1]];
break;
case 28:
this.$ = ["function","public","Object",$$[$0-10],$$[$0-6],$$[$0-1]];
break;
case 31:
this.$ = ["static_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 32:
this.$ = ["instance_method","public","Object",$$[$0-6],$$[$0-4],$$[$0-1]];
break;
case 34:
this.$ = ["return",$$[$0]];
break;
case 35:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 36: case 37:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 38: case 39:
this.$ = [$$[$0],$$[$0-1]];
break;
case 40: case 41: case 42: case 43: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 44:
this.$ = ["Object",$$[$0-2],$$[$0]];
break;
case 45:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 59:
this.$ = ["-",$$[$0]];
break;
case 61:
this.$ = ["!", [".",$$[$0]]];
break;
case 63:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 65:
this.$ = ["function_call",$$[$0-2],[]];
break;
case 66:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 67:
this.$ = ["initializer_list_or_parentheses",[]];
break;
case 68:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 69:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 70: case 71: case 72:
this.$ = yytext;
break;
case 74:
this.$ = [$$[$0-2],"[]"];
break;
case 75:
this.$ = [$$[$0-3],$$[$0-1]]
break;
case 77:
this.$ = ["Object", $$[$0]];
break;
case 78: case 80: case 82: case 88:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 81: case 83: case 89: case 91:
this.$ = [$$[$0]];
break;
case 84:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 85:
this.$ = ["else",$$[$0]];
break;
case 86: case 87:
this.$ = $$[$0];
break;
case 92:
this.$ = [$$[$0-2],$$[$0]]
break;
case 93:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 94:
this.$= $$[$0-1];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:14,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{1:[3]},{5:[1,27],6:28,7:4,8:5,10:14,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{9:[1,29]},{9:[1,32],20:[1,30],22:[1,31]},{24:[1,33]},{19:36,24:$V3,26:34,29:19,30:$Vh,36:$V8,37:$Vi,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{29:38,81:$Ve,82:$Vf},{24:[1,39]},{24:[1,40]},{24:[1,41]},{36:[1,42]},o($Vj,[2,6]),o($Vk,[2,33]),{21:43,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{29:51,44:50,81:$Ve,82:$Vf},o($Vk,$Vn,{39:[1,52]}),o($Vk,$Vo,{39:[1,53],46:[1,54],47:[1,55],48:[1,56],49:[1,57],50:[1,58],51:[1,59],69:$Vp}),{24:$Vq},{21:66,24:$V3,25:[1,62],29:49,36:[1,68],42:47,45:48,63:$Vl,67:45,68:$Vm,71:64,72:63,73:$Vb,74:[1,67],75:$Vd,81:$Ve,82:$Vf,83:65},o($Vr,[2,70]),o($Vr,$Vs),o($Vr,[2,73]),{36:[1,69]},{36:[1,70]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),{21:71,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:72,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vt,[2,20]),{21:73,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{23:[1,74]},{7:79,10:81,11:80,12:76,13:77,14:78,17:75,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{9:[1,82]},{29:83,44:50,81:$Ve,82:$Vf},{24:[1,84]},{8:86,10:14,19:87,24:$V3,29:19,33:85,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:88,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:89,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{30:[1,90]},o($Vk,[2,34],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),{21:105,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vr,[2,60]),{24:$V3,29:49,36:$V8,42:106,45:48,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vr,[2,62]),o($Vr,$Vn),o($Vr,$Vo,{69:$Vp}),o($Vk,[2,35]),o($Vk,$VI,{39:[1,107],79:$VJ}),{21:109,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:110,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vk,[2,38]),o($Vk,[2,39]),{21:111,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:112,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:113,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:114,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:115,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:66,24:$V3,25:[1,116],29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,71:117,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vr,[2,67]),{25:[1,118],79:[1,119]},{25:[1,120]},o($VK,[2,91]),{25:[2,81],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,79:[1,121]},o([25,52,54,55,56,57,58,59,60,61,62,63,64,65,66,79],$Vs,{84:$VL}),{24:$Vq,53:$VM},o($VN,[2,86]),o($VN,[2,87]),{9:[1,124],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{9:[1,125],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{25:[1,126],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{24:[1,127]},{31:[1,128]},{31:[2,15]},{31:[2,8]},{9:[1,129]},{7:79,13:130,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,31:[2,11],32:$V6,35:$V7,36:$V8,37:$Vi,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{9:[2,13]},{9:[2,7]},o($VO,[2,95]),o($Vk,$VI,{79:$VJ}),{29:131,81:$Ve,82:$Vf},{9:[1,132]},o($Vj,[2,29]),o($Vj,[2,30]),{25:[1,133],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{25:[1,134],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{37:[1,135]},{21:136,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:137,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:138,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:139,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:140,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:141,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:142,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:143,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:144,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:145,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:146,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:147,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:148,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:149,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vr,[2,59]),o($Vr,[2,61]),{21:150,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{29:83,44:151,81:$Ve,82:$Vf},o($Vk,[2,36],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vk,[2,37],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vk,[2,40],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vk,[2,41],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vk,[2,42],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vk,[2,43],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,70:[1,152]},o($Vr,[2,65]),{25:[1,153]},o($Vr,[2,68]),{36:[1,156],74:[1,155],83:154},o($Vr,[2,69]),{21:66,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,71:157,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:158,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:159,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vt,[2,18]),o($Vt,[2,19]),{19:36,24:$V3,26:160,29:19,30:$Vh,36:$V8,37:$Vi,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{21:161,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($VO,[2,94]),{7:79,10:81,11:163,13:162,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{31:[2,10]},{25:[1,164]},{21:165,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{19:36,24:$V3,26:166,29:19,30:$Vh,36:$V8,37:$Vi,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{30:[1,167]},{24:[1,168]},{52:$Vu,53:[1,169],54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},o($VP,[2,46],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VP,[2,47],{56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VQ,[2,48],{61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VQ,[2,49],{61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VQ,[2,50],{61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VQ,[2,51],{61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VQ,[2,52],{61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VR,[2,53],{64:$VF,65:$VG,66:$VH}),o($VR,[2,54],{64:$VF,65:$VG,66:$VH}),o($VR,[2,55],{64:$VF,65:$VG,66:$VH}),o($Vr,[2,56]),o($Vr,[2,57]),o($Vr,[2,58]),o($Vj,[2,44],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vk,[2,88]),o([9,20,22,25,39,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,79],[2,63]),o($Vr,[2,66]),o($VK,[2,90]),{84:$VL},{53:$VM},{25:[2,80]},o($VK,[2,92],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($VK,[2,93],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vt,[2,21]),{25:[1,170],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{31:[2,9]},{9:[2,12]},{30:[1,171]},{9:[1,172],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},o($Vt,[2,26],{34:173,80:$VS}),{7:79,10:81,11:80,12:76,13:77,14:78,17:175,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{29:178,38:176,78:177,81:$Ve,82:$Vf},{21:179,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{9:[1,180]},{7:79,10:81,11:80,12:76,13:77,14:78,17:181,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{8:86,10:14,19:87,24:$V3,29:19,33:182,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vt,[2,25]),{19:36,20:[1,183],24:$V3,26:184,29:19,30:$Vh,36:$V8,37:$Vi,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{31:[1,185]},{25:[1,186]},{25:[2,79],79:[1,187]},o($VK,[2,77]),o([9,20,22,25,53,70,79],[2,45],{52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH}),o($Vt,[2,22]),{31:[1,188]},{25:[1,189]},{24:[1,190]},o($Vt,[2,85]),o($Vt,[2,27]),{39:[1,191]},{29:178,38:192,78:177,81:$Ve,82:$Vf},o($Vt,[2,23]),{30:[1,193]},{21:194,24:$V3,29:49,36:$V8,42:47,45:48,63:$Vl,67:45,68:$Vm,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{40:[1,195]},{25:[2,78]},{7:79,10:81,11:80,12:76,13:77,14:78,17:196,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{25:[1,197],52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,66:$VH},{9:[1,198]},{31:[1,199]},{19:36,24:$V3,26:200,29:19,30:$Vh,36:$V8,37:$Vi,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},{7:79,10:81,11:80,12:76,13:77,14:78,17:201,19:6,20:$V0,22:$V1,23:$V2,24:$V3,27:$V4,28:$V5,29:19,32:$V6,35:$V7,36:$V8,37:$V9,42:15,43:$Va,45:18,73:$Vb,74:$Vc,75:$Vd,81:$Ve,82:$Vf},o($Vt,[2,24]),{34:202,80:$VS},{31:[1,203]},o($Vt,[2,84]),o($Vt,[2,28])],
defaultActions: {27:[2,1],76:[2,15],77:[2,8],80:[2,13],81:[2,7],130:[2,10],157:[2,80],162:[2,9],163:[2,12],192:[2,78]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and line comments */
break;
case 1:return 73
break;
case 2:return 74
break;
case 3:return "$"
break;
case 4:return "@_"
break;
case 5:return "@"
break;
case 6:return 28
break;
case 7:return "unless"
break;
case 8:return "sub"
break;
case 9:return "class"
break;
case 10:return "public"
break;
case 11:return "extends"
break;
case 12:return "implements"
break;
case 13:return "private"
break;
case 14:return "static"
break;
case 15:return 20
break;
case 16:return 80
break;
case 17:return 43
break;
case 18:return "sin"
break;
case 19:return "tan"
break;
case 20:return "cos"
break;
case 21:return 23
break;
case 22:return 32
break;
case 23:return 37
break;
case 24:return 79
break;
case 25:return 9
break;
case 26:return 62
break;
case 27:return 53
break;
case 28:return 55
break;
case 29:return 54
break;
case 30:return 58
break;
case 31:return 59
break;
case 32:return 75
break;
case 33:return 56
break;
case 34:return 57
break;
case 35:return 84
break;
case 36:return 60
break;
case 37:return 39
break;
case 38:return 66
break;
case 39:return 50
break;
case 40:return 64
break;
case 41:return 51
break;
case 42:return 65
break;
case 43:return 49
break;
case 44:return 47
break;
case 45:return 63
break;
case 46:return 46
break;
case 47:return 48
break;
case 48:return 61
break;
case 49:return '^'
break;
case 50:return 52
break;
case 51:return 30
break;
case 52:return 31
break;
case 53:return 69
break;
case 54:return 70
break;
case 55:return 24
break;
case 56:return 25
break;
case 57:return 'PI'
break;
case 58:return 'E'
break;
case 59:return 36
break;
case 60:return 5
break;
case 61:return 'INVALID'
break;
}
},
rules: [/^(?:(\s+|#+.*\n))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:\$)/,/^(?:@_\b)/,/^(?:@)/,/^(?:foreach\b)/,/^(?:unless\b)/,/^(?:sub\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:private\b)/,/^(?:static\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:return\b)/,/^(?:sin\b)/,/^(?:tan\b)/,/^(?:cos\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:my\b)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?::)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:>)/,/^(?:<>)/,/^(?:<=)/,/^(?:<)/,/^(?:=>)/,/^(?:==)/,/^(?:=)/,/^(?:%)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = perl_parser;
exports.Parser = perl_parser.Parser;
exports.parse = function () { return perl_parser.parse.apply(perl_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}