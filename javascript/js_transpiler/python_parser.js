/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var python_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,15],$V2=[1,6],$V3=[1,10],$V4=[1,11],$V5=[1,13],$V6=[5,10,11,19,26,30,37],$V7=[1,24],$V8=[1,26],$V9=[1,21],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,31],$Ve=[1,32],$Vf=[5,9,10,11,19,26,30,37,74,85],$Vg=[1,46],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[5,9,10,11,14,15,19,26,30,31,36,37,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,63,67,74,78,85],$Vx=[2,53],$Vy=[5,9,10,11,14,15,19,26,30,31,36,37,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,63,67,74,78,85],$Vz=[2,83],$VA=[1,64],$VB=[1,63],$VC=[5,9,10,11,19,26,30,36,37,74,85],$VD=[1,89],$VE=[1,93],$VF=[1,101],$VG=[1,131],$VH=[2,95],$VI=[1,134],$VJ=[67,78],$VK=[1,138],$VL=[1,141],$VM=[14,15],$VN=[1,151],$VO=[1,150],$VP=[5,9,10,11,14,15,19,26,30,31,36,37,43,44,45,46,47,48,49,50,63,67,74,78,85],$VQ=[5,9,10,11,14,15,19,26,30,31,36,37,43,44,45,46,47,48,49,50,51,52,53,63,67,74,78,85],$VR=[5,9,10,11,14,15,19,26,30,31,36,37,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,67,74,78,85],$VS=[14,67],$VT=[14,63,78],$VU=[1,156],$VV=[26,63];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement_":6,"class_statements":7,"class_statement":8,"@staticmethod":9,"def":10,"IDENTIFIER":11,"(":12,"parameters":13,")":14,":":15,"statements":16,"function":17,"if_statement":18,"class":19,"foreach":20,"statement_with_semicolon":21,"types":22,"->":23,"statement":24,"while_loop":25,"if":26,"e":27,"elif_statement":28,"while":29,"for":30,"in":31,"declare_var":32,"=":33,"declare_vars":34,"statement_with_semicolon_":35,";":36,"return":37,"access_array_":38,"+=":39,"-=":40,"*=":41,"/=":42,"or":43,"and":44,"==":45,"<=":46,"<":47,">=":48,">":49,"!=":50,"++":51,"+":52,"-":53,"*":54,"/":55,"mod":56,"**":57,"^":58,"parentheses_expr":59,"access_array":60,"parentheses_expr_":61,"[":62,"]":63,".":64,"function_call":65,"named_parameters":66,",":67,"named_parameter":68,"key_values":69,"key_value":70,"key_values_":71,"key_value_":72,"ternary_operator":73,"else":74,"lambda":75,"exprs":76,"{":77,"}":78,"dict":79,"list_comprehensions":80,"NUMBER":81,"STRING_LITERAL":82,"parameter":83,"args":84,"elif":85,"identifiers":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"@staticmethod",10:"def",11:"IDENTIFIER",12:"(",14:")",15:":",19:"class",23:"->",26:"if",29:"while",30:"for",31:"in",33:"=",36:";",37:"return",39:"+=",40:"-=",41:"*=",42:"/=",43:"or",44:"and",45:"==",46:"<=",47:"<",48:">=",49:">",50:"!=",51:"++",52:"+",53:"-",54:"*",55:"/",56:"mod",57:"**",58:"^",62:"[",63:"]",64:".",67:",",74:"else",75:"lambda",77:"{",78:"}",79:"dict",81:"NUMBER",82:"STRING_LITERAL",85:"elif"},
productions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[8,8],[6,1],[6,1],[6,4],[6,1],[6,1],[17,6],[17,7],[22,3],[22,1],[24,1],[24,1],[24,1],[24,1],[24,1],[18,5],[25,4],[20,6],[32,3],[34,2],[34,1],[21,2],[21,1],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,1],[60,4],[38,4],[59,1],[59,3],[59,1],[66,3],[66,1],[68,3],[69,3],[69,1],[70,3],[71,3],[71,1],[72,3],[73,5],[73,5],[61,3],[61,6],[61,2],[61,3],[61,2],[61,3],[61,4],[61,3],[61,5],[61,7],[61,9],[61,1],[61,1],[61,1],[61,3],[61,1],[65,3],[65,4],[65,4],[80,5],[80,1],[83,1],[13,3],[13,1],[76,3],[76,1],[84,2],[84,1],[28,5],[28,3],[86,3],[86,1],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]]
break;
case 2: case 4: case 25: case 96:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 5: case 15: case 26: case 93:
this.$ =
 [$$[$0]];
break;
case 6:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0]];
break;
case 9:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0]];
break;
case 11: case 19:
this.$ = ["semicolon",$$[$0]];
break;
case 12:
this.$ = ["function","public","Object",$$[$0-4],[],$$[$0]];
break;
case 13:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0]];
break;
case 14: case 92: case 94: case 100:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 21:
this.$ = ["if",$$[$0-3],$$[$0-1],$$[$0]];
break;
case 22:
this.$ = ["while",$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ["foreach","Object",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ["lexically_scoped_var","Object",$$[$0-2],$$[$0]]
break;
case 27:
this.$=$$[$0-1];
break;
case 29:
this.$ = ["return",$$[$0]];
break;
case 30: case 31:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 32: case 33: case 34: case 35: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 50:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 36:
this.$ = ["||",$$[$0-2],$$[$0]];
break;
case 37:
this.$ = ["&&",$$[$0-2],$$[$0]];
break;
case 49:
this.$ = ["%",$$[$0-2],$$[$0]];
break;
case 51:
this.$ = ["**",$$[$0-2],$$[$0]];
break;
case 52:
this.$ = ["-",$$[$0]];
break;
case 53:
this.$ = $$[$0];
break;
case 54: case 55:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 57:
this.$= [".",[$$[$0-2],$$[$0]]];
break;
case 59: case 62: case 65:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 60: case 63: case 66: case 95: case 97: case 101:
this.$ = [$$[$0]];
break;
case 61:
this.$ = ["named_parameter",$$[$0-2],$$[$0]]
break;
case 64:
this.$ = [$$[$0-2],$$[$0]]
break;
case 67:
this.$ = ["\""+$$[$0-2]+"\"",$$[$0]]
break;
case 68: case 69:
this.$ = ["ternary_operator",$$[$0-2],$$[$0-4],$$[$0]];
break;
case 70:
this.$ = $$[$0-1];
break;
case 71:
this.$ = ["anonymous_function","Object",$$[$0-3],["statements",[["semicolon",["return",$$[$0-1]]]]]];
break;
case 72:
this.$ = ["initializer_list","Object",[]];
break;
case 73:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 74:
this.$ = ["associative_array","Object","Object",[]];
break;
case 75: case 76:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 77:
this.$ = ["initialize_set","Object",$$[$0-1]];
break;
case 78:
this.$ = ["in",$$[$0-3],$$[$0-1]];
break;
case 79:
this.$ = ["list_comprehension",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 80:
this.$ = ["list_comprehension",$$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 82: case 85:
this.$ = yytext;
break;
case 84:
this.$ = ["parentheses",$$[$0-1]]
break;
case 86:
this.$= ["function_call",$$[$0-2],[]];
break;
case 87:
this.$ = ["function_call",$$[$0-3],$$[$0-1]];
break;
case 88:
this.$= ["function_call",$$[$0-3],$$[$0-1]];
break;
case 89:
this.$ = ["list_comprehensions",$$[$0-4],$$[$0-2],$$[$0]];
break;
case 91:
this.$ = ["Object",$$[$0]];
break;
case 98:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 99:
this.$ = ["else",$$[$0]];
break;
case 102:
this.$ = ["statements",[$$[$0]]]
break;
}
},
table: [{3:1,4:2,6:3,10:$V0,11:$V1,17:4,18:5,19:$V2,20:7,21:8,26:$V3,30:$V4,35:12,37:$V5,38:14},{1:[3]},{5:[1,16]},{4:17,5:[2,3],6:3,10:$V0,11:$V1,17:4,18:5,19:$V2,20:7,21:8,26:$V3,30:$V4,35:12,37:$V5,38:14},o($V6,[2,7]),o($V6,[2,8]),{11:[1,18]},o($V6,[2,10]),o($V6,[2,11]),{11:[1,19]},{11:$V7,12:$V8,27:20,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:[1,33]},o($Vf,[2,28],{36:[1,34]}),{11:$V7,12:$V8,27:35,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{33:[1,36]},{33:[1,37],39:[1,38],40:[1,39],41:[1,40],42:[1,41],62:[1,42]},{1:[2,1]},{5:[2,2]},{15:[1,43]},{12:[1,44]},{15:[1,45],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{11:$V7,12:$V8,27:62,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vw,$Vx),o($Vw,[2,56]),o($Vy,$Vz,{12:$VA,64:$VB}),o($Vw,[2,58],{62:[1,65]}),{11:$V7,12:$V8,27:69,53:$V9,59:68,60:23,61:25,62:$Va,65:30,73:66,75:[1,67],77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:72,53:$V9,59:22,60:23,61:25,62:$Va,63:[1,70],65:30,76:71,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:77,53:$V9,59:22,60:23,61:25,62:$Va,65:30,69:74,70:76,76:75,77:$Vb,78:[1,73],79:$Vc,81:$Vd,82:$Ve},{12:[1,78]},o($Vy,[2,81]),o($Vy,[2,82]),o($Vy,[2,85]),{31:[1,79]},o($Vf,[2,27]),o($VC,[2,29],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),{11:$V7,12:$V8,27:80,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:81,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:82,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:83,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:84,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:85,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:86,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{7:87,8:88,9:$VD},{11:$VE,13:91,14:[1,90],83:92},{10:$V0,11:$V1,16:94,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},{11:$V7,12:$V8,27:102,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:103,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:104,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:105,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:106,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:107,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:108,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:109,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:110,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:111,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:112,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:113,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:114,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:115,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:116,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:117,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vw,[2,52]),{11:[1,119],65:118},{11:[1,125],12:$V8,14:[1,120],27:124,53:$V9,59:22,60:23,61:25,62:$Va,65:30,66:121,68:123,76:122,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:126,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{14:[1,127]},{11:$VE,13:128,83:92},o([14,26,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],$Vx,{31:[1,129]}),{14:[1,130],26:$VG,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vy,[2,72]),{63:[1,132]},{30:[1,133],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,63:$VH,67:$VI},o($Vy,[2,74]),{67:[1,136],78:[1,135]},{78:[1,137]},o($VJ,[2,63]),{15:$VK,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,67:$VI,78:$VH},{11:$VL,71:139,72:140},{11:$V7,12:$V8,27:142,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($VC,[2,30],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VC,[2,31],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VC,[2,32],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VC,[2,33],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VC,[2,34],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VC,[2,35],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,63:[1,143]},o($V6,[2,9]),o($V6,[2,5],{8:88,7:144,9:$VD}),{10:[1,145]},{15:[1,146]},{14:[1,147]},o($VM,[2,93],{67:[1,148]}),o([14,15,67],[2,91]),{28:149,74:$VN,85:$VO},o($Vf,[2,102]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),{11:$V7,12:$V8,27:152,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o([5,9,10,11,14,15,19,26,30,31,36,37,43,63,67,74,78,85],[2,36],{44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o([5,9,10,11,14,15,19,26,30,31,36,37,43,44,63,67,74,78,85],[2,37],{45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VP,[2,38],{51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VP,[2,39],{51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VP,[2,40],{51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VP,[2,41],{51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VP,[2,42],{51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VP,[2,43],{51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VQ,[2,44],{54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VQ,[2,45],{54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VQ,[2,46],{54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VR,[2,47],{57:$Vu,58:$Vv}),o($VR,[2,48],{57:$Vu,58:$Vv}),o($VR,[2,49],{57:$Vu,58:$Vv}),o($Vw,[2,50]),o($Vw,[2,51]),o($Vw,[2,57]),{12:$VA},o($Vy,[2,86]),{14:[1,153],67:[1,154]},{14:[1,155]},o($VS,[2,60]),o($VT,$VH,{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,67:$VI}),o([14,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,67],$Vz,{12:$VA,33:$VU,64:$VB}),{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,63:[1,157]},o($Vy,[2,70]),{15:[1,158]},{11:$V7,12:$V8,59:159,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vy,[2,84]),{11:$V7,12:$V8,27:160,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vy,[2,73]),{11:$V7,12:$V8,27:161,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:124,53:$V9,59:22,60:23,61:25,62:$Va,65:30,76:162,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vy,[2,75]),{11:$V7,12:$V8,27:164,53:$V9,59:22,60:23,61:25,62:$Va,65:30,70:163,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vy,[2,77]),{11:$V7,12:$V8,27:165,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{14:[1,166],67:[1,167]},o($VS,[2,66]),{33:[1,168]},{15:[1,169],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{33:[2,55]},o($V6,[2,4]),{11:[1,170]},{10:$V0,11:$V1,16:171,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},{15:[1,172]},{11:$VE,13:173,83:92},o($Vf,[2,21]),{11:$V7,12:$V8,27:174,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{15:[1,175]},{15:[1,176],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vy,[2,87]),{11:[1,178],68:177},o($Vy,[2,88]),{11:$V7,12:$V8,27:179,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},o($Vw,[2,54]),{11:$V7,12:$V8,27:180,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{14:[1,181]},{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,74:[1,182]},{31:[1,183],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($VT,[2,94]),o($VJ,[2,62]),{15:$VK,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($VJ,[2,64],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($Vy,[2,76]),{11:$VL,72:184},{11:$V7,12:$V8,27:185,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{10:$V0,11:$V1,16:186,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},{12:[1,187]},o($Vf,[2,12]),{10:$V0,11:$V1,16:188,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},o($VM,[2,92]),{15:[1,189],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{10:$V0,11:$V1,16:190,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},{10:$V0,11:$V1,16:191,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},o($VS,[2,59]),{33:$VU},o($VS,[2,61],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),{14:[1,192],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},o($Vy,[2,78]),{11:$V7,12:$V8,27:193,53:$V9,59:22,60:23,61:25,62:$Va,65:30,73:194,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:196,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,80:195,81:$Vd,82:$Ve},o($VS,[2,65]),o($VS,[2,67],{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($Vf,[2,23]),{11:$VE,13:197,83:92},o($Vf,[2,13]),{10:$V0,11:$V1,16:198,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},o($Vf,[2,99]),o($Vf,[2,22]),o($Vy,[2,71]),{14:[2,68],26:$VG,43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{14:[2,69]},{26:[1,200],63:[1,199]},o($VV,[2,90],{30:[1,201],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),{14:[1,202]},{28:203,74:$VN,85:$VO},o($Vy,[2,79]),{11:$V7,12:$V8,27:204,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{11:$V7,12:$V8,27:205,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,81:$Vd,82:$Ve},{15:[1,206]},o($Vf,[2,98]),{43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,63:[1,207]},{31:[1,208],43:$Vg,44:$Vh,45:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv},{10:$V0,11:$V1,16:209,17:100,18:96,20:98,21:99,24:95,25:97,26:$V3,29:$VF,30:$V4,35:12,37:$V5,38:14},o($Vy,[2,80]),{11:$V7,12:$V8,27:196,53:$V9,59:22,60:23,61:25,62:$Va,65:30,77:$Vb,79:$Vc,80:210,81:$Vd,82:$Ve},o([5,9,10,11,19,26,30,37],[2,6]),o($VV,[2,89])],
defaultActions: {16:[2,1],17:[2,2],143:[2,55],194:[2,69]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 81
break;
case 2:return 82
break;
case 3:return 9
break;
case 4:return 19
break;
case 5:return "def"
break;
case 6:return "dict"
break;
case 7:return "if"
break;
case 8:return 'of'
break;
case 9:return 30
break;
case 10:return "in"
break;
case 11:return "else"
break;
case 12:return "elif"
break;
case 13:return "while"
break;
case 14:return "return"
break;
case 15:return "lambda"
break;
case 16:return 67
break;
case 17:return 64
break;
case 18:return 15
break;
case 19:return 36
break;
case 20:return 44
break;
case 21:return 43
break;
case 22:return 39
break;
case 23:return 40
break;
case 24:return 41
break;
case 25:return 42
break;
case 26:return 48
break;
case 27:return '>>'
break;
case 28:return 49
break;
case 29:return 46
break;
case 30:return '<<'
break;
case 31:return 47
break;
case 32:return 50
break;
case 33:return 45
break;
case 34:return 33
break;
case 35:return 57
break;
case 36:return 41
break;
case 37:return 54
break;
case 38:return 55
break;
case 39:return '%'
break;
case 40:return 53
break;
case 41:return 52
break;
case 42:return 58
break;
case 43:return 77
break;
case 44:return 78
break;
case 45:return 62
break;
case 46:return 63
break;
case 47:return 12
break;
case 48:return 14
break;
case 49:return '_'
break;
case 50:return 11
break;
case 51:return 5
break;
case 52:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:@staticmethod\b)/,/^(?:class\b)/,/^(?:def\b)/,/^(?:dict\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:while\b)/,/^(?:return\b)/,/^(?:lambda\b)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:>=)/,/^(?:>>)/,/^(?:>)/,/^(?:<=)/,/^(?:<<)/,/^(?:<)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:\*\*)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:_\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = python_parser;
exports.Parser = python_parser.Parser;
exports.parse = function () { return python_parser.parse.apply(python_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}