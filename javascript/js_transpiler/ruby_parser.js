/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ruby_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,9],$V2=[1,11],$V3=[1,7],$V4=[1,8],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,18],$V9=[5,12,34,38,84],$Va=[5,9,10,12,14,34,38,41,43,48,49,50,84,86],$Vb=[1,32],$Vc=[1,29],$Vd=[1,25],$Ve=[1,23],$Vf=[1,34],$Vg=[1,27],$Vh=[1,28],$Vi=[1,31],$Vj=[1,33],$Vk=[1,44],$Vl=[5,9,10,12,14,34,38,40,41,43,48,49,50,84,86],$Vm=[1,62],$Vn=[1,64],$Vo=[1,63],$Vp=[1,65],$Vq=[1,61],$Vr=[1,60],$Vs=[1,66],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,59],$Vy=[1,67],$Vz=[5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86],$VA=[2,78],$VB=[5,9,10,12,14,18,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86],$VC=[1,82],$VD=[5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,59,60,62,63,64,70,72,76,81,84,85,86],$VE=[1,86],$VF=[1,87],$VG=[1,91],$VH=[2,114],$VI=[1,105],$VJ=[1,114],$VK=[18,70],$VL=[72,76],$VM=[12,38],$VN=[1,153],$VO=[2,97],$VP=[1,177],$VQ=[1,176],$VR=[5,9,10,12,14,18,21,22,23,24,25,26,27,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86],$VS=[5,9,10,12,14,18,21,22,23,24,25,26,27,28,29,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86],$VT=[18,76],$VU=[12,14];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements":4,"EOF":5,"statements_":6,"statement":7,"class_":8,"class":9,"IDENTIFIER":10,"class_statements":11,"end":12,"class_statement":13,"def":14,"OPERATOR":15,"(":16,"parameters":17,")":18,"self":19,".":20,"<=":21,">=":22,"<":23,">":24,"&&":25,"||":26,"==":27,"+":28,"-":29,"*":30,"/":31,"class_statements_":32,"case_statement":33,"when":34,"e":35,"case_statements_":36,"case_statements":37,"else":38,"statement_with_semicolon":39,";":40,"while":41,"do":42,"case":43,"each":44,"|":45,"if_statement":46,"function_call":47,"yield":48,"return":49,"local":50,"=":51,"identifiers":52,"access_array":53,"+=":54,"/=":55,"*=":56,"-=":57,"dot_expr":58,"?":59,":":60,"parentheses_expr":61,"...":62,"..":63,"!=":64,"not_expr":65,"!":66,"exprs":67,"[":68,"access_arr":69,"]":70,"{":71,"}":72,"key_values":73,"NUMBER":74,"STRING_LITERAL":75,",":76,"key_value":77,"=>":78,"type":79,"parameter":80,"][":81,"types":82,"elif":83,"elsif":84,"then":85,"if":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"class",10:"IDENTIFIER",12:"end",14:"def",16:"(",18:")",19:"self",20:".",21:"<=",22:">=",23:"<",24:">",25:"&&",26:"||",27:"==",28:"+",29:"-",30:"*",31:"/",34:"when",38:"else",40:";",41:"while",42:"do",43:"case",44:"each",45:"|",48:"yield",49:"return",50:"local",51:"=",54:"+=",55:"/=",56:"*=",57:"-=",59:"?",60:":",62:"...",63:"..",64:"!=",66:"!",68:"[",70:"]",71:"{",72:"}",74:"NUMBER",75:"STRING_LITERAL",76:",",78:"=>",81:"][",84:"elsif",85:"then",86:"if"},
productions_: [0,[3,2],[6,2],[6,1],[8,4],[13,7],[13,9],[13,7],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[32,2],[32,1],[11,1],[4,1],[33,3],[36,2],[36,1],[37,3],[37,1],[7,2],[7,1],[7,1],[7,5],[7,4],[7,4],[7,9],[7,1],[7,7],[39,1],[39,2],[39,2],[39,4],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[35,5],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[65,2],[65,1],[47,3],[47,4],[58,3],[58,4],[58,3],[58,1],[53,4],[61,2],[61,3],[61,2],[61,3],[61,3],[61,1],[61,1],[61,1],[61,1],[73,3],[73,1],[77,3],[79,1],[80,1],[80,3],[17,3],[17,1],[17,0],[69,3],[69,1],[67,3],[67,1],[82,3],[82,1],[83,5],[83,4],[83,4],[83,3],[83,2],[46,6],[46,5],[46,5],[46,4],[52,3],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 19: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 20: case 25: case 78: case 96: case 99:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0-1]];
break;
case 5:
this.$ = ["instance_overload_operator","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 21:
this.$ = ["class_statements",$$[$0]]
break;
case 22:
this.$ = ["statements",$$[$0]]
break;
case 23:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 26:
this.$ = $$[$0-2].concat([["default",$$[$0]]])
break;
case 28:
this.$ = ["semicolon",$$[$0-1]];
break;
case 29:
this.$ = ["semicolon",$$[$0]];
break;
case 31:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["while",$$[$0-2],$$[$0-1]];
break;
case 33:
this.$ = ["switch",$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-8],$$[$0-1]];
break;
case 36:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 38:
this.$ = ["yield",$$[$0]];
break;
case 39:
this.$ = ["return",$$[$0]];
break;
case 40:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 42: case 43:
this.$ = ["+=",$$[$0-2],$$[$0]];
break;
case 44: case 45:
this.$ = ["/=",$$[$0-2],$$[$0]];
break;
case 46: case 47:
this.$ = ["*=",$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = ["-=",$$[$0-2],$$[$0]];
break;
case 50: case 51:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 52:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 53:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 54:
this.$ = ["unpack_array",$$[$0]]
break;
case 55:
this.$ = ["exclusive_range",$$[$0-2],$$[$0]]
break;
case 56:
this.$ = ["inclusive_range",$$[$0-2],$$[$0]]
break;
case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 67: case 68:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 66:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 69:
this.$ = ["-",$$[$0]];
break;
case 71:
this.$ = ["!", [".",$$[$0]]];
break;
case 72:
this.$ = [".", $$[$0]];
break;
case 73: case 75:
this.$ = ["function_call",$$[$0-2],[]]
break;
case 74: case 76:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
case 77: case 95: case 98: case 100: case 102: case 113:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 79:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 80:
this.$ = ["initializer_list","Object",[]];
break;
case 81:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 82:
this.$ = ["associative_array","Object",[]];
break;
case 83:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 84:
this.$ = ["parentheses",$$[$0-1]];
break;
case 86: case 87: case 88:
this.$ = yytext;
break;
case 89:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 90: case 101: case 103: case 114:
this.$ = [$$[$0]];
break;
case 91:
this.$ = [$$[$0-2],$$[$0]]
break;
case 93:
this.$ = ["Object", $$[$0]];
break;
case 94:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 97:
this.$ = [];
break;
case 104:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 105:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 106:
this.$ = ["elif",$$[$0-2],$$[$0-1],$$[$0]]
break;
case 107:
this.$ = ["elif",$$[$0-1],$$[$0]]
break;
case 108:
this.$ = ["else",$$[$0]];
break;
case 109:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 110:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 111:
this.$ = ["if",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 112:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},{1:[3]},{5:[1,19]},o($V9,[2,22]),o($V9,[2,3],{7:4,39:5,8:6,46:10,47:12,53:16,6:20,9:$V0,10:$V1,14:$V2,41:$V3,43:$V4,48:$V5,49:$V6,50:$V7,86:$V8}),o($Va,[2,29],{40:[1,21]}),o($Va,[2,30]),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:22,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:36,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{16:[1,43],20:[1,37],51:[1,42],54:[1,38],55:[1,39],56:[1,40],57:[1,41],68:$Vk},o($Va,[2,35]),{10:[1,45]},o($Vl,[2,37]),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:46,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:47,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:[1,48],52:49},{51:[1,54],54:[1,50],55:[1,51],56:[1,52],57:[1,53]},{10:[1,55]},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:56,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{1:[2,1]},o($V9,[2,2]),o($Va,[2,28]),{4:58,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,39:5,41:$V3,42:[1,57],43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vx,64:$Vy,86:$V8},{10:$Vb,16:$Vc,53:30,61:72,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($Vz,$VA,{62:[1,73],63:[1,74]}),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:75,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VB,[2,70]),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:78,53:30,58:35,61:24,65:26,66:$Vf,67:77,68:$Vg,70:[1,76],71:$Vh,74:$Vi,75:$Vj},{72:[1,79],73:80,75:$VC,77:81},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:83,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VD,[2,85]),o($VD,[2,86]),o($VD,[2,87],{68:$Vk}),o($VD,[2,88]),{10:$Vb,16:$Vc,53:30,58:84,61:85,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VB,[2,72],{16:$VE,20:$VF}),{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,33:90,34:$VG,36:89,37:88,59:$Vx,64:$Vy},{10:$Vb,16:$Vc,44:[1,92],53:30,58:93,61:85,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:94,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:95,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:96,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:97,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:98,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,18:[1,99],29:$Vd,30:$Ve,35:78,53:30,58:35,61:24,65:26,66:$Vf,67:100,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,53:30,61:102,68:$Vg,69:101,71:$Vh,74:$Vi,75:$Vj},{16:[1,103]},o($Vl,[2,38],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,39],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,$VH,{51:[1,104],76:$VI}),o($Vl,[2,41]),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:106,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:107,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:108,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:109,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:110,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{11:111,13:113,14:$VJ,32:112},{4:116,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vx,64:$Vy,85:[1,115],86:$V8},{4:117,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},{12:[1,118]},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:119,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:120,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:121,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:122,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:123,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:124,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:125,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:126,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:127,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:128,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:129,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:130,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:131,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VB,[2,54]),{10:$Vb,16:$Vc,53:30,61:132,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,53:30,61:133,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VB,[2,69]),o($VD,[2,80]),{70:[1,134]},o($VK,[2,101],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy,76:[1,135]}),o($VD,[2,82]),{72:[1,136],76:[1,137]},o($VL,[2,90]),{78:[1,138]},{18:[1,139],21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy},o($VB,[2,71],{16:$VE,20:$VF}),o($Vz,$VA),{10:$Vb,16:$Vc,18:[1,140],29:$Vd,30:$Ve,35:78,53:30,58:35,61:24,65:26,66:$Vf,67:141,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$Vb,16:$Vc,53:30,61:142,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{12:[1,143]},{12:[2,27],38:[1,144]},o($VM,[2,25],{33:90,36:145,34:$VG}),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:146,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{42:[1,147]},o($Vl,[2,52],{16:$VE,20:$VF}),o($Vl,[2,43],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,45],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,47],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,49],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,51],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,73]),{18:[1,148]},{70:[1,149]},{70:[2,99],81:[1,150]},{10:$VN,17:151,18:$VO,80:152},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:154,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:[1,156],52:155},o($Vl,[2,42],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,44],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,46],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,48],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,50],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),{12:[1,157]},{12:[2,21]},{12:[2,20],13:113,14:$VJ,32:158},{10:[1,161],15:159,19:[1,160],21:[1,162],22:[1,163],23:[1,164],24:[1,165],25:[1,166],26:[1,167],27:[1,168],28:[1,169],29:[1,170],30:[1,171],31:[1,172]},{4:173,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},{12:[1,175],38:$VP,83:174,84:$VQ},{12:[1,178]},o($Va,[2,32]),{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,60:[1,179],64:$Vy},o([5,9,10,12,14,18,26,34,38,40,41,42,43,48,49,50,59,60,70,72,76,84,85,86],[2,57],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,64:$Vy}),o([5,9,10,12,14,18,25,26,34,38,40,41,42,43,48,49,50,59,60,70,72,76,84,85,86],[2,58],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,64:$Vy}),o($VR,[2,59],{28:$Vt,29:$Vu,30:$Vv,31:$Vw}),o($VR,[2,60],{28:$Vt,29:$Vu,30:$Vv,31:$Vw}),o($VR,[2,61],{28:$Vt,29:$Vu,30:$Vv,31:$Vw}),o($VR,[2,62],{28:$Vt,29:$Vu,30:$Vv,31:$Vw}),o($VR,[2,63],{28:$Vt,29:$Vu,30:$Vv,31:$Vw}),o($VR,[2,64],{28:$Vt,29:$Vu,30:$Vv,31:$Vw}),o($VS,[2,65],{30:$Vv,31:$Vw}),o($VS,[2,66],{30:$Vv,31:$Vw}),o($VB,[2,67]),o($VB,[2,68]),o($VB,[2,55]),o($VB,[2,56]),o($VD,[2,81]),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:78,53:30,58:35,61:24,65:26,66:$Vf,67:180,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VD,[2,83]),{75:$VC,77:181},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:182,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VD,[2,84]),o($Vz,[2,75]),{18:[1,183]},o($Vz,[2,77]),o($Va,[2,33]),{4:184,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},o($VM,[2,24]),{4:185,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vx,64:$Vy,86:$V8},{45:[1,186]},o($Vl,[2,74]),o([5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,51,54,55,56,57,59,60,62,63,64,70,72,76,81,84,85,86],[2,79]),{10:$Vb,16:$Vc,53:30,61:102,68:$Vg,69:187,71:$Vh,74:$Vi,75:$Vj},{18:[1,188]},{18:[2,96],76:[1,189]},o($VT,[2,93],{60:[1,190]}),o($Vl,[2,40],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vl,[2,113]),o($Vl,$VH,{76:$VI}),o($Va,[2,4]),{12:[2,19]},{16:[1,191]},{20:[1,192]},{16:[1,193]},{16:[2,8]},{16:[2,9]},{16:[2,10]},{16:[2,11]},{16:[2,12]},{16:[2,13]},{16:[2,14]},{16:[2,15]},{16:[2,16]},{16:[2,17]},{16:[2,18]},{12:[1,195],38:$VP,83:194,84:$VQ},{12:[1,196]},o($Va,[2,112]),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:197,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{4:198,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},o($Va,[2,31]),{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:199,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},o($VK,[2,100]),o($VL,[2,89]),o($VL,[2,91],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),o($Vz,[2,76]),{12:[2,26]},o([12,34,38],[2,23]),{10:[1,200]},{70:[2,98]},{4:201,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},{10:$VN,17:202,18:$VO,80:152},{10:$Vb,16:$Vc,29:$Vd,30:$Ve,35:203,53:30,58:35,61:24,65:26,66:$Vf,68:$Vg,71:$Vh,74:$Vi,75:$Vj},{10:$VN,17:204,18:$VO,80:152},{10:[1,205]},{10:$VN,17:206,18:$VO,80:152},{12:[1,207]},o($Va,[2,110]),o($Va,[2,111]),{4:209,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vx,64:$Vy,85:[1,208],86:$V8},{12:[2,108]},o([5,9,10,12,14,18,34,38,40,41,42,43,48,49,50,60,70,72,76,84,85,86],[2,53],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),{45:[1,210]},{12:[1,211]},{18:[2,95]},o($VT,[2,94],{21:$Vm,22:$Vn,23:$Vo,24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,59:$Vx,64:$Vy}),{18:[1,212]},{16:[1,213]},{18:[1,214]},o($Va,[2,109]),{4:215,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},{12:[2,107],38:$VP,83:216,84:$VQ},{4:217,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},o($Va,[2,36]),{4:218,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},{10:$VN,17:219,18:$VO,80:152},{4:220,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},{12:[2,105],38:$VP,83:221,84:$VQ},{12:[2,106]},{12:[1,222]},{12:[1,223]},{18:[1,224]},{12:[1,225]},{12:[2,104]},o($Va,[2,34]),o($VU,[2,5]),{4:226,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8},o($VU,[2,7]),{12:[1,227]},o($VU,[2,6])],
defaultActions: {19:[2,1],112:[2,21],158:[2,19],162:[2,8],163:[2,9],164:[2,10],165:[2,11],166:[2,12],167:[2,13],168:[2,14],169:[2,15],170:[2,16],171:[2,17],172:[2,18],184:[2,26],187:[2,98],198:[2,108],202:[2,95],216:[2,106],221:[2,104]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "$"
break;
case 2:return "def"
break;
case 3:return "self"
break;
case 4:return "end"
break;
case 5:return "each"
break;
case 6:return 84
break;
case 7:return 86
break;
case 8:return 38
break;
case 9:return 34
break;
case 10:return 43
break;
case 11:return 9
break;
case 12:return 49
break;
case 13:return 48
break;
case 14:return 41
break;
case 15:return "then"
break;
case 16:return 'for'
break;
case 17:return 42
break;
case 18:return 76
break;
case 19:return 62
break;
case 20:return 63
break;
case 21:return 20
break;
case 22:return 60
break;
case 23:return 40
break;
case 24:return 25
break;
case 25:return 26
break;
case 26:return "|"
break;
case 27:return 64
break;
case 28:return 66
break;
case 29:return 78
break;
case 30:return 22
break;
case 31:return 24
break;
case 32:return 21
break;
case 33:return 23
break;
case 34:return 27
break;
case 35:return 51
break;
case 36:return 56
break;
case 37:return 30
break;
case 38:return 31
break;
case 39:return 57
break;
case 40:return 29
break;
case 41:return 54
break;
case 42:return 28
break;
case 43:return '^'
break;
case 44:return 59
break;
case 45:return 71
break;
case 46:return 72
break;
case 47:return 81
break;
case 48:return 68
break;
case 49:return 70
break;
case 50:return 16
break;
case 51:return 18
break;
case 52:return 10
break;
case 53:return 74
break;
case 54:return 75
break;
case 55:return 5
break;
case 56:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\$)/,/^(?:def\b)/,/^(?:self\b)/,/^(?:end\b)/,/^(?:each\b)/,/^(?:elsif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:when\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:then\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:,)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ruby_parser;
exports.Parser = ruby_parser.Parser;
exports.parse = function () { return ruby_parser.parse.apply(ruby_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}