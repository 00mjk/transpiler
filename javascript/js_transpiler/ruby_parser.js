/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ruby_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,8],$V2=[1,10],$V3=[1,7],$V4=[1,12],$V5=[1,13],$V6=[1,16],$V7=[5,12,74,77],$V8=[5,9,10,12,14,35,42,43,74,77,78],$V9=[1,31],$Va=[1,29],$Vb=[1,21],$Vc=[1,23],$Vd=[1,27],$Ve=[1,28],$Vf=[1,30],$Vg=[1,32],$Vh=[1,40],$Vi=[5,9,10,12,14,34,35,42,43,74,77,78],$Vj=[1,56],$Vk=[1,58],$Vl=[1,57],$Vm=[1,59],$Vn=[1,55],$Vo=[1,54],$Vp=[1,60],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,61],$Vv=[5,9,10,12,14,18,21,22,23,24,25,26,27,28,29,30,31,34,35,37,42,43,52,59,61,65,74,75,77,78],$Vw=[1,68],$Vx=[1,69],$Vy=[5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,42,43,52,59,61,65,74,75,77,78],$Vz=[5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,42,43,52,59,61,65,71,74,75,77,78],$VA=[1,76],$VB=[2,104],$VC=[1,91],$VD=[1,100],$VE=[18,59],$VF=[61,65],$VG=[1,132],$VH=[2,86],$VI=[1,155],$VJ=[1,157],$VK=[5,9,10,12,14,18,21,22,23,24,25,26,27,34,35,37,42,43,52,59,61,65,74,75,77,78],$VL=[5,9,10,12,14,18,21,22,23,24,25,26,27,28,29,34,35,37,42,43,52,59,61,65,74,75,77,78],$VM=[18,65],$VN=[12,14];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements":4,"EOF":5,"statements_":6,"statement":7,"class_":8,"class":9,"IDENTIFIER":10,"class_statements":11,"end":12,"class_statement":13,"def":14,"OPERATOR":15,"(":16,"parameters":17,")":18,"self":19,".":20,"<=":21,">=":22,"<":23,">":24,"&&":25,"||":26,"==":27,"+":28,"-":29,"*":30,"/":31,"class_statements_":32,"statement_with_semicolon":33,";":34,"while":35,"e":36,"do":37,"each":38,"|":39,"if_statement":40,"function_call":41,"return":42,"local":43,"=":44,"identifiers":45,"access_array":46,"+=":47,"/=":48,"*=":49,"-=":50,"dot_expr":51,"!=":52,"not_expr":53,"!":54,"exprs":55,"parentheses_expr":56,"[":57,"access_arr":58,"]":59,"{":60,"}":61,"key_values":62,"NUMBER":63,"STRING_LITERAL":64,",":65,"key_value":66,"=>":67,"type":68,"parameter":69,":":70,"][":71,"types":72,"elif":73,"elsif":74,"then":75,"else_statement":76,"else":77,"if":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"class",10:"IDENTIFIER",12:"end",14:"def",16:"(",18:")",19:"self",20:".",21:"<=",22:">=",23:"<",24:">",25:"&&",26:"||",27:"==",28:"+",29:"-",30:"*",31:"/",34:";",35:"while",37:"do",38:"each",39:"|",42:"return",43:"local",44:"=",47:"+=",48:"/=",49:"*=",50:"-=",52:"!=",54:"!",57:"[",59:"]",60:"{",61:"}",63:"NUMBER",64:"STRING_LITERAL",65:",",67:"=>",70:":",71:"][",74:"elsif",75:"then",77:"else",78:"if"},
productions_: [0,[3,2],[6,2],[6,1],[8,4],[13,7],[13,9],[13,7],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[32,2],[32,1],[11,1],[4,1],[7,2],[7,1],[7,1],[7,5],[7,4],[7,9],[7,1],[7,7],[33,1],[33,2],[33,4],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,1],[53,2],[53,1],[41,3],[41,4],[51,3],[51,4],[51,3],[51,1],[46,4],[56,1],[56,2],[56,3],[56,2],[56,3],[56,3],[56,1],[56,1],[56,1],[62,3],[62,1],[66,3],[68,1],[69,1],[69,3],[17,3],[17,1],[17,0],[58,3],[58,1],[55,3],[55,1],[72,3],[72,1],[73,5],[73,4],[73,4],[73,3],[73,1],[76,2],[40,6],[40,5],[40,5],[40,4],[45,3],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 19:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 20: case 67: case 85: case 88:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0-1]];
break;
case 5:
this.$ = ["instance_overload_operator","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 21:
this.$ = ["class_statements",$$[$0]]
break;
case 22:
this.$ = ["statements",$$[$0]]
break;
case 23:
this.$ = ["semicolon",$$[$0-1]];
break;
case 24:
this.$ = ["semicolon",$$[$0]];
break;
case 26:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 27:
this.$ = ["while",$$[$0-2],$$[$0-1]];
break;
case 28:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-8],$$[$0-1]];
break;
case 30:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["return",$$[$0]];
break;
case 33:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 34:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 35: case 36:
this.$ = ["+=",$$[$0-2],$$[$0]];
break;
case 37: case 38:
this.$ = ["/=",$$[$0-2],$$[$0]];
break;
case 39: case 40:
this.$ = ["*=",$$[$0-2],$$[$0]];
break;
case 41: case 42:
this.$ = ["-=",$$[$0-2],$$[$0]];
break;
case 43: case 44:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 45:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 56: case 57:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 55:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 58:
this.$ = ["-",$$[$0]];
break;
case 60:
this.$ = ["!", [".",$$[$0]]];
break;
case 61:
this.$ = [".", $$[$0]];
break;
case 62: case 64:
this.$ = ["function_call",$$[$0-2],[]]
break;
case 63: case 65:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
case 66: case 84: case 87: case 89: case 91: case 103:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 68:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 70:
this.$ = ["initializer_list","Object",[]];
break;
case 71:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 72:
this.$ = ["associative_array","Object",[]];
break;
case 73:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 74:
this.$ = ["parentheses",$$[$0-1]];
break;
case 75: case 76: case 77:
this.$ = yytext;
break;
case 78:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 79: case 90: case 92: case 104:
this.$ = [$$[$0]];
break;
case 80:
this.$ = [$$[$0-2],$$[$0]]
break;
case 82:
this.$ = ["Object", $$[$0]];
break;
case 83:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 86:
this.$ = [];
break;
case 93:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 94:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 95:
this.$ = ["elif",$$[$0-2],$$[$0-1],$$[$0]]
break;
case 96:
this.$ = ["elif",$$[$0-1],$$[$0]]
break;
case 98:
this.$ = ["else",$$[$0]];
break;
case 99:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 100:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 101:
this.$ = ["if",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 102:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},{1:[3]},{5:[1,17]},o($V7,[2,22]),o($V7,[2,3],{7:4,33:5,8:6,40:9,41:11,46:14,6:18,9:$V0,10:$V1,14:$V2,35:$V3,42:$V4,43:$V5,78:$V6}),o($V8,[2,24],{34:[1,19]}),o($V8,[2,25]),{10:$V9,16:$Va,29:$Vb,36:20,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{16:[1,39],20:[1,33],44:[1,38],47:[1,34],48:[1,35],49:[1,36],50:[1,37],57:$Vh},o($V8,[2,29]),{10:[1,41]},o($Vi,[2,31]),{10:$V9,16:$Va,29:$Vb,36:42,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:[1,43],45:44},{44:[1,49],47:[1,45],48:[1,46],49:[1,47],50:[1,48]},{10:[1,50]},{10:$V9,16:$Va,29:$Vb,36:51,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{1:[2,1]},o($V7,[2,2]),o($V8,[2,23]),{4:53,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,33:5,35:$V3,37:[1,52],40:9,41:11,42:$V4,43:$V5,46:14,52:$Vu,78:$V6},{10:$V9,16:$Va,29:$Vb,36:66,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},o($Vv,[2,59]),{10:$V9,16:$Va,46:26,51:67,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},o($Vv,[2,61],{16:$Vw,20:$Vx}),o($Vy,[2,67]),o($Vz,[2,69]),{10:$V9,16:$Va,29:$Vb,36:72,46:26,51:24,53:22,54:$Vc,55:71,56:25,57:$Vd,59:[1,70],60:$Ve,63:$Vf,64:$Vg},{61:[1,73],62:74,64:$VA,66:75},{10:$V9,16:$Va,29:$Vb,36:77,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},o($Vz,[2,75]),o($Vz,[2,76],{57:$Vh}),o($Vz,[2,77]),{10:$V9,16:$Va,38:[1,78],46:26,51:79,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:80,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:81,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:82,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:83,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:84,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,18:[1,85],29:$Vb,36:72,46:26,51:24,53:22,54:$Vc,55:86,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,46:26,56:88,57:$Vd,58:87,60:$Ve,63:$Vf,64:$Vg},{16:[1,89]},o($Vi,[2,32],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,$VB,{44:[1,90],65:$VC}),o($Vi,[2,34]),{10:$V9,16:$Va,29:$Vb,36:92,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:93,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:94,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:95,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:96,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{11:97,13:99,14:$VD,32:98},{4:102,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,52:$Vu,75:[1,101],78:$V6},{4:103,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},{12:[1,104]},{10:$V9,16:$Va,29:$Vb,36:105,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:106,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:107,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:108,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:109,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:110,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:111,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:112,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:113,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:114,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:115,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,29:$Vb,36:116,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},o($Vv,[2,58]),o($Vv,[2,60],{16:$Vw,20:$Vx}),{10:$V9,16:$Va,18:[1,117],29:$Vb,36:72,46:26,51:24,53:22,54:$Vc,55:118,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$V9,16:$Va,46:26,56:119,57:$Vd,60:$Ve,63:$Vf,64:$Vg},o($Vz,[2,70]),{59:[1,120]},o($VE,[2,90],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu,65:[1,121]}),o($Vz,[2,72]),{61:[1,122],65:[1,123]},o($VF,[2,79]),{67:[1,124]},{18:[1,125],21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu},{37:[1,126]},o($Vi,[2,45],{16:$Vw,20:$Vx}),o($Vi,[2,36],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,38],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,40],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,42],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,44],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,62]),{18:[1,127]},{59:[1,128]},{59:[2,88],71:[1,129]},{10:$VG,17:130,18:$VH,69:131},{10:$V9,16:$Va,29:$Vb,36:133,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:[1,135],45:134},o($Vi,[2,35],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,37],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,39],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,41],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,43],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),{12:[1,136]},{12:[2,21]},{12:[2,20],13:99,14:$VD,32:137},{10:[1,140],15:138,19:[1,139],21:[1,141],22:[1,142],23:[1,143],24:[1,144],25:[1,145],26:[1,146],27:[1,147],28:[1,148],29:[1,149],30:[1,150],31:[1,151]},{4:152,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},{12:[1,154],73:153,74:$VI,76:156,77:$VJ},{12:[1,158]},o($V8,[2,27]),o([5,9,10,12,14,18,26,34,35,37,42,43,59,61,65,74,75,77,78],[2,46],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o([5,9,10,12,14,18,25,26,34,35,37,42,43,59,61,65,74,75,77,78],[2,47],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($VK,[2,48],{28:$Vq,29:$Vr,30:$Vs,31:$Vt}),o($VK,[2,49],{28:$Vq,29:$Vr,30:$Vs,31:$Vt}),o($VK,[2,50],{28:$Vq,29:$Vr,30:$Vs,31:$Vt}),o($VK,[2,51],{28:$Vq,29:$Vr,30:$Vs,31:$Vt}),o($VK,[2,52],{28:$Vq,29:$Vr,30:$Vs,31:$Vt}),o($VK,[2,53],{28:$Vq,29:$Vr,30:$Vs,31:$Vt}),o($VL,[2,54],{30:$Vs,31:$Vt}),o($VL,[2,55],{30:$Vs,31:$Vt}),o($Vv,[2,56]),o($Vv,[2,57]),o($Vy,[2,64]),{18:[1,159]},o($Vy,[2,66]),o($Vz,[2,71]),{10:$V9,16:$Va,29:$Vb,36:72,46:26,51:24,53:22,54:$Vc,55:160,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},o($Vz,[2,73]),{64:$VA,66:161},{10:$V9,16:$Va,29:$Vb,36:162,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},o($Vz,[2,74]),{39:[1,163]},o($Vi,[2,63]),o([5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,42,43,44,47,48,49,50,52,59,61,65,71,74,75,77,78],[2,68]),{10:$V9,16:$Va,46:26,56:88,57:$Vd,58:164,60:$Ve,63:$Vf,64:$Vg},{18:[1,165]},{18:[2,85],65:[1,166]},o($VM,[2,82],{70:[1,167]}),o($Vi,[2,33],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),o($Vi,[2,103]),o($Vi,$VB,{65:$VC}),o($V8,[2,4]),{12:[2,19]},{16:[1,168]},{20:[1,169]},{16:[1,170]},{16:[2,8]},{16:[2,9]},{16:[2,10]},{16:[2,11]},{16:[2,12]},{16:[2,13]},{16:[2,14]},{16:[2,15]},{16:[2,16]},{16:[2,17]},{16:[2,18]},{12:[1,172],73:171,74:$VI,76:156,77:$VJ},{12:[1,173]},o($V8,[2,102]),{10:$V9,16:$Va,29:$Vb,36:174,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{12:[2,97]},{4:175,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},o($V8,[2,26]),o($Vy,[2,65]),o($VE,[2,89]),o($VF,[2,78]),o($VF,[2,80],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),{10:[1,176]},{59:[2,87]},{4:177,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},{10:$VG,17:178,18:$VH,69:131},{10:$V9,16:$Va,29:$Vb,36:179,46:26,51:24,53:22,54:$Vc,56:25,57:$Vd,60:$Ve,63:$Vf,64:$Vg},{10:$VG,17:180,18:$VH,69:131},{10:[1,181]},{10:$VG,17:182,18:$VH,69:131},{12:[1,183]},o($V8,[2,100]),o($V8,[2,101]),{4:185,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,52:$Vu,75:[1,184],78:$V6},{12:[2,98]},{39:[1,186]},{12:[1,187]},{18:[2,84]},o($VM,[2,83],{21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,52:$Vu}),{18:[1,188]},{16:[1,189]},{18:[1,190]},o($V8,[2,99]),{4:191,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},{12:[2,96],73:192,74:$VI,76:156,77:$VJ},{4:193,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},o($V8,[2,30]),{4:194,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},{10:$VG,17:195,18:$VH,69:131},{4:196,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},{12:[2,94],73:197,74:$VI,76:156,77:$VJ},{12:[2,95]},{12:[1,198]},{12:[1,199]},{18:[1,200]},{12:[1,201]},{12:[2,93]},o($V8,[2,28]),o($VN,[2,5]),{4:202,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,33:5,35:$V3,40:9,41:11,42:$V4,43:$V5,46:14,78:$V6},o($VN,[2,7]),{12:[1,203]},o($VN,[2,6])],
defaultActions: {17:[2,1],98:[2,21],137:[2,19],141:[2,8],142:[2,9],143:[2,10],144:[2,11],145:[2,12],146:[2,13],147:[2,14],148:[2,15],149:[2,16],150:[2,17],151:[2,18],156:[2,97],164:[2,87],175:[2,98],178:[2,84],192:[2,95],197:[2,93]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "$"
break;
case 2:return "def"
break;
case 3:return "self"
break;
case 4:return "end"
break;
case 5:return "each"
break;
case 6:return 74
break;
case 7:return 78
break;
case 8:return 77
break;
case 9:return 9
break;
case 10:return 42
break;
case 11:return 35
break;
case 12:return "then"
break;
case 13:return 'for'
break;
case 14:return 37
break;
case 15:return 'of'
break;
case 16:return 65
break;
case 17:return 20
break;
case 18:return 70
break;
case 19:return 34
break;
case 20:return 25
break;
case 21:return 26
break;
case 22:return "|"
break;
case 23:return 52
break;
case 24:return 54
break;
case 25:return 67
break;
case 26:return 22
break;
case 27:return 24
break;
case 28:return 21
break;
case 29:return 23
break;
case 30:return 27
break;
case 31:return 44
break;
case 32:return 49
break;
case 33:return 30
break;
case 34:return 31
break;
case 35:return 50
break;
case 36:return 29
break;
case 37:return 47
break;
case 38:return 28
break;
case 39:return '^'
break;
case 40:return 60
break;
case 41:return 61
break;
case 42:return 71
break;
case 43:return 57
break;
case 44:return 59
break;
case 45:return 16
break;
case 46:return 18
break;
case 47:return 10
break;
case 48:return 63
break;
case 49:return 64
break;
case 50:return 5
break;
case 51:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\$)/,/^(?:def\b)/,/^(?:self\b)/,/^(?:end\b)/,/^(?:each\b)/,/^(?:elsif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:then\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:of\b)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ruby_parser;
exports.Parser = ruby_parser.Parser;
exports.parse = function () { return ruby_parser.parse.apply(ruby_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}