/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ruby_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,9],$V2=[1,11],$V3=[1,7],$V4=[1,8],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,18],$V9=[1,19],$Va=[5,12,34,38,84],$Vb=[5,9,10,12,14,34,38,41,43,48,49,50,84,86,87],$Vc=[1,33],$Vd=[1,30],$Ve=[1,26],$Vf=[1,24],$Vg=[1,35],$Vh=[1,28],$Vi=[1,29],$Vj=[1,32],$Vk=[1,34],$Vl=[1,45],$Vm=[5,9,10,12,14,34,38,40,41,43,48,49,50,84,86,87],$Vn=[1,64],$Vo=[1,66],$Vp=[1,65],$Vq=[1,67],$Vr=[1,63],$Vs=[1,62],$Vt=[1,68],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,61],$Vz=[1,69],$VA=[5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86,87],$VB=[2,78],$VC=[5,9,10,12,14,18,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86,87],$VD=[1,84],$VE=[5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,59,60,62,63,64,70,72,76,81,84,85,86,87],$VF=[1,88],$VG=[1,89],$VH=[1,93],$VI=[2,115],$VJ=[1,107],$VK=[1,116],$VL=[18,70],$VM=[72,76],$VN=[12,38],$VO=[1,156],$VP=[2,97],$VQ=[1,181],$VR=[1,180],$VS=[5,9,10,12,14,18,21,22,23,24,25,26,27,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86,87],$VT=[5,9,10,12,14,18,21,22,23,24,25,26,27,28,29,34,38,40,41,42,43,48,49,50,59,60,64,70,72,76,84,85,86,87],$VU=[18,76],$VV=[12,14];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements":4,"EOF":5,"statements_":6,"statement":7,"class_":8,"class":9,"IDENTIFIER":10,"class_statements":11,"end":12,"class_statement":13,"def":14,"OPERATOR":15,"(":16,"parameters":17,")":18,"self":19,".":20,"<=":21,">=":22,"<":23,">":24,"&&":25,"||":26,"==":27,"+":28,"-":29,"*":30,"/":31,"class_statements_":32,"case_statement":33,"when":34,"e":35,"case_statements_":36,"case_statements":37,"else":38,"statement_with_semicolon":39,";":40,"while":41,"do":42,"case":43,"each":44,"|":45,"if_statement":46,"function_call":47,"yield":48,"return":49,"local":50,"=":51,"identifiers":52,"access_array":53,"+=":54,"/=":55,"*=":56,"-=":57,"dot_expr":58,"?":59,":":60,"parentheses_expr":61,"...":62,"..":63,"!=":64,"not_expr":65,"!":66,"exprs":67,"[":68,"access_arr":69,"]":70,"{":71,"}":72,"key_values":73,"NUMBER":74,"STRING_LITERAL":75,",":76,"key_value":77,"=>":78,"type":79,"parameter":80,"][":81,"types":82,"elif":83,"elsif":84,"then":85,"unless":86,"if":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"class",10:"IDENTIFIER",12:"end",14:"def",16:"(",18:")",19:"self",20:".",21:"<=",22:">=",23:"<",24:">",25:"&&",26:"||",27:"==",28:"+",29:"-",30:"*",31:"/",34:"when",38:"else",40:";",41:"while",42:"do",43:"case",44:"each",45:"|",48:"yield",49:"return",50:"local",51:"=",54:"+=",55:"/=",56:"*=",57:"-=",59:"?",60:":",62:"...",63:"..",64:"!=",66:"!",68:"[",70:"]",71:"{",72:"}",74:"NUMBER",75:"STRING_LITERAL",76:",",78:"=>",81:"][",84:"elsif",85:"then",86:"unless",87:"if"},
productions_: [0,[3,2],[6,2],[6,1],[8,4],[13,7],[13,9],[13,7],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[32,2],[32,1],[11,1],[4,1],[33,3],[36,2],[36,1],[37,3],[37,1],[7,2],[7,1],[7,1],[7,5],[7,4],[7,4],[7,9],[7,1],[7,7],[39,1],[39,2],[39,2],[39,4],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[35,5],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[65,2],[65,1],[47,3],[47,4],[58,3],[58,4],[58,3],[58,1],[53,4],[61,2],[61,3],[61,2],[61,3],[61,3],[61,1],[61,1],[61,1],[61,1],[73,3],[73,1],[77,3],[79,1],[80,1],[80,3],[17,3],[17,1],[17,0],[69,3],[69,1],[67,3],[67,1],[82,3],[82,1],[83,5],[83,4],[83,4],[83,3],[83,2],[46,4],[46,6],[46,5],[46,5],[46,4],[52,3],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 19: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 20: case 25: case 78: case 96: case 99:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0-1]];
break;
case 5:
this.$ = ["instance_overload_operator","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 21:
this.$ = ["class_statements",$$[$0]]
break;
case 22:
this.$ = ["statements",$$[$0]]
break;
case 23:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 26:
this.$ = $$[$0-2].concat([["default",$$[$0]]])
break;
case 28:
this.$ = ["semicolon",$$[$0-1]];
break;
case 29:
this.$ = ["semicolon",$$[$0]];
break;
case 31:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["while",$$[$0-2],$$[$0-1]];
break;
case 33:
this.$ = ["switch",$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-8],$$[$0-1]];
break;
case 36:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 38:
this.$ = ["yield",$$[$0]];
break;
case 39:
this.$ = ["return",$$[$0]];
break;
case 40:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 41:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 42: case 43:
this.$ = ["+=",$$[$0-2],$$[$0]];
break;
case 44: case 45:
this.$ = ["/=",$$[$0-2],$$[$0]];
break;
case 46: case 47:
this.$ = ["*=",$$[$0-2],$$[$0]];
break;
case 48: case 49:
this.$ = ["-=",$$[$0-2],$$[$0]];
break;
case 50: case 51:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 52:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 53:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 54:
this.$ = ["unpack_array",$$[$0]]
break;
case 55:
this.$ = ["exclusive_range",$$[$0-2],$$[$0]]
break;
case 56:
this.$ = ["inclusive_range",$$[$0-2],$$[$0]]
break;
case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 67: case 68:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 66:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 69:
this.$ = ["-",$$[$0]];
break;
case 71:
this.$ = ["!", [".",$$[$0]]];
break;
case 72:
this.$ = [".", $$[$0]];
break;
case 73: case 75:
this.$ = ["function_call",$$[$0-2],[]]
break;
case 74: case 76:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
case 77: case 95: case 98: case 100: case 102: case 114:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 79:
this.$ = ["access_array",$$[$0-3],$$[$0-1]];
break;
case 80:
this.$ = ["initializer_list","Object",[]];
break;
case 81:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 82:
this.$ = ["associative_array","Object",[]];
break;
case 83:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 84:
this.$ = ["parentheses",$$[$0-1]];
break;
case 86: case 87: case 88:
this.$ = yytext;
break;
case 89:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 90: case 101: case 103: case 115:
this.$ = [$$[$0]];
break;
case 91:
this.$ = [$$[$0-2],$$[$0]]
break;
case 93:
this.$ = ["Object", $$[$0]];
break;
case 94:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 97:
this.$ = [];
break;
case 104:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 105:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 106:
this.$ = ["elif",$$[$0-2],$$[$0-1],$$[$0]]
break;
case 107:
this.$ = ["elif",$$[$0-1],$$[$0]]
break;
case 108:
this.$ = ["else",$$[$0]];
break;
case 109:
this.$ = ["unless",$$[$0-2],$$[$0-1]];
break;
case 110:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 111:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 112:
this.$ = ["if",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 113:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},{1:[3]},{5:[1,20]},o($Va,[2,22]),o($Va,[2,3],{7:4,39:5,8:6,46:10,47:12,53:16,6:21,9:$V0,10:$V1,14:$V2,41:$V3,43:$V4,48:$V5,49:$V6,50:$V7,86:$V8,87:$V9}),o($Vb,[2,29],{40:[1,22]}),o($Vb,[2,30]),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:23,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:37,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{16:[1,44],20:[1,38],51:[1,43],54:[1,39],55:[1,40],56:[1,41],57:[1,42],68:$Vl},o($Vb,[2,35]),{10:[1,46]},o($Vm,[2,37]),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:47,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:48,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:[1,49],52:50},{51:[1,55],54:[1,51],55:[1,52],56:[1,53],57:[1,54]},{10:[1,56]},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:57,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:58,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{1:[2,1]},o($Va,[2,2]),o($Vb,[2,28]),{4:60,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,39:5,41:$V3,42:[1,59],43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vy,64:$Vz,86:$V8,87:$V9},{10:$Vc,16:$Vd,53:31,61:74,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VA,$VB,{62:[1,75],63:[1,76]}),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:77,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VC,[2,70]),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:80,53:31,58:36,61:25,65:27,66:$Vg,67:79,68:$Vh,70:[1,78],71:$Vi,74:$Vj,75:$Vk},{72:[1,81],73:82,75:$VD,77:83},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:85,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VE,[2,85]),o($VE,[2,86]),o($VE,[2,87],{68:$Vl}),o($VE,[2,88]),{10:$Vc,16:$Vd,53:31,58:86,61:87,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VC,[2,72],{16:$VF,20:$VG}),{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,33:92,34:$VH,36:91,37:90,59:$Vy,64:$Vz},{10:$Vc,16:$Vd,44:[1,94],53:31,58:95,61:87,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:96,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:97,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:98,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:99,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:100,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,18:[1,101],29:$Ve,30:$Vf,35:80,53:31,58:36,61:25,65:27,66:$Vg,67:102,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,53:31,61:104,68:$Vh,69:103,71:$Vi,74:$Vj,75:$Vk},{16:[1,105]},o($Vm,[2,38],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,39],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,$VI,{51:[1,106],76:$VJ}),o($Vm,[2,41]),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:108,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:109,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:110,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:111,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:112,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{11:113,13:115,14:$VK,32:114},{4:117,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vy,64:$Vz,86:$V8,87:$V9},{4:119,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vy,64:$Vz,85:[1,118],86:$V8,87:$V9},{4:120,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},{12:[1,121]},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:122,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:123,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:124,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:125,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:126,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:127,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:128,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:129,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:130,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:131,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:132,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:133,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:134,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VC,[2,54]),{10:$Vc,16:$Vd,53:31,61:135,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,53:31,61:136,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VC,[2,69]),o($VE,[2,80]),{70:[1,137]},o($VL,[2,101],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz,76:[1,138]}),o($VE,[2,82]),{72:[1,139],76:[1,140]},o($VM,[2,90]),{78:[1,141]},{18:[1,142],21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz},o($VC,[2,71],{16:$VF,20:$VG}),o($VA,$VB),{10:$Vc,16:$Vd,18:[1,143],29:$Ve,30:$Vf,35:80,53:31,58:36,61:25,65:27,66:$Vg,67:144,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$Vc,16:$Vd,53:31,61:145,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{12:[1,146]},{12:[2,27],38:[1,147]},o($VN,[2,25],{33:92,36:148,34:$VH}),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:149,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{42:[1,150]},o($Vm,[2,52],{16:$VF,20:$VG}),o($Vm,[2,43],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,45],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,47],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,49],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,51],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,73]),{18:[1,151]},{70:[1,152]},{70:[2,99],81:[1,153]},{10:$VO,17:154,18:$VP,80:155},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:157,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:[1,159],52:158},o($Vm,[2,42],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,44],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,46],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,48],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,50],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),{12:[1,160]},{12:[2,21]},{12:[2,20],13:115,14:$VK,32:161},{10:[1,164],15:162,19:[1,163],21:[1,165],22:[1,166],23:[1,167],24:[1,168],25:[1,169],26:[1,170],27:[1,171],28:[1,172],29:[1,173],30:[1,174],31:[1,175]},{12:[1,176]},{4:177,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},{12:[1,179],38:$VQ,83:178,84:$VR},{12:[1,182]},o($Vb,[2,32]),{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,60:[1,183],64:$Vz},o([5,9,10,12,14,18,26,34,38,40,41,42,43,48,49,50,59,60,70,72,76,84,85,86,87],[2,57],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,64:$Vz}),o([5,9,10,12,14,18,25,26,34,38,40,41,42,43,48,49,50,59,60,70,72,76,84,85,86,87],[2,58],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,64:$Vz}),o($VS,[2,59],{28:$Vu,29:$Vv,30:$Vw,31:$Vx}),o($VS,[2,60],{28:$Vu,29:$Vv,30:$Vw,31:$Vx}),o($VS,[2,61],{28:$Vu,29:$Vv,30:$Vw,31:$Vx}),o($VS,[2,62],{28:$Vu,29:$Vv,30:$Vw,31:$Vx}),o($VS,[2,63],{28:$Vu,29:$Vv,30:$Vw,31:$Vx}),o($VS,[2,64],{28:$Vu,29:$Vv,30:$Vw,31:$Vx}),o($VT,[2,65],{30:$Vw,31:$Vx}),o($VT,[2,66],{30:$Vw,31:$Vx}),o($VC,[2,67]),o($VC,[2,68]),o($VC,[2,55]),o($VC,[2,56]),o($VE,[2,81]),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:80,53:31,58:36,61:25,65:27,66:$Vg,67:184,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VE,[2,83]),{75:$VD,77:185},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:186,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VE,[2,84]),o($VA,[2,75]),{18:[1,187]},o($VA,[2,77]),o($Vb,[2,33]),{4:188,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},o($VN,[2,24]),{4:189,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vy,64:$Vz,86:$V8,87:$V9},{45:[1,190]},o($Vm,[2,74]),o([5,9,10,12,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,51,54,55,56,57,59,60,62,63,64,70,72,76,81,84,85,86,87],[2,79]),{10:$Vc,16:$Vd,53:31,61:104,68:$Vh,69:191,71:$Vi,74:$Vj,75:$Vk},{18:[1,192]},{18:[2,96],76:[1,193]},o($VU,[2,93],{60:[1,194]}),o($Vm,[2,40],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($Vm,[2,114]),o($Vm,$VI,{76:$VJ}),o($Vb,[2,4]),{12:[2,19]},{16:[1,195]},{20:[1,196]},{16:[1,197]},{16:[2,8]},{16:[2,9]},{16:[2,10]},{16:[2,11]},{16:[2,12]},{16:[2,13]},{16:[2,14]},{16:[2,15]},{16:[2,16]},{16:[2,17]},{16:[2,18]},o($Vb,[2,109]),{12:[1,199],38:$VQ,83:198,84:$VR},{12:[1,200]},o($Vb,[2,113]),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:201,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{4:202,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},o($Vb,[2,31]),{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:203,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},o($VL,[2,100]),o($VM,[2,89]),o($VM,[2,91],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),o($VA,[2,76]),{12:[2,26]},o([12,34,38],[2,23]),{10:[1,204]},{70:[2,98]},{4:205,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},{10:$VO,17:206,18:$VP,80:155},{10:$Vc,16:$Vd,29:$Ve,30:$Vf,35:207,53:31,58:36,61:25,65:27,66:$Vg,68:$Vh,71:$Vi,74:$Vj,75:$Vk},{10:$VO,17:208,18:$VP,80:155},{10:[1,209]},{10:$VO,17:210,18:$VP,80:155},{12:[1,211]},o($Vb,[2,111]),o($Vb,[2,112]),{4:213,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,59:$Vy,64:$Vz,85:[1,212],86:$V8,87:$V9},{12:[2,108]},o([5,9,10,12,14,18,34,38,40,41,42,43,48,49,50,60,70,72,76,84,85,86,87],[2,53],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),{45:[1,214]},{12:[1,215]},{18:[2,95]},o($VU,[2,94],{21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,29:$Vv,30:$Vw,31:$Vx,59:$Vy,64:$Vz}),{18:[1,216]},{16:[1,217]},{18:[1,218]},o($Vb,[2,110]),{4:219,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},{12:[2,107],38:$VQ,83:220,84:$VR},{4:221,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},o($Vb,[2,36]),{4:222,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},{10:$VO,17:223,18:$VP,80:155},{4:224,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},{12:[2,105],38:$VQ,83:225,84:$VR},{12:[2,106]},{12:[1,226]},{12:[1,227]},{18:[1,228]},{12:[1,229]},{12:[2,104]},o($Vb,[2,34]),o($VV,[2,5]),{4:230,6:3,7:4,8:6,9:$V0,10:$V1,14:$V2,39:5,41:$V3,43:$V4,46:10,47:12,48:$V5,49:$V6,50:$V7,53:16,86:$V8,87:$V9},o($VV,[2,7]),{12:[1,231]},o($VV,[2,6])],
defaultActions: {20:[2,1],114:[2,21],161:[2,19],165:[2,8],166:[2,9],167:[2,10],168:[2,11],169:[2,12],170:[2,13],171:[2,14],172:[2,15],173:[2,16],174:[2,17],175:[2,18],188:[2,26],191:[2,98],202:[2,108],206:[2,95],220:[2,106],225:[2,104]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "$"
break;
case 2:return 86
break;
case 3:return "def"
break;
case 4:return "self"
break;
case 5:return "end"
break;
case 6:return "each"
break;
case 7:return 84
break;
case 8:return 87
break;
case 9:return 38
break;
case 10:return 34
break;
case 11:return 43
break;
case 12:return 9
break;
case 13:return 49
break;
case 14:return 48
break;
case 15:return 41
break;
case 16:return "then"
break;
case 17:return 'for'
break;
case 18:return 42
break;
case 19:return 76
break;
case 20:return 62
break;
case 21:return 63
break;
case 22:return 20
break;
case 23:return 60
break;
case 24:return 40
break;
case 25:return 25
break;
case 26:return 26
break;
case 27:return "|"
break;
case 28:return 64
break;
case 29:return 66
break;
case 30:return 78
break;
case 31:return 22
break;
case 32:return 24
break;
case 33:return 21
break;
case 34:return 23
break;
case 35:return 27
break;
case 36:return 51
break;
case 37:return 56
break;
case 38:return 30
break;
case 39:return 31
break;
case 40:return 57
break;
case 41:return 29
break;
case 42:return 54
break;
case 43:return 28
break;
case 44:return '^'
break;
case 45:return 59
break;
case 46:return 71
break;
case 47:return 72
break;
case 48:return 81
break;
case 49:return 68
break;
case 50:return 70
break;
case 51:return 16
break;
case 52:return 18
break;
case 53:return 10
break;
case 54:return 74
break;
case 55:return 75
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\$)/,/^(?:unless\b)/,/^(?:def\b)/,/^(?:self\b)/,/^(?:end\b)/,/^(?:each\b)/,/^(?:elsif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:when\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:then\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:,)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\]\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ruby_parser;
exports.Parser = ruby_parser.Parser;
exports.parse = function () { return ruby_parser.parse.apply(ruby_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}