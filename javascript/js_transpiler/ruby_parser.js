/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ruby_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,8],$V2=[1,11],$V3=[1,6],$V4=[1,7],$V5=[1,9],$V6=[1,10],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[5,11,34,38,88],$Vc=[5,8,9,11,13,34,38,41,43,46,47,51,52,53,54,88],$Vd=[1,29],$Ve=[1,30],$Vf=[1,25],$Vg=[1,23],$Vh=[1,33],$Vi=[1,27],$Vj=[1,28],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,46],$Vo=[5,8,9,11,13,34,38,40,41,43,46,47,51,52,53,54,88],$Vp=[1,66],$Vq=[1,68],$Vr=[1,67],$Vs=[1,69],$Vt=[1,65],$Vu=[1,64],$Vv=[1,70],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,63],$VB=[1,71],$VC=[1,76],$VD=[5,8,9,11,13,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,68,69,74,76,82,88],$VE=[2,82],$VF=[5,8,9,11,13,17,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,68,69,74,76,82,88],$VG=[1,88],$VH=[5,8,9,11,13,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,66,67,68,69,74,76,82,88],$VI=[1,93],$VJ=[1,98],$VK=[2,116],$VL=[1,114],$VM=[1,123],$VN=[17,74],$VO=[76,82],$VP=[11,38],$VQ=[1,163],$VR=[1,162],$VS=[1,166],$VT=[2,105],$VU=[5,8,9,11,13,17,21,22,23,24,25,26,27,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,68,74,76,82,88],$VV=[5,8,9,11,13,17,21,22,23,24,25,26,27,28,29,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,68,74,76,82,88],$VW=[5,8,9,11,13,17,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,68,74,76,82,88],$VX=[17,82],$VY=[11,13];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_":7,"class":8,"IDENTIFIER":9,"class_statements":10,"end":11,"class_statement":12,"def":13,"OPERATOR":14,"(":15,"parameters":16,")":17,"statements":18,"self":19,".":20,"<=":21,">=":22,"<":23,">":24,"&&":25,"||":26,"==":27,"+":28,"-":29,"*":30,"/":31,"class_statements_":32,"case_statement":33,"when":34,"e":35,"case_statements_":36,"case_statements":37,"else":38,"statement_with_semicolon":39,";":40,"while":41,"do":42,"case":43,"each":44,"|":45,"unless":46,"if":47,"then":48,"elif":49,"function_call":50,"yield":51,"return":52,"raise":53,"local":54,"=":55,"identifiers":56,"access_array":57,"+=":58,"/=":59,"*=":60,"-=":61,"dot_expr":62,"?":63,":":64,"parentheses_expr":65,"...":66,"..":67,"!=":68,"**":69,"not_expr":70,"!":71,"exprs":72,"[":73,"]":74,"{":75,"}":76,"key_values":77,"parentheses_expr_":78,"NUMBER":79,"$":80,"STRING_LITERAL":81,",":82,"key_value":83,"=>":84,"type":85,"parameter":86,"types":87,"elsif":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"class",9:"IDENTIFIER",11:"end",13:"def",15:"(",17:")",19:"self",20:".",21:"<=",22:">=",23:"<",24:">",25:"&&",26:"||",27:"==",28:"+",29:"-",30:"*",31:"/",34:"when",38:"else",40:";",41:"while",42:"do",43:"case",44:"each",45:"|",46:"unless",47:"if",48:"then",51:"yield",52:"return",53:"raise",54:"local",55:"=",58:"+=",59:"/=",60:"*=",61:"-=",63:"?",64:":",66:"...",67:"..",68:"!=",69:"**",71:"!",73:"[",74:"]",75:"{",76:"}",79:"NUMBER",80:"$",81:"STRING_LITERAL",82:",",84:"=>",88:"elsif"},
productions_: [0,[3,2],[4,2],[4,1],[7,4],[12,7],[12,9],[12,7],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[32,2],[32,1],[10,1],[18,1],[33,3],[36,2],[36,1],[37,3],[37,1],[6,2],[6,1],[6,1],[6,5],[6,4],[6,4],[6,9],[6,4],[6,6],[6,5],[6,5],[6,4],[6,7],[39,1],[39,2],[39,2],[39,2],[39,4],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[35,5],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[70,2],[70,1],[50,3],[50,4],[62,3],[62,1],[57,4],[65,2],[65,3],[65,2],[65,3],[65,3],[65,4],[65,3],[65,1],[65,1],[78,1],[78,2],[78,1],[78,1],[77,3],[77,1],[83,3],[85,1],[86,1],[86,3],[16,3],[16,1],[16,0],[72,3],[72,1],[87,3],[87,1],[49,5],[49,4],[49,4],[49,3],[49,2],[56,3],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 19: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 20: case 25: case 82: case 104:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0-1]];
break;
case 5:
this.$ = ["instance_overload_operator","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 21:
this.$ = ["class_statements",$$[$0]]
break;
case 22:
this.$ = ["statements",$$[$0]]
break;
case 23:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 26:
this.$ = $$[$0-2].concat([["default",$$[$0]]])
break;
case 28:
this.$ = ["semicolon",$$[$0-1]];
break;
case 29:
this.$ = ["semicolon",$$[$0]];
break;
case 31:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["while",$$[$0-2],$$[$0-1]];
break;
case 33:
this.$ = ["switch",$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-8],$$[$0-1]];
break;
case 35:
this.$ = ["unless",$$[$0-2],$$[$0-1]];
break;
case 36:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 37:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 38:
this.$ = ["if",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 39:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
case 40:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 42:
this.$ = ["yield",$$[$0]];
break;
case 43:
this.$ = ["return",$$[$0]];
break;
case 44:
this.$ = ["throw",$$[$0]];
break;
case 45:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 46:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 47: case 48:
this.$ = ["+=",$$[$0-2],$$[$0]];
break;
case 49: case 50:
this.$ = ["/=",$$[$0-2],$$[$0]];
break;
case 51: case 52:
this.$ = ["*=",$$[$0-2],$$[$0]];
break;
case 53: case 54:
this.$ = ["-=",$$[$0-2],$$[$0]];
break;
case 55: case 56:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 57:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 58:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 59:
this.$ = ["unpack_array",$$[$0]]
break;
case 60:
this.$ = ["exclusive_range",$$[$0-2],$$[$0]]
break;
case 61:
this.$ = ["inclusive_range",$$[$0-2],$$[$0]]
break;
case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 75:
this.$ = ["-",$$[$0]];
break;
case 77:
this.$ = ["!", [".",$$[$0]]];
break;
case 78:
this.$ = [".", $$[$0]];
break;
case 79: case 88:
this.$ = ["function_call",$$[$0-2],[]]
break;
case 80: case 89:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
case 81: case 97:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 83:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 84:
this.$ = ["initializer_list","Object",[]];
break;
case 85:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 86:
this.$ = ["associative_array","Object",[]];
break;
case 87:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 90:
this.$ = ["parentheses",$$[$0-1]];
break;
case 93: case 95: case 96:
this.$ = yytext;
break;
case 94:
this.$ = ["global_variable",$$[$0]]
break;
case 98: case 107: case 109: case 116:
this.$ = [$$[$0]];
break;
case 99:
this.$ = [$$[$0-2],$$[$0]]
break;
case 101:
this.$ = ["Object", $$[$0]];
break;
case 102:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 103: case 106: case 108: case 115:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 105:
this.$ = [];
break;
case 110:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 111:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 112:
this.$ = ["elif",$$[$0-2],$$[$0-1],$$[$0]]
break;
case 113:
this.$ = ["elif",$$[$0-1],$$[$0]]
break;
case 114:
this.$ = ["else",$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:$V0,9:$V1,13:$V2,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{1:[3]},{5:[1,19]},o($Vb,[2,3],{6:3,39:4,7:5,50:12,57:17,4:20,8:$V0,9:$V1,13:$V2,41:$V3,43:$V4,46:$V5,47:$V6,51:$V7,52:$V8,53:$V9,54:$Va}),o($Vc,[2,29],{40:[1,21]}),o($Vc,[2,30]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:22,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:38,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{15:[1,45],20:[1,39],55:[1,44],58:[1,40],59:[1,41],60:[1,42],61:[1,43],73:$Vn},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:47,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:48,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:[1,49]},o($Vo,[2,41]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:50,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:51,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:52,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:[1,53],56:54},{55:[1,59],58:[1,55],59:[1,56],60:[1,57],61:[1,58]},{9:[1,60]},{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,28]),{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:62,21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,39:4,41:$V3,42:[1,61],43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17,63:$VA,68:$VB,69:$VC},{9:$Vd,15:$Ve,57:31,65:78,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VD,$VE,{66:[1,79],67:[1,80]}),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:81,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VF,[2,76]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:84,57:31,62:34,65:24,70:26,71:$Vh,72:83,73:$Vi,74:[1,82],75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{76:[1,85],77:86,81:$VG,83:87},o($VH,[2,95],{15:[1,89],73:$Vn}),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:90,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VH,[2,91]),o($VH,[2,92]),{9:$Vd,15:$Ve,57:31,62:91,65:92,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VF,[2,78],{20:$VI}),o($VH,[2,93]),{9:[1,94]},o($VH,[2,96]),{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,33:97,34:$VJ,36:96,37:95,63:$VA,68:$VB,69:$VC},{9:$Vd,15:$Ve,44:[1,99],57:31,62:100,65:92,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:101,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:102,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:103,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:104,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:105,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,17:[1,106],29:$Vf,30:$Vg,35:84,57:31,62:34,65:24,70:26,71:$Vh,72:107,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:108,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:109,21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17,63:$VA,68:$VB,69:$VC},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:111,21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,39:4,41:$V3,43:$V4,46:$V5,47:$V6,48:[1,110],50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17,63:$VA,68:$VB,69:$VC},{15:[1,112]},o($Vo,[2,42],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,43],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,44],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,$VK,{55:[1,113],82:$VL}),o($Vo,[2,46]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:115,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:116,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:117,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:118,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:119,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{10:120,12:122,13:$VM,32:121},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:124,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{11:[1,125]},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:126,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:127,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:128,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:129,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:130,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:131,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:132,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:133,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:134,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:135,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:136,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:137,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:138,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:139,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o([11,34,38,88],[2,22]),o($VF,[2,59]),{9:$Vd,15:$Ve,57:31,65:140,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$Vd,15:$Ve,57:31,65:141,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VF,[2,75]),o($VH,[2,84]),{74:[1,142]},o($VN,[2,107],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC,82:[1,143]}),o($VH,[2,86]),{76:[1,144],82:[1,145]},o($VO,[2,98]),{84:[1,146]},{9:$Vd,15:$Ve,17:[1,147],29:$Vf,30:$Vg,35:84,57:31,62:34,65:24,70:26,71:$Vh,72:148,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{17:[1,149],21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC},o($VF,[2,77],{20:$VI}),o($VD,$VE),{9:$Vd,15:$Ve,57:31,65:150,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VH,[2,94]),{11:[1,151]},{11:[2,27],38:[1,152]},o($VP,[2,25],{33:97,36:153,34:$VJ}),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:154,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{42:[1,155]},o($Vo,[2,57],{20:$VI}),o($Vo,[2,48],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,50],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,52],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,54],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,56],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,79]),{17:[1,156]},{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC,74:[1,157]},{11:[1,158]},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:159,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{11:[1,161],38:$VQ,49:160,88:$VR},{9:$VS,16:164,17:$VT,86:165},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:167,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:[1,169],56:168},o($Vo,[2,47],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,49],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,51],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,53],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,55],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),{11:[1,170]},{11:[2,21]},{11:[2,20],12:122,13:$VM,32:171},{9:[1,174],14:172,19:[1,173],21:[1,175],22:[1,176],23:[1,177],24:[1,178],25:[1,179],26:[1,180],27:[1,181],28:[1,182],29:[1,183],30:[1,184],31:[1,185]},{11:[1,186]},o($Vc,[2,32]),{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,64:[1,187],68:$VB,69:$VC},o([5,8,9,11,13,17,26,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,74,76,82,88],[2,62],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,68:$VB,69:$VC}),o([5,8,9,11,13,17,25,26,34,38,40,41,42,43,46,47,48,51,52,53,54,63,64,74,76,82,88],[2,63],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,68:$VB,69:$VC}),o($VU,[2,64],{28:$Vw,29:$Vx,30:$Vy,31:$Vz,69:$VC}),o($VU,[2,65],{28:$Vw,29:$Vx,30:$Vy,31:$Vz,69:$VC}),o($VU,[2,66],{28:$Vw,29:$Vx,30:$Vy,31:$Vz,69:$VC}),o($VU,[2,67],{28:$Vw,29:$Vx,30:$Vy,31:$Vz,69:$VC}),o($VU,[2,68],{28:$Vw,29:$Vx,30:$Vy,31:$Vz,69:$VC}),o($VU,[2,69],{28:$Vw,29:$Vx,30:$Vy,31:$Vz,69:$VC}),o($VV,[2,70],{30:$Vy,31:$Vz,69:$VC}),o($VV,[2,71],{30:$Vy,31:$Vz,69:$VC}),o($VW,[2,72],{69:$VC}),o($VW,[2,73],{69:$VC}),o($VF,[2,74]),o($VF,[2,60]),o($VF,[2,61]),o($VH,[2,85]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:84,57:31,62:34,65:24,70:26,71:$Vh,72:188,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VH,[2,87]),{81:$VG,83:189},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:190,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VH,[2,88]),{17:[1,191]},o($VH,[2,90]),o($VD,[2,81]),o($Vc,[2,33]),{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:192,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},o($VP,[2,24]),{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:193,21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17,63:$VA,68:$VB,69:$VC},{45:[1,194]},o($Vo,[2,80]),o([5,8,9,11,13,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,46,47,48,51,52,53,54,55,58,59,60,61,63,64,66,67,68,69,74,76,82,88],[2,83]),o($Vc,[2,35]),{11:[1,196],38:$VQ,49:195,88:$VR},{11:[1,197]},o($Vc,[2,39]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:198,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:199,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{17:[1,200]},{17:[2,104],82:[1,201]},o($VX,[2,101],{64:[1,202]}),o($Vo,[2,45],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($Vo,[2,115]),o($Vo,$VK,{82:$VL}),o($Vc,[2,4]),{11:[2,19]},{15:[1,203]},{20:[1,204]},{15:[1,205]},{15:[2,8]},{15:[2,9]},{15:[2,10]},{15:[2,11]},{15:[2,12]},{15:[2,13]},{15:[2,14]},{15:[2,15]},{15:[2,16]},{15:[2,17]},{15:[2,18]},o($Vc,[2,31]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:206,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},o($VN,[2,106]),o($VO,[2,97]),o($VO,[2,99],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),o($VH,[2,89]),{11:[2,26]},o([11,34,38],[2,23]),{9:[1,207]},{11:[1,208]},o($Vc,[2,37]),o($Vc,[2,38]),{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:210,21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,39:4,41:$V3,43:$V4,46:$V5,47:$V6,48:[1,209],50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17,63:$VA,68:$VB,69:$VC},{11:[2,114]},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:211,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{9:$VS,16:212,17:$VT,86:165},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:213,57:31,62:34,65:24,70:26,71:$Vh,73:$Vi,75:$Vj,78:32,79:$Vk,80:$Vl,81:$Vm},{9:$VS,16:214,17:$VT,86:165},{9:[1,215]},{9:$VS,16:216,17:$VT,86:165},o([5,8,9,11,13,17,34,38,40,41,42,43,46,47,48,51,52,53,54,64,74,76,82,88],[2,58],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),{45:[1,217]},o($Vc,[2,36]),{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:218,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{11:[2,113],38:$VQ,49:219,88:$VR},{11:[1,220]},{17:[2,103]},o($VX,[2,102],{21:$Vp,22:$Vq,23:$Vr,24:$Vs,25:$Vt,26:$Vu,27:$Vv,28:$Vw,29:$Vx,30:$Vy,31:$Vz,63:$VA,68:$VB,69:$VC}),{17:[1,221]},{15:[1,222]},{17:[1,223]},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:224,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{11:[2,111],38:$VQ,49:225,88:$VR},{11:[2,112]},o($Vc,[2,40]),{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:226,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{9:$VS,16:227,17:$VT,86:165},{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:228,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},{11:[1,229]},{11:[2,110]},{11:[1,230]},{17:[1,231]},{11:[1,232]},o($Vc,[2,34]),o($VY,[2,5]),{4:77,6:3,7:5,8:$V0,9:$V1,13:$V2,18:233,39:4,41:$V3,43:$V4,46:$V5,47:$V6,50:12,51:$V7,52:$V8,53:$V9,54:$Va,57:17},o($VY,[2,7]),{11:[1,234]},o($VY,[2,6])],
defaultActions: {19:[2,1],121:[2,21],171:[2,19],175:[2,8],176:[2,9],177:[2,10],178:[2,11],179:[2,12],180:[2,13],181:[2,14],182:[2,15],183:[2,16],184:[2,17],185:[2,18],192:[2,26],199:[2,114],212:[2,103],219:[2,112],225:[2,110]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "$"
break;
case 2:return 46
break;
case 3:return "def"
break;
case 4:return "self"
break;
case 5:return "end"
break;
case 6:return "each"
break;
case 7:return 53
break;
case 8:return 88
break;
case 9:return 47
break;
case 10:return 38
break;
case 11:return 34
break;
case 12:return 43
break;
case 13:return 8
break;
case 14:return 52
break;
case 15:return 51
break;
case 16:return 41
break;
case 17:return "then"
break;
case 18:return 'for'
break;
case 19:return 42
break;
case 20:return 82
break;
case 21:return 66
break;
case 22:return 67
break;
case 23:return 20
break;
case 24:return 64
break;
case 25:return 40
break;
case 26:return 25
break;
case 27:return 26
break;
case 28:return "|"
break;
case 29:return 68
break;
case 30:return 71
break;
case 31:return 84
break;
case 32:return 22
break;
case 33:return 24
break;
case 34:return 21
break;
case 35:return 23
break;
case 36:return 27
break;
case 37:return 55
break;
case 38:return 60
break;
case 39:return 69
break;
case 40:return 30
break;
case 41:return 31
break;
case 42:return 61
break;
case 43:return 29
break;
case 44:return 58
break;
case 45:return 28
break;
case 46:return '^'
break;
case 47:return 63
break;
case 48:return 75
break;
case 49:return 76
break;
case 50:return 73
break;
case 51:return 74
break;
case 52:return 15
break;
case 53:return 17
break;
case 54:return 9
break;
case 55:return 79
break;
case 56:return 81
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\$)/,/^(?:unless\b)/,/^(?:def\b)/,/^(?:self\b)/,/^(?:end\b)/,/^(?:each\b)/,/^(?:raise\b)/,/^(?:elsif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:when\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:then\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:,)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ruby_parser;
exports.Parser = ruby_parser.Parser;
exports.parse = function () { return ruby_parser.parse.apply(ruby_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}