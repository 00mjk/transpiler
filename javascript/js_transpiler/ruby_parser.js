/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ruby_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,8],$V2=[1,10],$V3=[1,6],$V4=[1,7],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,18],$Va=[1,19],$Vb=[5,11,34,38,84],$Vc=[5,8,9,11,13,34,38,41,43,48,49,50,51,84,86,87],$Vd=[1,30],$Ve=[1,31],$Vf=[1,26],$Vg=[1,24],$Vh=[1,35],$Vi=[1,28],$Vj=[1,29],$Vk=[1,33],$Vl=[1,34],$Vm=[1,45],$Vn=[5,8,9,11,13,34,38,40,41,43,48,49,50,51,84,86,87],$Vo=[1,65],$Vp=[1,67],$Vq=[1,66],$Vr=[1,68],$Vs=[1,64],$Vt=[1,63],$Vu=[1,69],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,62],$VA=[1,70],$VB=[1,75],$VC=[5,8,9,11,13,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,51,60,61,65,66,71,73,77,84,85,86,87],$VD=[2,78],$VE=[5,8,9,11,13,17,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,51,60,61,65,66,71,73,77,84,85,86,87],$VF=[1,87],$VG=[5,8,9,11,13,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,51,60,61,63,64,65,66,71,73,77,84,85,86,87],$VH=[1,92],$VI=[1,96],$VJ=[2,115],$VK=[1,109],$VL=[1,118],$VM=[17,71],$VN=[73,77],$VO=[11,38],$VP=[1,158],$VQ=[2,99],$VR=[1,183],$VS=[1,182],$VT=[5,8,9,11,13,17,21,22,23,24,25,26,27,34,38,40,41,42,43,48,49,50,51,60,61,65,71,73,77,84,85,86,87],$VU=[5,8,9,11,13,17,21,22,23,24,25,26,27,28,29,34,38,40,41,42,43,48,49,50,51,60,61,65,71,73,77,84,85,86,87],$VV=[5,8,9,11,13,17,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,51,60,61,65,71,73,77,84,85,86,87],$VW=[17,77],$VX=[11,13];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"statements_":4,"EOF":5,"statement":6,"class_":7,"class":8,"IDENTIFIER":9,"class_statements":10,"end":11,"class_statement":12,"def":13,"OPERATOR":14,"(":15,"parameters":16,")":17,"statements":18,"self":19,".":20,"<=":21,">=":22,"<":23,">":24,"&&":25,"||":26,"==":27,"+":28,"-":29,"*":30,"/":31,"class_statements_":32,"case_statement":33,"when":34,"e":35,"case_statements_":36,"case_statements":37,"else":38,"statement_with_semicolon":39,";":40,"while":41,"do":42,"case":43,"each":44,"|":45,"if_statement":46,"function_call":47,"yield":48,"return":49,"raise":50,"local":51,"=":52,"identifiers":53,"access_array":54,"+=":55,"/=":56,"*=":57,"-=":58,"dot_expr":59,"?":60,":":61,"parentheses_expr":62,"...":63,"..":64,"!=":65,"**":66,"not_expr":67,"!":68,"exprs":69,"[":70,"]":71,"{":72,"}":73,"key_values":74,"NUMBER":75,"STRING_LITERAL":76,",":77,"key_value":78,"=>":79,"type":80,"parameter":81,"types":82,"elif":83,"elsif":84,"then":85,"unless":86,"if":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"class",9:"IDENTIFIER",11:"end",13:"def",15:"(",17:")",19:"self",20:".",21:"<=",22:">=",23:"<",24:">",25:"&&",26:"||",27:"==",28:"+",29:"-",30:"*",31:"/",34:"when",38:"else",40:";",41:"while",42:"do",43:"case",44:"each",45:"|",48:"yield",49:"return",50:"raise",51:"local",52:"=",55:"+=",56:"/=",57:"*=",58:"-=",60:"?",61:":",63:"...",64:"..",65:"!=",66:"**",68:"!",70:"[",71:"]",72:"{",73:"}",75:"NUMBER",76:"STRING_LITERAL",77:",",79:"=>",84:"elsif",85:"then",86:"unless",87:"if"},
productions_: [0,[3,2],[4,2],[4,1],[7,4],[12,7],[12,9],[12,7],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[32,2],[32,1],[10,1],[18,1],[33,3],[36,2],[36,1],[37,3],[37,1],[6,2],[6,1],[6,1],[6,5],[6,4],[6,4],[6,9],[6,1],[6,7],[39,1],[39,2],[39,2],[39,2],[39,4],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[35,5],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,1],[67,2],[67,1],[47,3],[47,4],[59,3],[59,1],[54,4],[62,2],[62,3],[62,2],[62,3],[62,3],[62,4],[62,3],[62,1],[62,1],[62,1],[62,1],[74,3],[74,1],[78,3],[80,1],[81,1],[81,3],[16,3],[16,1],[16,0],[69,3],[69,1],[82,3],[82,1],[83,5],[83,4],[83,4],[83,3],[83,2],[46,4],[46,6],[46,5],[46,5],[46,4],[53,3],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ["top_level_statements",$$[$0-1]];
break;
case 2: case 19: case 24:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 3: case 20: case 25: case 78: case 98:
this.$ =
 [$$[$0]];
break;
case 4:
this.$ = [$$[$0-3],"public",$$[$0-2],$$[$0-1]];
break;
case 5:
this.$ = ["instance_overload_operator","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 6:
this.$ = ["static_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 7:
this.$ = ["instance_method","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 21:
this.$ = ["class_statements",$$[$0]]
break;
case 22:
this.$ = ["statements",$$[$0]]
break;
case 23:
this.$ = ["case",$$[$0-1],$$[$0]]
break;
case 26:
this.$ = $$[$0-2].concat([["default",$$[$0]]])
break;
case 28:
this.$ = ["semicolon",$$[$0-1]];
break;
case 29:
this.$ = ["semicolon",$$[$0]];
break;
case 31:
this.$ = ["while",$$[$0-3],$$[$0-1]];
break;
case 32:
this.$ = ["while",$$[$0-2],$$[$0-1]];
break;
case 33:
this.$ = ["switch",$$[$0-2],$$[$0-1]];
break;
case 34:
this.$ = ["foreach","Object",$$[$0-3],$$[$0-8],$$[$0-1]];
break;
case 36:
this.$ = ["function","public","Object",$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 38:
this.$ = ["yield",$$[$0]];
break;
case 39:
this.$ = ["return",$$[$0]];
break;
case 40:
this.$ = ["throw",$$[$0]];
break;
case 41:
this.$ = ["initialize_var","Object",$$[$0-2],$$[$0]];
break;
case 42:
this.$ = ["initialize_empty_vars","Object",$$[$0]];
break;
case 43: case 44:
this.$ = ["+=",$$[$0-2],$$[$0]];
break;
case 45: case 46:
this.$ = ["/=",$$[$0-2],$$[$0]];
break;
case 47: case 48:
this.$ = ["*=",$$[$0-2],$$[$0]];
break;
case 49: case 50:
this.$ = ["-=",$$[$0-2],$$[$0]];
break;
case 51: case 52:
this.$ = ["set_var",$$[$0-2],$$[$0]];
break;
case 53:
this.$ = [".",[$$[$0-2]].concat($$[$0])]
break;
case 54:
this.$ = ["ternary_operator",$$[$0-4],$$[$0-2],$$[$0]]
break;
case 55:
this.$ = ["unpack_array",$$[$0]]
break;
case 56:
this.$ = ["exclusive_range",$$[$0-2],$$[$0]]
break;
case 57:
this.$ = ["inclusive_range",$$[$0-2],$$[$0]]
break;
case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 68: case 69: case 70:
this.$ = [$$[$0-1],$$[$0-2],$$[$0]];
break;
case 67:
this.$ = ["-",$$[$0-2],$$[$0]];
break;
case 71:
this.$ = ["-",$$[$0]];
break;
case 73:
this.$ = ["!", [".",$$[$0]]];
break;
case 74:
this.$ = [".", $$[$0]];
break;
case 75: case 84:
this.$ = ["function_call",$$[$0-2],[]]
break;
case 76: case 85:
this.$ = ["function_call",$$[$0-3],$$[$0-1]]
break;
case 77: case 91:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 79:
this.$ = ["access_array",$$[$0-3],[$$[$0-1]]];
break;
case 80:
this.$ = ["initializer_list","Object",[]];
break;
case 81:
this.$ = ["initializer_list","Object",$$[$0-1]];
break;
case 82:
this.$ = ["associative_array","Object",[]];
break;
case 83:
this.$ = ["associative_array","Object","Object",$$[$0-1]];
break;
case 86:
this.$ = ["parentheses",$$[$0-1]];
break;
case 88: case 89: case 90:
this.$ = yytext;
break;
case 92: case 101: case 103: case 115:
this.$ = [$$[$0]];
break;
case 93:
this.$ = [$$[$0-2],$$[$0]]
break;
case 95:
this.$ = ["Object", $$[$0]];
break;
case 96:
this.$ = ["default_parameter","Object",$$[$0-2],$$[$0]];
break;
case 97: case 100: case 102: case 114:
this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 99:
this.$ = [];
break;
case 104:
this.$ = ["elif",$$[$0-3],$$[$0-1],$$[$0]]
break;
case 105:
this.$ = ["elif",$$[$0-2],$$[$0]]
break;
case 106:
this.$ = ["elif",$$[$0-2],$$[$0-1],$$[$0]]
break;
case 107:
this.$ = ["elif",$$[$0-1],$$[$0]]
break;
case 108:
this.$ = ["else",$$[$0]];
break;
case 109:
this.$ = ["unless",$$[$0-2],$$[$0-1]];
break;
case 110:
this.$ = ["if",$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 111:
this.$ = ["if",$$[$0-3],$$[$0-1]];
break;
case 112:
this.$ = ["if",$$[$0-3],$$[$0-2],$$[$0-1]];
break;
case 113:
this.$ = ["if",$$[$0-2],$$[$0-1]];
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:$V0,9:$V1,13:$V2,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},{1:[3]},{5:[1,20]},o($Vb,[2,3],{6:3,39:4,7:5,46:9,47:11,54:16,4:21,8:$V0,9:$V1,13:$V2,41:$V3,43:$V4,48:$V5,49:$V6,50:$V7,51:$V8,86:$V9,87:$Va}),o($Vc,[2,29],{40:[1,22]}),o($Vc,[2,30]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:23,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:37,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{15:[1,44],20:[1,38],52:[1,43],55:[1,39],56:[1,40],57:[1,41],58:[1,42],70:$Vm},o($Vc,[2,35]),{9:[1,46]},o($Vn,[2,37]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:47,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:48,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:49,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:[1,50],53:51},{52:[1,56],55:[1,52],56:[1,53],57:[1,54],58:[1,55]},{9:[1,57]},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:58,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:59,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,28]),{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:61,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,39:4,41:$V3,42:[1,60],43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,60:$Vz,65:$VA,66:$VB,86:$V9,87:$Va},{9:$Vd,15:$Ve,54:32,62:77,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VC,$VD,{63:[1,78],64:[1,79]}),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:80,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VE,[2,72]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:83,54:32,59:36,62:25,67:27,68:$Vh,69:82,70:$Vi,71:[1,81],72:$Vj,75:$Vk,76:$Vl},{73:[1,84],74:85,76:$VF,78:86},o($VG,[2,89],{15:[1,88],70:$Vm}),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:89,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VG,[2,87]),o($VG,[2,88]),o($VG,[2,90]),{9:$Vd,15:$Ve,54:32,59:90,62:91,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VE,[2,74],{20:$VH}),{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,33:95,34:$VI,36:94,37:93,60:$Vz,65:$VA,66:$VB},{9:$Vd,15:$Ve,44:[1,97],54:32,59:98,62:91,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:99,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:100,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:101,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:102,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:103,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,17:[1,104],29:$Vf,30:$Vg,35:83,54:32,59:36,62:25,67:27,68:$Vh,69:105,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:106,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{15:[1,107]},o($Vn,[2,38],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,39],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,40],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,$VJ,{52:[1,108],77:$VK}),o($Vn,[2,42]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:110,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:111,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:112,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:113,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:114,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{10:115,12:117,13:$VL,32:116},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:119,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,60:$Vz,65:$VA,66:$VB,86:$V9,87:$Va},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:121,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,60:$Vz,65:$VA,66:$VB,85:[1,120],86:$V9,87:$Va},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:122,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},{11:[1,123]},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:124,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:125,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:126,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:127,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:128,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:129,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:130,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:131,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:132,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:133,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:134,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:135,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:136,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:137,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o([11,34,38,84],[2,22]),o($VE,[2,55]),{9:$Vd,15:$Ve,54:32,62:138,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$Vd,15:$Ve,54:32,62:139,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VE,[2,71]),o($VG,[2,80]),{71:[1,140]},o($VM,[2,101],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB,77:[1,141]}),o($VG,[2,82]),{73:[1,142],77:[1,143]},o($VN,[2,92]),{79:[1,144]},{9:$Vd,15:$Ve,17:[1,145],29:$Vf,30:$Vg,35:83,54:32,59:36,62:25,67:27,68:$Vh,69:146,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{17:[1,147],21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB},o($VE,[2,73],{20:$VH}),o($VC,$VD),{9:$Vd,15:$Ve,54:32,62:148,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{11:[1,149]},{11:[2,27],38:[1,150]},o($VO,[2,25],{33:95,36:151,34:$VI}),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:152,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{42:[1,153]},o($Vn,[2,53],{20:$VH}),o($Vn,[2,44],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,46],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,48],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,50],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,52],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,75]),{17:[1,154]},{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB,71:[1,155]},{9:$VP,16:156,17:$VQ,81:157},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:159,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:[1,161],53:160},o($Vn,[2,43],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,45],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,47],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,49],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,51],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),{11:[1,162]},{11:[2,21]},{11:[2,20],12:117,13:$VL,32:163},{9:[1,166],14:164,19:[1,165],21:[1,167],22:[1,168],23:[1,169],24:[1,170],25:[1,171],26:[1,172],27:[1,173],28:[1,174],29:[1,175],30:[1,176],31:[1,177]},{11:[1,178]},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:179,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},{11:[1,181],38:$VR,83:180,84:$VS},{11:[1,184]},o($Vc,[2,32]),{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,61:[1,185],65:$VA,66:$VB},o([5,8,9,11,13,17,26,34,38,40,41,42,43,48,49,50,51,60,61,71,73,77,84,85,86,87],[2,58],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,65:$VA,66:$VB}),o([5,8,9,11,13,17,25,26,34,38,40,41,42,43,48,49,50,51,60,61,71,73,77,84,85,86,87],[2,59],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,65:$VA,66:$VB}),o($VT,[2,60],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$VB}),o($VT,[2,61],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$VB}),o($VT,[2,62],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$VB}),o($VT,[2,63],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$VB}),o($VT,[2,64],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$VB}),o($VT,[2,65],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,66:$VB}),o($VU,[2,66],{30:$Vx,31:$Vy,66:$VB}),o($VU,[2,67],{30:$Vx,31:$Vy,66:$VB}),o($VV,[2,68],{66:$VB}),o($VV,[2,69],{66:$VB}),o($VE,[2,70]),o($VE,[2,56]),o($VE,[2,57]),o($VG,[2,81]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:83,54:32,59:36,62:25,67:27,68:$Vh,69:186,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VG,[2,83]),{76:$VF,78:187},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:188,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VG,[2,84]),{17:[1,189]},o($VG,[2,86]),o($VC,[2,77]),o($Vc,[2,33]),{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:190,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},o($VO,[2,24]),{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:191,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,60:$Vz,65:$VA,66:$VB,86:$V9,87:$Va},{45:[1,192]},o($Vn,[2,76]),o([5,8,9,11,13,17,20,21,22,23,24,25,26,27,28,29,30,31,34,38,40,41,42,43,48,49,50,51,52,55,56,57,58,60,61,63,64,65,66,71,73,77,84,85,86,87],[2,79]),{17:[1,193]},{17:[2,98],77:[1,194]},o($VW,[2,95],{61:[1,195]}),o($Vn,[2,41],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($Vn,[2,114]),o($Vn,$VJ,{77:$VK}),o($Vc,[2,4]),{11:[2,19]},{15:[1,196]},{20:[1,197]},{15:[1,198]},{15:[2,8]},{15:[2,9]},{15:[2,10]},{15:[2,11]},{15:[2,12]},{15:[2,13]},{15:[2,14]},{15:[2,15]},{15:[2,16]},{15:[2,17]},{15:[2,18]},o($Vc,[2,109]),{11:[1,200],38:$VR,83:199,84:$VS},{11:[1,201]},o($Vc,[2,113]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:202,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:203,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},o($Vc,[2,31]),{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:204,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},o($VM,[2,100]),o($VN,[2,91]),o($VN,[2,93],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),o($VG,[2,85]),{11:[2,26]},o([11,34,38],[2,23]),{9:[1,205]},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:206,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},{9:$VP,16:207,17:$VQ,81:157},{9:$Vd,15:$Ve,29:$Vf,30:$Vg,35:208,54:32,59:36,62:25,67:27,68:$Vh,70:$Vi,72:$Vj,75:$Vk,76:$Vl},{9:$VP,16:209,17:$VQ,81:157},{9:[1,210]},{9:$VP,16:211,17:$VQ,81:157},{11:[1,212]},o($Vc,[2,111]),o($Vc,[2,112]),{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:214,21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,60:$Vz,65:$VA,66:$VB,85:[1,213],86:$V9,87:$Va},{11:[2,108]},o([5,8,9,11,13,17,34,38,40,41,42,43,48,49,50,51,61,71,73,77,84,85,86,87],[2,54],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),{45:[1,215]},{11:[1,216]},{17:[2,97]},o($VW,[2,96],{21:$Vo,22:$Vp,23:$Vq,24:$Vr,25:$Vs,26:$Vt,27:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,60:$Vz,65:$VA,66:$VB}),{17:[1,217]},{15:[1,218]},{17:[1,219]},o($Vc,[2,110]),{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:220,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},{11:[2,107],38:$VR,83:221,84:$VS},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:222,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},o($Vc,[2,36]),{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:223,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},{9:$VP,16:224,17:$VQ,81:157},{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:225,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},{11:[2,105],38:$VR,83:226,84:$VS},{11:[2,106]},{11:[1,227]},{11:[1,228]},{17:[1,229]},{11:[1,230]},{11:[2,104]},o($Vc,[2,34]),o($VX,[2,5]),{4:76,6:3,7:5,8:$V0,9:$V1,13:$V2,18:231,39:4,41:$V3,43:$V4,46:9,47:11,48:$V5,49:$V6,50:$V7,51:$V8,54:16,86:$V9,87:$Va},o($VX,[2,7]),{11:[1,232]},o($VX,[2,6])],
defaultActions: {20:[2,1],116:[2,21],163:[2,19],167:[2,8],168:[2,9],169:[2,10],170:[2,11],171:[2,12],172:[2,13],173:[2,14],174:[2,15],175:[2,16],176:[2,17],177:[2,18],190:[2,26],203:[2,108],207:[2,97],221:[2,106],226:[2,104]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return "$"
break;
case 2:return 86
break;
case 3:return "def"
break;
case 4:return "self"
break;
case 5:return "end"
break;
case 6:return "each"
break;
case 7:return 50
break;
case 8:return 84
break;
case 9:return 87
break;
case 10:return 38
break;
case 11:return 34
break;
case 12:return 43
break;
case 13:return 8
break;
case 14:return 49
break;
case 15:return 48
break;
case 16:return 41
break;
case 17:return "then"
break;
case 18:return 'for'
break;
case 19:return 42
break;
case 20:return 77
break;
case 21:return 63
break;
case 22:return 64
break;
case 23:return 20
break;
case 24:return 61
break;
case 25:return 40
break;
case 26:return 25
break;
case 27:return 26
break;
case 28:return "|"
break;
case 29:return 65
break;
case 30:return 68
break;
case 31:return 79
break;
case 32:return 22
break;
case 33:return 24
break;
case 34:return 21
break;
case 35:return 23
break;
case 36:return 27
break;
case 37:return 52
break;
case 38:return 57
break;
case 39:return 66
break;
case 40:return 30
break;
case 41:return 31
break;
case 42:return 58
break;
case 43:return 29
break;
case 44:return 55
break;
case 45:return 28
break;
case 46:return '^'
break;
case 47:return 60
break;
case 48:return 72
break;
case 49:return 73
break;
case 50:return 70
break;
case 51:return 71
break;
case 52:return 15
break;
case 53:return 17
break;
case 54:return 9
break;
case 55:return 75
break;
case 56:return 76
break;
case 57:return 5
break;
case 58:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\$)/,/^(?:unless\b)/,/^(?:def\b)/,/^(?:self\b)/,/^(?:end\b)/,/^(?:each\b)/,/^(?:raise\b)/,/^(?:elsif\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:when\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:yield\b)/,/^(?:while\b)/,/^(?:then\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:,)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:!=)/,/^(?:!)/,/^(?:=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:\*=)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-=)/,/^(?:-)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\^)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"([^\\\"]|\\.)*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ruby_parser;
exports.Parser = ruby_parser.Parser;
exports.parse = function () { return ruby_parser.parse.apply(ruby_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}