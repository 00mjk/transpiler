Java,Z3
{
	constraint(expression a)
		MiniZinc
			"constraint a"
		Prolog
			"a"
	if_without_braces(expression a, statement b)
		Java,C,C++,C#,JavaScript
			"if ( a ) b"
	elseif_without_braces(expression a, statement b)
		Java,C,C++,C#,JavaScript
			"else __ if ( a ) b"
	else_without_braces(statement a)
		Java,C,C++,C#,JavaScript
			"else __ a"
	while_without_braces(expression a, statement b)
		Java,C,C++,C#,JavaScript
			"while ( a ) b"
	assert(expression a)
		C,C++,Lua,Python,Swift,PHP
			"assert ( a )"
		C#,Visual Basic .NET
			"Debug . Assert ( a )"
		Java
			"assert a"
	solve_equation(expression equation_string, expression solve_for)
		JavaScript
			"algebra . parse ( equation_string ) . solveFor ( solve_for )"
	multiline_string(_multiline_string a)
		Python
			"''' a '''"
		JavaScript
			"` a `"
		Java,C,C++,Haskell
			"\" a \""
		C#
			"@\" a \""
	multiline_string_separator(lang a)
		Python,JavaScript,C#
			"\n"
		Java,C,C++,Ruby,Perl
			"\\n\" \n + \""
		Haskell
			"\\ \n \\"
	increment(expression a)
		Java,JavaScript,C#,D,C++,C,PHP,Hack,Wolfram
			"a ++"
		Python,Ruby,Janus
			"a += 1"
		REBOL
			"a = a + 1"
	swap_ints(var_name a, var_name b)
		Python,Ruby,Lua,Julia
			"a , b = b , a"
		Perl
			"( a , b ) = ( b , a )"
		C,Java,C++,C#
			"a = a + b ; b = a - b ; a = a - b"
		REBOL
			"a : __ a + b __ b : __ a - b : __ a : __ a - b"
		JavaScript
			"b = [ a , a = b ] [ 0 ]"
		AppleScript
			"set { a , b } to { b , a }"
		Janus
			"a <=> b"
	async_function(var_name name, parameter_list params, type return_type, series_of_statements body)
		C#
			"async __ type __ name ( params ) { body }"
		JavaScript,Hack
			"async __ function __ name ( params ) { body }"
		Visual Basic .NET
			"Async __ Function __ name ( params ) As __ return_type"
	await(expression a)
		C#,Python,JavaScript
			"await __ a"
		Visual Basic .NET
			"Await __ a"
	decrement(expression a)
		Java,JavaScript,C,C++,C#,D,C++,C,PHP,Hack,Wolfram
			"a --"
		Python,Ruby,Janus
			"a -= 1"
	floor(expression a)
		C,C++,PHP,Perl,Fortran
			"floor ( a )"
		Java,JavaScript,Haxe
			"Math . floor ( a )"
		C#,Visual Basic,Visual Basic .NET
			"Math . Floor ( a )"
		Ruby
			"a . floor"
	ceiling(expression a)
		C,PHP,C++,Perl,Fortran
			"ceil ( a )"
		Java,JavaScript,Haxe
			"Math . ceil ( a )"
		Python
			"math . ceil ( a )"
		C#,Visual Basic,Visual Basic .NET
			"Math . Ceiling ( a )"
		Ruby
			"a . ceil"
	typeless_initialize_var(var_name name, expression value)
		C++,D
			"auto __ name = value"
		C#,Dafny,JavaScript,Haxe,PHP,TypeScript,Dart,Swift
			"var __ name = value"
		Lua
			"local __ name = value"
		Python,Ruby,Haskell,Erlang,Prolog,Julia,Picat,Octave,PHP
			"name = value"
		C
			"__auto_type __ name = value"
		Java
			"Object __ name = value"
		C#,JavaScript,Haxe,Swift
			"var __ name = value"
		Perl
			"my __ name = value"
	absolute_value(expression a)
		Lua
			"math . abs ( a )"
		C,Swift,Python,Fortran,PHP,Hack
			"abs ( a )"
		C#,Visual Basic,Visual Basic .NET
			"Math . Abs ( a )"
		Ruby
			"a . abs"
		Java,JavaScript,Haxe
			"Math . abs ( a )"
		Wolfram
			"Abs [ a ]"
	natural_logarithm(expression a)
		Python
			"math . log ( a )"
		JavaScript,Java,Ruby,Haxe
			"Math . log ( a )"
		C#,Visual Basic,Visual Basic .NET
			"Math . Log ( a )"
		C,Fortran,Perl,PHP,C++
			"log ( a )"
	pi(lang a)
		JavaScript,Java,C#,Haxe,TypeScript
			"Math . PI"
		Python,Lua
			"math . pi"
		PHP,Hack
			"pi ( )"
		Perl
			"pi"
		Wolfram
			"Pi"
	asin(expression a)
		Java,JavaScript,Ruby,Haxe
			"Math . asin ( a )"
		Python,Lua
			"math . asin ( a )"
		Perl,C,Fortran,D,PHP,Hack,Dart
			"asin ( a )"
		C#,Visual Basic,Visual Basic .NET
			"Math . Asin ( a )"
		Gambas
			"Asin ( a )"
		Erlang
			"math:asin ( a )"
		C++
			"std :: asin ( a )"
		Wolfram
			"ArcSin [ a ]"
	acos(expression a)
		Java,JavaScript,Ruby,Haxe
			"Math . acos ( a )"
		C#,Visual Basic,Visual Basic .NET
			"Math . Acos ( a )"
		Python,Lua
			"math . acos ( a )"
		Perl,C,Fortran,D,PHP
			"acos ( a )"
		Gambas
			"Acos ( a )"
		C++
			"std :: acos ( a )"
		Erlang
			"math:acos ( a )"
		Wolfram
			"ArcCos [ a ]"
	atan(expression a)
		Java,JavaScript,Ruby,Haxe
			"Math . atan ( a )"
		Python,Lua
			"math . atan ( a )"
		Erlang
			"math:atan ( a )"
		Perl,C,Fortran,D,PHP
			"atan ( a )"
		C#,Visual Basic,Visual Basic .NET
			"Math . Atan ( a )"
		Gambas
			"Atan ( a )"
		C++
			"std :: atan ( a )"
		Wolfram
			"ArcTan [ a ]"
	iff(expression a, expression b)
		MiniZinc
			"a <-> b"
		Prolog
			"a #<==> b"
		Z3
			"( iff __ a __ b )"
	delocal(var_name name, type type, expression value)
		Java
			"assert __ name == value"
		Python,PHP
			"assert ( name == value )"
		Janus
			"delocal __ type __ q = 0"
	reversible_while(expression start, series_of_statements body, expression end_condition)
		Java,PHP
			"while ( start ) { body } assert end_condition ;"
		Janus
			"from ( start ) __ do __ body __ loop __ until __ ( end_condition )"
	reversible_if(expression start, series_of_statements body, series_of_statements else_body, expression end_condition)
		Java,PHP
			"if ( start ) { body }  else { else_body }  assert end_condition ;"
	reverse_string(expression theString)
		Python
			"theString  [::-1]"
		Ruby
			"theString . reverse!"
		Java
			"new __ StringBuilder ( theString ) . reverse ( ) . toString ( )"
	reverse_array(expression theArray)
		Haskell
			"( reverse __ theArray )"
	global_replace(expression inTheString, expression toReplace, expression replaceWith)
	        Python
                "inTheString . replace ( toReplace , replaceWith )"
            JavaScript,CoffeeScript
                "inTheString . split ( toReplace ) . join ( replaceWith )"
            Java
                "inTheString . replaceAll ( toReplace , replaceWith )"
            Ruby,Lua
                "inTheString . gsub ( toReplace , replaceWith )"
            C#
                "inTheString . Replace ( toReplace , replaceWith )"
            PHP
                "str_replace ( toReplace , replaceWith , inTheString )"
    to_uppercase(expression a)
		C
			"toupper ( a )"
		PHP
			"strtoupper ( a )"
		JavaScript,Java,Haxe
			"a . toUpperCase ( )"
		C#
			"a . ToUpper"
		Lua
			"string . upper ( a )"
		Python
			"a . upper ( )"
		Perl
			"uc ( a )"
		Wolfram
			"toUpperCase [ a ]"
		Swift
			"a . uppercaseString"
    to_lowercase(expression a)
		C
			"tolower ( a )"
		PHP
			"strtolower ( a )"
		JavaScript,Java,Haxe
			"a . toLowerCase ( )"
		C#
			"a . ToLower ( )"
		Lua
			"string . lower ( a )"
		Python
			"a . upper ( )"
		Perl
			"lc ( a )"
		Wolfram
			"ToLowerCase [ a ]"
		Swift
			"a . lowercaseString"
	string_contains(expression container, expression contained)
		Python
			"( container __ in __ contained )"
		Ruby
			"container . include? ( contained )"
		PHP
			"( strpos ( container , contained ) !== false )"
		Lua
			"string . find ( container , contained )"
		Java,Dart
			"container . contains ( contained )"
		C++
			"( container . find ( contained ) != std::string::npos )"
		Swift
			"( container . rangeOfString ( contained ) != nil )"
		C#
			"container . Contains ( contained )"
		JavaScript
			"( container . indexOf ( contained ) !== -1 )"
	endswith(expression container, expression contained)
		Python
			"container . endswith ( contained )"
		PHP
			"endsWith ( container , contained )"
		C#
			"container . EndsWith ( contained )"
		Ruby
			"container . end_with? ( contained )"
		Java
			"container . endsWith ( contained )"
		C#,Visual Basic .NET
            "container . Contains ( contained )"
        C
			"( strstr ( container , contained ) != NULL )"
		Hy
            "( in __ contained __ container )"
        Clojure
			"( .contains __ container __ contained )"
		Emacs Lisp
			"( s-suffix? __ contained __ container )"
	startswith(expression container, expression container)
		Python
			"container . startswith ( contained )"
		C++
			"( container . rfind ( contained , 0 ) == 0 )"
		PHP
			"startsWith ( container , contained )"
		C#
			"container . StartsWith ( contained )"
		Java
			"container . startsWith ( contained )"
		JavaScript
			"( container . indexOf ( contained ) === 0 )"
		Ruby
			"container . start_with? ( contained )"
		Swift
			"container . hasPrefix ( contained )"
	statement_separator(lang a)
		Java,Dafny,Z3,Elm,Bash,Perl 6,Mathematical notation,Katahdin,Frink,MiniZinc,Aldor,COBOL,ooc,Genie,ECLiPSe,nools,Agda,PL/I,REXX,IDP,Falcon,Processing,Sympy,Maxima,Pyke,Elixir,GNU Smalltalk,Seed7,Standard ML,Occam,Boo,Drools,Icon,Mercury,EngScript,Pike,Oz,Kotlin,Pawn,FreeBASIC,Ada,PowerShell,Gosu,Nimrod,Cython,OpenOffice Basic,ALGOL 68,D,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,Delphi,Pascal,F#,Self,Swift,Nemerle,Dart,C,AutoIt,Cobra,Julia,Groovy,Scala,OCaml,Erlang,Gambas,Hack,C++,MATLAB,REBOL,Red,Lua,Go,AWK,Haskell,Perl,Python,JavaScript,C#,PHP,Ruby,R,Haxe,Visual Basic,Visual Basic .NET,Vala,bc
			"_"
		Picat,Prolog
			","
		Wolfram
			";"
	for_loop(statement_without_semicolon a, expression b, statement_without_semicolon c, series_of_statements body)
		Java,D,Pawn,Groovy,JavaScript,Dart,TypeScript,PHP,Hack,C#,Perl,C++,AWK,Pike
			"for ( a ; b ; c ) { body }"
		Perl 6
			"loop ( a ; b ; c ) { body }"
		C
			"int __ a ; for ( a ; b ; c ) { body }"
		Go
			"for __ a ; b ; c { body }"
		Haxe
			"a ; \n while ( b ) { body \n c ; }"
		Lua,Ruby
			"a \n while __ b __ do __ body __ c __ end"
		Wolfram
			"For [ a , b , c , body ]"
	initialize_instance_variable(type type, var_name name)
		Java,C#
			"private __ type __ name"
		PHP
			"private __ name"
		C++,D
			"type __ name"
		Python,Ruby,JavaScript
			"_"
		Haxe
			"var __ name : type"
	initialize_instance_variable_with_value(type type, var_name name, expression value)
		Java,C#
			"private __ type __ name = value"
		PHP
			"private __ name = value"
		C++
			"type __ name = value"
		Python
			"self . name = value"
		Haxe
			"var __ name : type = value"
		Ruby
			"@ name = value"
	initialize_static_variable(type type, var_name name)
		Swift
			"static __ var __ name = value"
		Java,C#
			"public __ static __ type __ name"
		PHP
			"public __ static __ name"
		C++
			"static __ type __ name"
		Python
			"_"
		Haxe
			"static __ var __ name : type"
		Ruby
			"__"
	initialize_static_variable_with_value(type type, var_name name, expression value)
		Swift
			"static __ var __ name = value"
		Java,C#
			"public __ static __ type __ name = value"
		PHP
			"public __ static __ name = value"
		C++
			"static __ type __ name = value"
		Python
			"name = value"
		Ruby
			"@@ name = type"
		Haxe
			"static __ var __ name : type = value"
	range(expression a, expression b)
		Swift,Perl,Picat,Ruby,MiniZinc,Chapel
			"a .. b"
		Python
			"range ( a , b - 1 )"
		Octave,Julia,R
			"a : b"
		Haxe
			"a ... ( b - 1 )"
	typeless_parameter(identifier a)
		C++,D
			"auto __ a"
		Haskell,REBOL,Visual Basic .NET,Haxe,Scheme,Python,Mathematical notation,LispyScript,CLIPS,Clojure,F#,ML,Racket,OCaml,Tcl,Common Lisp,newLisp,Python,Cython,Frink,Picat,IDP,PowerShell,Maxima,Icon,CoffeeScript,Fortran,Octave,AutoHotKey,Julia,Prolog,AWK,Kotlin,Dart,JavaScript,Nemerle,Erlang,PHP,AutoIt,Lua,Ruby,R,bc
			"a"
		Java
			"Object __ a"
		C#
			"object __ a"
		Wolfram
			"a \_"
	typeless_function(identifier name, typeless_parameters params, series_of_statements body)
		Python
			"def __ name ( params ) : \n #indent \n body \n #unindent"
		REBOL
			"name : __ func [ params ] [ body ]"
		C#
			"public __ static __ object __ name ( params ) { body }"
		JavaScript,PHP
			"function __ name ( params ) { body }"
		C++,D
			"auto __ name ( params ) { body }"
		Java
			"Object __ name ( params ) { body }"
		Ruby
			"def __ name ( params ) \n body __ end"
		Perl
			"sub __ name { params body }"
		Lua
			"function __ name ( params ) \n body __ end"
		Octave
			"function __ retval = name ( params ) \n body __ endfunction"
		Prolog
			"name ( params ) __ :- __ body ."
		Picat
			"name ( params ) = to_return => body ."
		Erlang
			"name ( params ) -> body ."
		Haxe
			"static function name ( params ) { body }"
		Wolfram
			"name [ params ] := [ body ]"
		Dart
			"name ( params ) { body }"
	exception(expression a)
		Python
			"raise __ Exception ( a )"
		Ruby
			"raise __ a"
		JavaScript,Java,C++
			"throw __ a"
		Perl
			"die __ a"
		Octave
			"error ( a )"
		PHP
			"throw __ new __ Exception ( a )"
	int_to_string(expression a)
		Python
			"str ( a )"
		Wolfram
			"ToString [ a ]"
		Swift,JavaScript
			"String ( a )"
		Java
			"Integer . toString ( a )"
		Haskell
			"( show __ a )"
		Perl
			"a"
		C#
			"Convert . ToString ( a )"
		Ruby
			"a . to_s"
		C++
			"std :: to_string ( a )"
		Lua
			"tostring ( a )"
		Haxe
			"Std . toString ( a )"
		D
			"std . conv . to!string ( a )"
		PHP
			"( string ) a"
		Dart
			"a . toString ( )"
	split(expression aString, expression separator)
		JavaScript,CoffeeScript,Java,Python,Dart,Scala,Groovy,Haxe,Ruby,Rust
			"aString . split ( separator )"
		Lua
			"string . gmatch ( aString , separator )"
		PHP
			"explode ( separator , aString )"
		Perl,Processing
			"split ( separator , aString )"
		REBOL
			"split __ aString __ separator"
		C#
			"aString . Split ( new string[] { separator } , StringSplitOptions . None )"
		Picat,D
			"split ( aString , separator )"
		Haskell
			"( splitOn __ aString __ separator )"
		Wolfram
			"StringSplit [ aString , separator ]"
	join(expression a, expression b)
		C#
			"String . Join ( separator , array )"
		PHP
			"implode ( separator , array )"
		Perl
			"join ( separator , array )"
		D
			"join ( array , separator )"
		Lua
			"table . concat ( array , separator )"
		Go
			"Strings . join ( array , separator )"
		JavaScript,Haxe,CoffeeScript,Ruby,Groovy,Java
			"array . join ( separator )"
		Python
			"separator . join ( array )"
	function_call_parameter_separator(lang a)
		JavaScript,Wolfram,D,Frink,Delphi,EngScript,Chapel,Perl,Swift,Perl 6,OCaml,Janus,Mathematical notation,Pascal,Rust,Picat,AutoHotKey,Maxima,Octave,Julia,R,Prolog,Fortran,Go,MiniZinc,Erlang,CoffeeScript,PHP,Hack,Java,C#,C,C++,Lua,TypeScript,Dart,Ruby,Python,Haxe,Scala,Visual Basic,Visual Basic .NET
			","
		Hy,crosslanguage,Coq,Scheme,Racket,Common Lisp,CLIPS,REBOL,Haskell,Racket,Clojure
			"__"
	regex(lang a)
		JavaScript
			"RegExp"
		Java
			"Pattern"
		C#
			"Regex"
	all_regex_matches(expression $string, expression $regex_string)
		C#
			"Regex . Matches ( $string , $regex_string )"
		Python
			"re . findall ( re . compile ( $regex_string ) , $string )"
		Ruby
			"$string . scan ( Regexp . new ( $regex_string ) )"
	string_matches_regex(expression $string, expression $regex_string)
		JavaScript
			"$string . matches ( new regExp ( $regex_string ) )"
		Python
			"re . compile ( $regex_string ) . match ( $string )"
		Perl,Haskell
			"( $string =~ $regex_string )"
		Perl 6
			"( $string ~~ $regex_string )"
		Java
			"$string . matches ( $regex_string )"
		Erlang
			"is_match ( $string , $regex_string )"
	string_to_regex(expression a)
		JavaScript
			"new __ RegExp ( a )"
		Java
			"Pattern . compile ( a )"
		Python
			"re . compile ( a )"
		Ruby
			"Regexp . new ( a )"
		C++
			"std::regex( a )"
	string_to_int(expression a)
		Python
			"int ( a )"
		Haxe
			"Std . parseInt ( a )"
		PHP
			"( int ) a"
		Haskell
			"( read __ a )"
		Perl
			"a"
		C#
			"Int32 . Parse( a )"
		Visual Basic .NET
			"Convert . toInt32 ( a )"
		Java
			"Integer . parseInt ( a )"
		C
			"atoi ( a )"
		Scala
			"a . toInt"
		D
			"std . conv . to!int ( a )"
		Ruby
			"Integer ( a )"
		REBOL
			"to __ integer! __ a"
		Lua
			"tonumber ( a )"
		JavaScript
			"parseInt ( a )"
		C++
			"atoi ( a . c_str ( ) )"
		Dart
			"int . parse ( a )"
	typeless_declare_constant(var_name name, expression value)
		PHP,JavaScript,Dart
			"const __ name = value"
		Visual Basic .NET
			"Public __ Const __ name = value"
		Rust,Swift
			"let __ name = value"
		C
			"const __ __auto_type __ name = value"
		C#
			"const __ object __ name = value"
		D,C++
			"const __ auto __ name = value"
		Common Lisp
			"( setf __ name __ value )"
		Scala
			"val __ name = value"
		Python,Ruby,Haskell,Erlang,Julia,Picat,Prolog
			"name = value"
		Lua
			"local __ name = value"
		Perl
			"my __ name = value"
		REBOL
			"name : value"
		Haxe
			"static __ inline __ var __ name = value"
		Java
			"final __ Object __ name = value"
		C
			"static __ const __ name = value"
		Chapel
			"var name = value"
	declare_constant(var_name name, type type, expression value)
		PHP,JavaScript
			"const __ name = value"
		Z3
			"( declare-const __ name __ type ) ( assert __ ( = __ name __ value ) )"
		Visual Basic .NET
			"Public __ Const __ name __ As __ type = value"
		Rust,Swift
			"let __ name = value"
		C++,C,D,C#
			"const __ type __ name = value"
		Common Lisp
			"( setf __ name __ value )"
		MiniZinc
			"type : name = value"
		Scala
			"val __ name : type = value"
		Python,Ruby,Haskell,Erlang,Julia,Picat,Prolog
			"name = value"
		Lua
			"local __ name = value"
		Perl
			"my __ name = value"
		REBOL
			"name : value"
		Haxe
			"static __ inline __ var __ name = value"
		Java
			"final __ type __ name = value"
		C
			"static __ const __ name = value"
		Chapel
			"var name : type = value"
	initialize_array(identifier name, array_type array_type, array_expression expression)
		Java,C,C#,C++,D
			"array_type __ name = expression"
		Scala
			"var __ name = expression"
		Python,Ruby,Haskell,Picat,Prolog,Julia,Octave,Erlang,Mathematica
			"identifier = expression"
		JavaScript,Haxe,PHP,Swift
			"var __ name = expression"
		Perl
			"my __ @ name = expression"
		Lua
			"local __ name = expression"
		REBOL
			"name : expression"
		MiniZinc
			"array_type : name = expression"
		Visual Basic .NET
			"Dim __ name __ of __ array_type = expression"
	array_access_separator(lang a)
		C#,Fortran,Julia,Visual Basic,Visual Basic .NET
			","
		Python,D,Lua,Picat,Janus,Nimrod,AutoIt,Cython,CoffeeScript,Dart,TypeScript,AWK,Vala,Perl,Java,JavaScript,Ruby,Go,C++,PHP,Haxe,C
			"]["
		Haskell
			"!!"
		Scala
			")("
		Frink
			"@"
	array_access_index(expression a)
		Lua,MiniZinc
			"a + 1"
		Haskell,D,Frink,C#,Visual Basic,Janus,Visual Basic .NET,Scala,Octave,Fortran,Python,Swift,Julia,Picat,Nimrod,AutoIt,Cython,CoffeeScript,Dart,TypeScript,AWK,Vala,Perl,Java,JavaScript,Ruby,Go,C++,PHP,Haxe,C
			"a"
	access_array(identifier a, array_access_list b)
		Python,D,Swift,Julia,Janus,MiniZinc,Picat,Nimrod,AutoIt,Cython,CoffeeScript,Dart,TypeScript,AWK,Vala,Perl,Java,JavaScript,Ruby,Go,C++,PHP,Haxe,C
			"a [ b ]"
		C#,Julia
			"a [ b ]"
		Lua
			"a [ b ]"
		Scala,Octave,Fortran
			"a ( b )"
		Visual Basic, Visual Basic .NET
			"a ( b )"
		Haskell
			"( a !! b )"
		Frink
			"a @ b"
		English
			"index __ b __ of __ the __ list __ a"
		English
			"index __ b __ of __ the __ array __ a"
	array_type(type a)
		Lua
			"table"
		Java,C,C#,C++,D
			"a []"
		Python,Picat
			"list"
		MiniZinc
			"array [ a ] of a"
		JavaScript,Ruby
			"Array"
		Haxe
			"Array< a >"
		English,PHP
			"array"
		Julia
			"Array { a }"
		Swift
			"[ a ]"
		Visual Basic .NET
			"A ()"
	initializer_list_separator(lang a)
		Python,D,Frink,Fortran,Chapel,Octave,Julia,English,Pascal,Delphi,Prolog,MiniZinc,EngScript,Cython,Groovy,Dart,TypeScript,CoffeeScript,Nemerle,JavaScript,Haxe,Haskell,Ruby,REBOL,Polish notation,Swift,Java,Picat,C#,Go,Lua,C++,C,Visual Basic .NET,Visual Basic,PHP,Scala,Perl,Wolfram
			","
		REBOL
			"__"
	initializer_list(_initializer_list a)
		Java,Picat,C#,Go,Lua,C++,C,Visual Basic .NET,Visual Basic,Wolfram
			"{ a }"
		Python,D,Frink,REBOL,Octave,Julia,Prolog,MiniZinc,EngScript,Cython,Groovy,Dart,TypeScript,CoffeeScript,Nemerle,JavaScript,Haxe,Haskell,Ruby,REBOL,Polish notation,Swift
			"[ a ]"
		PHP
			"array ( a )"
		Scala
			"Array ( a )"
		Perl,Chapel
			"( a )"
		Fortran
			"(/ a /)"
	key_value(identifier a, expression b)
		Groovy,D,Dart,JavaScript,CoffeeScript,Swift,Elixir,Swift
			"a : b"
		Python
			"' a ' : b"
		Ruby,PHP,Haxe,Perl,Julia
			"a => b"
		REBOL
			"a __ b"
		Lua
			"a = b"
		C++,C#,Visual Basic .NET
			"{ a , b }"
		Scala,Wolfram
			"a -> b"
		Octave
			"a , b"
		Frink
			"[ a , b ]"
		Java
			"put ( a , b )"
	charAt(expression aString, expression index)
		Java,Haxe,Scala,JavaScript
			"aString . charAt ( index )"
		Python,C,PHP,C#,MiniZinc,C++,Ruby,Picat,Haskell
			"aString [ index ]"
		Lua
			"aString : sub( index + 1 , index + 1 )"
		Octave
			"aString ( index )"
		Chapel
			"aString . substring ( index )"
	anonymous_function(parameter_list params, series_of_statements b, type return_type)
		JavaScript,Haxe,R,PHP
			"function ( params ) { b }"
		Haskell
			"(\ params -> b )"
		Frink
			"{ | params | body }"
		Erlang
			"fun ( params ) __ b __ end"
		Lua
			"function ( params ) __ b __ end"
		Swift
			"{ ( params ) -> return_type __ in __ b }"
		Go
			"func ( params ) return_type { b }"
		Dart
			"( ( params ) => b )"
		C++
			"[ = ] ( params ) -> int { b }"
		Java
			"( params ) -> { b }"
		Haxe
			"( name __ params -> b )"
		Python
			"( lambda __ params : b )"
		Delphi
			"function ( params ) begin __ b __ end ;"
		D
			"( params ) { body }"
	auto(lang a)
		C++,EngScript,D
			"auto"
		Java
			"Object"
		JavaScript
			"var"
		C#
			"object"
	void(lang a)
		EngScript,PHP,Hy,Cython,Go,Pike,Objective-C,Java,C,C++,C#,Vala,TypeScript,D
			"void"
		Haxe
			"Void"
		Scala
			"Unit"
		JavaScript,Picat,Ruby,Python,Lua
			"_"
	sin(expression x)
		Java,JavaScript,Ruby,Haxe
			"Math . sin ( x )"
		Lua,Python
			"math . sin ( x )"
		Erlang
			"math:sin ( x )"
		C++
			"std :: sin ( x )"
		C,D,PHP,Perl,Perl 6,Maxima,Fortran,MiniZinc,Swift,Prolog,Octave,Dart,Haskell
			"sin ( x )"
		Haskell,Clojure
			"( sin __ x )"
		REBOL
			"( sine/radians __ x )"
		C#,Visual Basic .NET
			"Math . Sin ( x )"
		Scala
			"scala . math . sin ( x )"
		Wolfram
			"Sin [ a ]"
	sqrt(expression x)
		Java,JavaScript,Ruby,Haxe
			"Math . sqrt ( x )"
		C#,Visual Basic .NET
			"Math . Sqrt ( x )"
		C,Perl,PHP,Perl 6,Maxima,MiniZinc,Prolog,Octave,D,Haskell
			"sqrt ( x )"
		Lua,Python
			"math . sqrt ( x )"
		REBOL
			"( square-root __ x )"
		Scala
			"scala . math . sqrt ( x )"
		C++
			"std :: sqrt ( x )"
		Erlang
			"math:sqrt ( x )"
		Wolfram
			"Sqrt [ x ]"
	cos(expression x)
		Java,JavaScript,Ruby,Haxe
			"Math . cos ( x )"
		Lua,Python
			"math . cos ( x )"
		Erlang
			"math:cos ( x )"
		C,D,Perl,Perl 6,PHP,Maxima,Fortran,MiniZinc,Swift,Prolog,Octave,Dart
			"cos ( x )"
		Haskell,Clojure
			"( cos __ x )"
		REBOL
			"( cosine/radians __ x )"
		C#,Visual Basic .NET
			"Math . Cos ( x )"
		C++
			"std :: cos ( x )"
		Scala
			"scala . math . cos ( x )"
		Wolfram
			"Cos [ a ]"
	tan(expression x)
		Java,JavaScript,Ruby,Haxe
			"Math . tan ( x )"
		Lua,Python
			"math . tan ( x )"
		Lua,Python,Erlang
			"math:tan ( x )"
		C,Perl,Perl 6,PHP,Maxima,Fortran,MiniZinc,Swift,Prolog,Octave,D,Dart
			"tan ( x )"
		Haskell,Clojure
			"( tan x )"
		REBOL
			"( tangent/radians __ x )"
		C#,Visual Basic .NET
			"Math . Tan ( x )"
		C++
			"std :: tan ( x )"
		Scala
			"scala . math . tan ( x )"
		Wolfram
			"Cos [ a ]"
	dictionary(key_value_list a, type input, type output)
		Python,Dart,JavaScript,Lua,Ruby,Julia,C++,EngScript,Visual Basic .NET
			"{ a }"
		Java
			"new __ HashMap < input , output > ( ) { { a } }"
		C#
			"new __ Dictionary < input , output > { a }"
		Perl
			"( a )"
		PHP
			"array( a )"
		Haxe,Frink,Swift,Elixir,D,Wolfram
			"[ a ]"
		Scala
			"Map( a )"
		Octave
			"struct ( a )"
		REBOL
			"to-hash [ a ]"
	access_dict(expression dict, expression key)
		Python,JavaScript,PHP
			"a [ b ]"
		Wolfram
			"Lookup [ a , b ]"
	key_value_separator(lang a)
		Python,Dart,Visual Basic .NET,D,C#,Frink,Swift,JavaScript,PHP,Perl,Lua,Ruby,Prolog,Julia,Haxe,C++,Scala,Octave,Elixir,Wolfram
			","
		Java
			";"
		REBOL
			"__"
	true(lang a)
		Java,Dafny,Z3,Perl 6,Chapel,C,Frink,Elixir,English,Pascal,MiniZinc,EngScript,Picat,Rust,Clojure,Nimrod,Hack,Ceylon,D,Groovy,CoffeeScript,TypeScript,Octave,Prolog,Julia,F#,Swift,Nemerle,Vala,C++,Dart,JavaScript,Ruby,Erlang,C#,Haxe,Go,OCaml,Lua,Scala,PHP,REBOL
			"true"
		Python,Hy,Cython,AutoIt,Haskell,Visual Basic .NET,Visual Basic
			"True"
		Perl,AWK,Tcl
			"1"
		Racket
			"#t"
		Common Lisp
			"t"
		Fortran
			".TRUE."
		R
			"TRUE"
	false(lang a)
		Java,Dafny,Z3,Perl 6,Chapel,C,Frink,Elixir,Pascal,Rust,MiniZinc,EngScript,Picat,Clojure,Nimrod,Groovy,D,Ceylon,TypeScript,CoffeeScript,Octave,Prolog,Julia,Vala,F#,Swift,C++,Nemerle,Dart,JavaScript,Ruby,Erlang,C#,Haxe,Go,OCaml,Lua,Scala,PHP,REBOL,Hack
			"false"
		Python,Hy,Cython,AutoIt,Haskell,Visual Basic .NET,Visual Basic
			"False"
		Perl,AWK,Tcl
			"0"
		Common Lisp
			"nil"
		Racket
			"#f"
		Fortran
			".FALSE."
		R
			"FALSE"
	compareInts(arithmetic_expression a, arithmetic_expression b)
		Lua,Dafny,Wolfram,D,Rust,R,MiniZinc,Frink,Picat,Pike,Pawn,Processing,C++,Ceylon,CoffeeScript,Octave,Swift,AWK,Julia,Perl,Groovy,Erlang,Haxe,Scala,Java,Vala,Dart,Python,C#,C,Go,Haskell,Ruby
			"a == b"
		JavaScript,PHP,TypeScript,Hack
			"a === b"
		Maxima,REBOL,F#,AutoIt,Pascal,Delphi,Visual Basic,Visual Basic .NET
			"a = b"
		Prolog
			"a =:= b"
		Fortran
			"a .eq. b"
		English
			"a __ equals __ b"
		Z3
			"( = __ a __ b )"
	parentheses_expression(expression a)
		Racket,Z3,CLIPS,GNU Smalltalk,newLisp,Hy,Common Lisp,Emacs Lisp,Clojure,Sibilant,LispyScript
			"a"
		Pascal,Katahdin,Frink,MiniZinc,Picat,Java,ECLiPSe,D,ooc,Genie,Janus,PL/I,IDP,Processing,Maxima,Seed7,Self,GNU Smalltalk,Drools,Standard ML,Oz,Cobra,Pike,Prolog,EngScript,Kotlin,Pawn,FreeBASIC,MATLAB,Ada,FreeBASIC,Gosu,Gambas,Nimrod,AutoIt,ALGOL 68,Ceylon,Groovy,Rust,CoffeeScript,TypeScript,Fortran,Octave,ML,Hack,AutoHotKey,Scala,Delphi,Tcl,Swift,Vala,C,F#,C++,Dart,JavaScript,REBOL,Julia,Erlang,OCaml,crosslanguage,C#,Nemerle,AWK,Java,Lua,Perl,Haxe,Python,PHP,Haskell,Go,Ruby,R,bc,Visual Basic,Visual Basic .NET
			"( a )"
	greater_than(arithmetic_expression a, arithmetic_expression b)
		Pascal,Wolfram,Chapel,Katahdin,Frink,MiniZinc,Picat,Java,ECLiPSe,D,ooc,Genie,Janus,PL/I,IDP,Processing,Maxima,Seed7,Self,GNU Smalltalk,Drools,Standard ML,Oz,Cobra,Pike,Prolog,EngScript,Kotlin,Pawn,FreeBASIC,MATLAB,Ada,FreeBASIC,Gosu,Gambas,Nimrod,AutoIt,ALGOL 68,Ceylon,Groovy,Rust,CoffeeScript,TypeScript,Fortran,Octave,ML,Hack,AutoHotKey,Scala,Delphi,Tcl,Swift,Vala,C,F#,C++,Dart,JavaScript,REBOL,Julia,Erlang,OCaml,crosslanguage,C#,Nemerle,AWK,Java,Lua,Perl,Haxe,Python,PHP,Haskell,Go,Ruby,R,bc,Visual Basic,Visual Basic .NET
			"a > b"
		Racket,Z3,CLIPS,GNU Smalltalk,newLisp,Hy,Common Lisp,Emacs Lisp,Clojure,Sibilant,LispyScript
			"( > __ a __ b )"
		English
			"a __ is __ greater __ than __ b"
	less_than(arithmetic_expression a, arithmetic_expression b)
		Pascal,Wolfram,Chapel,Elixir,Katahdin,Frink,MiniZinc,Picat,Java,ECLiPSe,D,ooc,Genie,Janus,PL/I,IDP,Processing,Maxima,Seed7,Self,GNU Smalltalk,Drools,Standard ML,Oz,Cobra,Pike,EngScript,Kotlin,Pawn,FreeBASIC,MATLAB,Ada,FreeBASIC,Gosu,Gambas,Nimrod,AutoIt,ALGOL 68,Ceylon,Groovy,Rust,CoffeeScript,TypeScript,Fortran,Octave,ML,Hack,AutoHotKey,Scala,Delphi,Tcl,Swift,Vala,C,F#,C++,Dart,JavaScript,REBOL,Julia,Erlang,OCaml,crosslanguage,C#,Nemerle,AWK,Java,Lua,Perl,Haxe,Python,PHP,Haskell,Go,Ruby,R,bc,Visual Basic,Visual Basic .NET
			"a < b"
		Prolog
			"a #< b"
		Racket,Z3,CLIPS,GNU Smalltalk,newLisp,Hy,Common Lisp,Emacs Lisp,Clojure,Sibilant,LispyScript
			"( < __ a __ b )"
		English
			"a __ is __ less __ than __ b"
	class_extends(identifier c1, identifier c2, class_statements b)
		Python
			"class __ c1 ( c2 ) : \n #indent \n b \n #unindent"
		Swift,Chapel,D
			"class __ c1 : c2 { b }"
		Haxe,PHP,JavaScript,Dart,TypeScript
			"class __ c1 __ extends __ c2 { b }"
		Java,C#
			"public __ class __ c1 __ extends __ c2 { b }"
		C
			"#include __ ' c2 .h' \n b"
		C++
			"class __ c1 : public __ c2 { b }"
		Ruby
			"class __ c1 __ < __ c2 __ b __ end"
		Perl 6
			"class __ c1 __ is __ c2 { b }"
	class(identifier a, class_statements b)
		Java,C#,C++
			"public __ class __ a { b }"
		REBOL
			"a: __ make __ object! [ b ]"
		JavaScript,Hack,PHP,Scala,Haxe,Chapel,Swift,D,TypeScript,Dart,Perl 6
			"class __ a { b }"
		C++
			"class __ a { b } ;"
		Ruby
			"class __ a __ b __ end"
		Python
			"class __ name : \n #indent \n b \n #unindent"
		Visual Basic .NET
			"Public __ Class __ name __ b __ End Class"
		Perl
			"module a ; b"
	array_contains(array_expression container, expression contained)
		Python,Julia,MiniZinc
			"container __ in __ contained"
		Swift
			"contains ( container , contained )"
		Lua
			"container [ contained ] ~= nil"
		REBOL
			"not __ none? __ find __ container __ contained"
		JavaScript,CoffeeScript
            "container . indexOf ( contained ) !== -1"
        CoffeeScript
            "container . indexOf ( contained ) != -1"
        Ruby
            "container . include? ( contained )"
        Haxe
            "Lambda . has ( container, contained )"
        PHP
            "in_array ( container , container )"
        C#,Visual Basic .NET
            "container . Contains ( contained )"
        Java
            "Arrays . asList ( container ) . contains ( contained )"
        Haskell
			"( elem __ contained __ container )"
	this(var_name a)
		Ruby,CoffeeScript
			"@ a"
		Java,EngScript,Dart,Groovy,TypeScript,JavaScript,C#,C++,Haxe,Chapel
			"this . a"
		Python
			"self . a"
		PHP,Hack
			"$this -> a"
		Swift,Scala
			"a"
		REBOL
			"self / a"
	pow(arithmetic_expression a, arithmetic_expression b)
		Lua
			"math . pow ( a , b )"
		Scala
			"scala.math.pow ( a , b )"
		C#,Visual Basic .NET
			"Math . Pow ( a , b )"
		JavaScript,Java,TypeScript,Haxe
			"Math . pow ( a , b )"
		Python,Chapel,Haskell,COBOL,Picat,ooc,PL/I,REXX,Maxima,AWK,R,F#,AutoHotKey,Tcl,AutoIt,Groovy,Octave,Ruby,Perl,Fortran
			"a ** b"
		REBOL
			"power __ a __ b"
		C,C++,PHP,Hack,Swift,MiniZinc,D
			"pow ( a , b )"
		Julia,EngScript,Visual Basic,Visual Basic .NET,Gambas,Go,Ceylon,Wolfram
			"a ^ b"
		Rust
			"num::pow ( a , b )"
		Hy,Common Lisp,Racket,Clojure
			"( expt __ num1 __ num2 )"
		Erlang
			"math:pow ( a , b )"
	implies(expression a , expression b)
		MiniZinc
			"a -> b"
		Prolog
			"a #==> b"
		Z3
			"( implies __ a __ b )"
	is_implied_by(expression a, expression b)
		MiniZinc
			"a <- b"
		Prolog
			"a #<== b"
	_or(arithmetic_expression a, arithmetic_expression b)
		JavaScript,Wolfram,Chapel,Elixir,Frink,ooc,Picat,Janus,Processing,Pike,nools,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,D,Octave,AWK,Julia,Scala,F#,Swift,Nemerle,Vala,Go,Perl,Java,Haskell,Haxe,C,C++,C#,Dart,R
			"a || b"
		Python,Mathematical notation,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby
			"a __ or __ b"
		Prolog
			"a #\\/ b"
		MiniZinc
			"a \\/ b"
		Common Lisp,Z3,CLIPS,Racket,Sibilant,Clojure,Hy
			"a __ b"
		Visual Basic,Visual Basic .NET
			"a __ Or __ b"
		Fortran
			"a .OR. b"
	or(_or a)
		Python,Wolfram,D,Chapel,Elixir,Fortran,Visual Basic .NET,MiniZinc,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Visual Basic,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby,JavaScript,Hack,PHP,Frink,ooc,Picat,Janus,Processing,Pike,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,Octave,Julia,Scala,F#,Swift,Nemerle,Vala,Dart,C,C++,C#,OCaml,AWK,Java,Haskell,Haxe,Bash,Haxe,Go,Perl,R,Prolog
			"a"
		Common Lisp,Z3,CLIPS,Racket,Sibilant,Clojure,Hy
			"( or __ a )"
	_and(boolean_expression a, boolean_expression b)
		JavaScript,Wolfram,D,Chapel,Elixir,Hack,PHP,Frink,ooc,Picat,Janus,Processing,Pike,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,Octave,Julia,Scala,F#,Swift,Nemerle,Vala,Dart,C,C++,C#,OCaml,AWK,Java,Haskell,Haxe,Bash,Haxe,Go,Perl,R
			"a && b"
		Visual Basic,Visual Basic .NET,OpenOffice Basic
			"a __ And __ b"
		Python,Mathematical notation,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby
			"a __ and __ b"
		Prolog
			"a #/\\ b"
		MiniZinc
			"a /\\ b"
		Common Lisp,Z3,newLisp,Racket,Clojure,Sibilant,Hy,CLIPS
			"a __ b"
		Fortran
			"a .AND. b"
	and(_and a)
		Prolog,Wolfram,D,Chapel,Elixir,Fortran,Visual Basic,Visual Basic .NET,OpenOffice Basic,Python,MiniZinc,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby,JavaScript,Hack,PHP,Frink,ooc,Picat,Janus,Processing,Pike,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,Octave,Julia,Scala,F#,Swift,Nemerle,Vala,Dart,C,C++,C#,OCaml,AWK,Java,Haskell,Haxe,Bash,Haxe,Go,Perl,R
			"a"
		Common Lisp,Z3,newLisp,Racket,Clojure,Sibilant,Hy,CLIPS
			"( and __ a )"
	not(boolean_expression a)
		Python,MiniZinc,Picat,Genie,Seed7,Z3,IDP,Maxima,CLIPS,EngScript,Hy,OCaml,Clojure,Erlang,Pascal,Delphi,F#,ML,Lua,Racket,Common Lisp,crosslanguage,REBOL,Haskell,Sibilant
			"not __ a"
		Java,Katahdin,CoffeeScript,Frink,D,ooc,Ceylon,Processing,Janus,Pawn,AutoHotKey,Groovy,Scala,Hack,Rust,Octave,TypeScript,Julia,AWK,Swift,Scala,Vala,Nemerle,Pike,Perl,C,C++,Objective-C,Tcl,JavaScript,R,Dart,Java,Go,Ruby,PHP,Haxe,C#,Wolfram
			"! a"
		Prolog
			"\\+ a"
		Visual Basic,Visual Basic .NET,AutoIt
			"Not a"
		Fortran
			".NOT. a"
		Gambas
			"NOT a"
		Rexx
			"\\ a"
		PL/I
			"^ a"
		PowerShell
			"-not a"
	_multiply(arithmetic_expression a, arithmetic_expression b)
		C,POP-11,Dafny,Wolfram,Chapel,Katahdin,Mathematical notation,Frink,MiniZinc,COBOL,ooc,Genie,B-Prolog,ECLiPSe,Elixir,nools,Pyke,Picat,PL/I,REXX,IDP,Falcon,Processing,Maxima,Sympy,Mercury,Self,GNU Smalltalk,Boo,Drools,Seed7,Occam,Standard ML,EngScript,Pike,Oz,Kotlin,Pawn,MATLAB,Ada,PowerShell,Gosu,AWK,Gambas,Nimrod,AutoHotKey,Julia,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,Haxe,Pascal,Delphi,Swift,Nemerle,Vala,R,Red,C++,Erlang,Scala,AutoIt,Cobra,F#,Perl,PHP,Go,Ruby,Lua,Haskell,Hack,Java,OCaml,REBOL,Python,JavaScript,C#,Visual Basic,Visual Basic .NET,Dart
			"a * b"
		Prolog
			"a #* b"
		Racket,Perl 6,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a __ b"
	multiply(_multiply a)
		C,POP-11,Dafny,Wolfram,Chapel,Perl 6,Mathematical notation,Katahdin,Frink,MiniZinc,COBOL,ooc,Genie,B-Prolog,ECLiPSe,Elixir,nools,Pyke,Picat,PL/I,REXX,IDP,Falcon,Processing,Maxima,Sympy,Mercury,Self,GNU Smalltalk,Boo,Drools,Seed7,Occam,Standard ML,EngScript,Prolog,Pike,Oz,Kotlin,Pawn,MATLAB,Ada,PowerShell,Gosu,AWK,Gambas,Nimrod,AutoHotKey,Julia,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,Haxe,Pascal,Delphi,Swift,Nemerle,Vala,R,Red,C++,Erlang,Scala,AutoIt,Cobra,F#,Perl,PHP,Go,Ruby,Lua,Haskell,Hack,Java,OCaml,REBOL,Python,JavaScript,C#,Visual Basic,Visual Basic .NET,Dart
			"a"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"( * __ a )"
	_divide(arithmetic_expression a, arithmetic_expression b)
		Java,POP-11,Dafny,Wolfram,Chapel,Perl 6,Mathematical notation,Pascal,Visual Basic .NET,REBOL,Katahdin,Frink,MiniZinc,Aldor,Picat,COBOL,B-Prolog,Genie,ooc,Falcon,Oz,PL/I,IDP,REXX,Processing,Maxima,Sympy,Elixir,nools,Standard ML,Delphi,Pike,Self,GNU Smalltalk,Cobra,Kotlin,Seed7,Drools,EngScript,Pawn,MATLAB,FreeBASIC,Ada,PowerShell,Gosu,Gambas,Nimrod,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,AWK,Julia,F#,Visual Basic,Swift,Nemerle,Vala,Go,Dart,R,C,C++,Python,Scala,AutoIt,Perl,Erlang,Hack,Ruby,Haxe,Lua,Haskell,OCaml,JavaScript,C#,PHP
			"a / b"
		Prolog
			"a #/ b"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a __ b"
	divide(_divide a)
		Java,POP-11,Dafny,Wolfram,Chapel,Perl 6,Mathematical notation,Pascal,Visual Basic .NET,REBOL,Katahdin,Frink,MiniZinc,Aldor,Picat,COBOL,B-Prolog,Genie,ooc,Falcon,Oz,PL/I,IDP,REXX,Processing,Maxima,Sympy,Elixir,nools,Standard ML,Delphi,Pike,Self,GNU Smalltalk,Cobra,Kotlin,Seed7,Drools,Prolog,EngScript,Pawn,MATLAB,FreeBASIC,Ada,PowerShell,Gosu,Gambas,Nimrod,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,AWK,Julia,F#,Visual Basic,Swift,Nemerle,Vala,Go,Dart,R,C,C++,Python,Scala,AutoIt,Perl,Erlang,Hack,Ruby,Haxe,Lua,Haskell,OCaml,JavaScript,C#,PHP
			"a"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"( / __ a )"
	_add(arithmetic_expression a, arithmetic_expression b)
		Java,POP-11,Dafny,Janus,Wolfram,Chapel,Bash,Perl 6,Mathematical notation,Katahdin,Frink,MiniZinc,Aldor,COBOL,ooc,Genie,ECLiPSe,nools,B-Prolog,Agda,Picat,PL/I,REXX,IDP,Falcon,Processing,Sympy,Maxima,Pyke,Elixir,GNU Smalltalk,Seed7,Standard ML,Occam,Boo,Drools,Icon,Mercury,EngScript,Pike,Oz,Kotlin,Pawn,FreeBASIC,Ada,PowerShell,Gosu,Nimrod,Cython,OpenOffice Basic,ALGOL 68,D,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,Delphi,Pascal,F#,Self,Swift,Nemerle,Dart,C,AutoIt,Cobra,Julia,Groovy,Scala,OCaml,Erlang,Gambas,Hack,C++,MATLAB,REBOL,Red,Lua,Go,AWK,Haskell,Perl,Python,JavaScript,C#,PHP,Ruby,R,Haxe,Visual Basic,Visual Basic .NET,Vala,bc
			"a + b"
		Prolog
			"a #+ b"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a __ b"
	add(_add a)
		Java,POP-11,Dafny,Wolfram,Chapel,Perl 6,Janus,Bash,Mathematical notation,Katahdin,Frink,MiniZinc,Aldor,COBOL,ooc,Genie,ECLiPSe,nools,B-Prolog,Agda,Picat,PL/I,REXX,IDP,Falcon,Processing,Sympy,Maxima,Pyke,Elixir,GNU Smalltalk,Seed7,Standard ML,Occam,Boo,Drools,Icon,Mercury,EngScript,Pike,Oz,Kotlin,Pawn,FreeBASIC,Ada,PowerShell,Gosu,Nimrod,Cython,OpenOffice Basic,ALGOL 68,D,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,Prolog,Delphi,Pascal,F#,Self,Swift,Nemerle,Dart,C,AutoIt,Cobra,Julia,Groovy,Scala,OCaml,Erlang,Gambas,Hack,C++,MATLAB,REBOL,Red,Lua,Go,AWK,Haskell,Perl,Python,JavaScript,C#,PHP,Ruby,R,Haxe,Visual Basic,Visual Basic .NET,Vala,bc
			"a"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"( + __ a )"
	_subtract(arithmetic_expression a, arithmetic_expression b)
		Java,POP-11,Dafny,Wolfram,Chapel,Janus,Mathematical notation,Katahdin,Frink,PyCharm,MiniZinc,Aldor,COBOL,Genie,ooc,Pawn,B-Prolog,nools,ECLiPSe,Elixir,Pyke,Mercury,Picat,PL/I,REXX,IDP,Falcon,Processing,Maxima,Sympy,Self,GNU Smalltalk,Pike,Gambas,Nimrod,Kotlin,Occam,Drools,Gosu,Boo,Oz,Seed7,Standard ML,Occam,MATLAB,Cobra,EngScript,PowerShell,OpenOffice Basic,Cython,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,AWK,Julia,Delphi,Pascal,Swift,Nemerle,Vala,R,Go,Dart,C,C++,AutoIt,Scala,Perl,Erlang,F#,Hack,OCaml,Haskell,Python,REBOL,Red,JavaScript,C#,PHP,Visual Basic,Visual Basic .NET,Ruby,Haxe,Lua,Perl 6
			"a - b"
		Prolog
			"a #- b"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a __ b"
	subtract(_subtract a)
		Java,POP-11,Dafny,Wolfram,EngScript,Chapel,Perl 6,Janus,Bash,Mathematical notation,Katahdin,Frink,MiniZinc,Aldor,COBOL,ooc,Genie,ECLiPSe,nools,B-Prolog,Agda,Picat,PL/I,REXX,IDP,Falcon,Processing,Sympy,Maxima,Pyke,Elixir,GNU Smalltalk,Seed7,Standard ML,Occam,Boo,Drools,Icon,Mercury,EngScript,Pike,Oz,Kotlin,Pawn,FreeBASIC,Ada,PowerShell,Gosu,Nimrod,Cython,OpenOffice Basic,ALGOL 68,D,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,Prolog,Delphi,Pascal,F#,Self,Swift,Nemerle,Dart,C,AutoIt,Cobra,Julia,Groovy,Scala,OCaml,Erlang,Gambas,Hack,C++,MATLAB,REBOL,Red,Lua,Go,AWK,Haskell,Perl,Python,JavaScript,C#,PHP,Ruby,R,Haxe,Visual Basic,Visual Basic .NET,Vala,bc
			"a"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"( - __ a )"
	function_call(dot_notation a, function_call_parameters b)
		C,Chapel,Elixir,Janus,Perl 6,Pascal,Rust,Hack,Katahdin,MiniZinc,Pawn,Aldor,Picat,D,Genie,ooc,PL/I,Delphi,Standard ML,REXX,Falcon,IDP,Processing,Maxima,Swift,Boo,R,MATLAB,AutoIt,Pike,Gosu,AWK,AutoHotKey,Gambas,Kotlin,Nemerle,EngScript,Prolog,Groovy,Scala,CoffeeScript,Julia,TypeScript,Fortran,Octave,C++,Go,Cobra,Ruby,Vala,F#,Java,Ceylon,OCaml,Erlang,Python,C#,Lua,Haxe,JavaScript,Dart,bc,Visual Basic,Visual Basic .NET,PHP,Perl
			"a ( b )"
		Haskell,Z3,CLIPS,Clojure,Common Lisp,CLIPS,Racket,Scheme,crosslanguage
			"( a __ b )"
		REBOL
			"a __ b"
		EngScript,Oz
			"a { b }"
		Haxe
			"Sys . systemName ( )"
		Frink,Wolfram
			"a [ b ]"
	detect_OS(lang a)
		Go
			"runtime . GOOS"
		Python
			"platform . system"
		Java
			"System . getProperty ( \"os.name\" )"
		Perl
			"$^O"
		C#
			"Environment . OSVersion . ToString ( )"
		PHP
			"php_uname ( a )"
	double(lang a)
		Java,C,C++,C#,D
			"double"
		JavaScript
			"number"
		Python,PHP
			"float"
		Visual Basic .NET
			"Double"
		Z3
			"Real"
	concatenate_string(string_expression a, string_expression b)
		Common Lisp
			"( concatenate __ 'string __ a __ b )"
		Java,Chapel,Frink,FreeBASIC,Nemerle,D,Cython,Ceylon,CoffeeScript,TypeScript,Dart,Gosu,Groovy,Scala,Swift,F#,Python,JavaScript,C#,Haxe,Ruby,C++,Vala
			"a + b"
		Lua,EngScript
			"a .. b"
		Fortran
			"a // b"
		PHP,AutoHotKey,Hack,Perl
			"a . b"
		OCaml
			"a ^ b"
		REBOL
			"append __ a __ b"
		Haskell,MiniZinc,Picat,Elm
			"a ++ b"
		CLIPS
			"( str-cat a b )"
		Clojure
			"( str a b )"
		Erlang
			"string:concat ( a , b )"
		Julia
			"string ( a , b )"
		Octave
			"strcat ( a , b )"
		Racket
			"( string-append a b )"
		Delphi
			"Concat ( a , b )"
		Visual Basic,Gambas,Nimrod,AutoIt,Visual Basic .NET,OpenOffice Basic
			"a & b"
		Elixir,Wolfram
			"a <> b"
		Perl 6
			"a ~ b"
	initialize_var(var_name name, type type, expression value)
		Rust
			"let __ mut __ name = value"
		Dafny
			"var name : type := value"
		Z3
			"( declare-const __ name __ type ) ( assert __ ( = __ name __ value ) )"
		F#
			"let __ mutable __ name = value"
		Common Lisp
			"( setf __ name __ value )"
		MiniZinc
			"type : name = value"
		Python,Ruby,Haskell,Erlang,Prolog,Julia,Picat,Octave
			"name = value"
		JavaScript,PHP,Hack,Swift
			"var __ name = value"
		Lua
			"local __ name = value"
		Janus
			"local __ type __ name = value"
		Perl
			"my __ name = value"
		C,Java,C#,C++,D,TypeScript
			"type __ name = value"
		REBOL
			"name : value"
		Visual Basic,Visual Basic .NET,OpenOffice Basic
			"Dim __ name __ As __ type = value"
		R
			"name <- value"
		Fortran
			"type :: name = value"
		Chapel,Haxe,Scala,TypeScript
			"var __ name : type = value"
	return(expression a)
		Java,Kal,EngScript,Pawn,Ada,PowerShell,Rust,D,Ceylon,TypeScript,Hack,AutoHotKey,Gosu,Swift,Pike,Objective-C,C,Groovy,Scala,CoffeeScript,Julia,Dart,C#,JavaScript,Go,Haxe,PHP,C++,Perl,Vala,Lua,Python,REBOL,Ruby,Tcl,AWK,bc,Chapel,Perl 6
			"return __ a"
		MiniZinc,Z3,Erlang,Maxima,Standard ML,Icon,Oz,CLIPS,newLisp,Hy,Sibilant,LispyScript,ALGOL 68,Clojure,Prolog,Common Lisp,F#,OCaml,Haskell,ML,Racket,Nemerle
			"a"
		Visual Basic,Visual Basic .NET,AutoIt
			"Return __ a"
		Octave,Fortran
			"retval = a"
		Pascal
			"Exit ( a )"
		Picat
			"to_return = a"
		R
			"return ( a )"
		Wolfram
			"Return [ a ]"
		POP-11
			"a -> Result"
	var_name(identifier name)
		PHP,Perl,Bash,Tcl,AutoIt,Perl 6,Puppet,Hack,AWK,PowerShell
			"$ name"
		EngScript,Wolfram,crosslanguage,Erlang,English,Mathematical notation,Pascal,Picat,Prolog,Katahdin,TypeScript,JavaScript,Frink,MiniZinc,Aldor,Flora-2,F-logic,D,Genie,ooc,Janus,Chapel,ABAP,COBOL,PicoLisp,REXX,PL/I,Falcon,IDP,Processing,Sympy,Maxima,Z3,Shen,Ceylon,nools,Pyke,Self,GNU Smalltalk,Elixir,LispyScript,Standard ML,Nimrod,Occam,ANTLR,Boo,Seed7,pyparsing,EBNF,Agda,Icon,Octave,Cobra,Kotlin,C++,Drools,Oz,Pike,Delphi,Racket,ML,Java,Pawn,Fortran,Ada,FreeBASIC,MATLAB,newLisp,Hy,OCaml,Julia,AutoIt,C#,Gosu,AutoHotKey,Groovy,Rust,R,Swift,Vala,Go,Scala,Nemerle,Visual Basic,Visual Basic .NET,Clojure,Haxe,CoffeeScript,Dart,JavaScript,C#,Python,Ruby,Haskell,C,Lua,Gambas,Common Lisp,Scheme,REBOL,F#
			"name"
		CLIPS
			"? name"
	func(identifier name, parameter_list params, series_of_statements body, type return_type)
		Frink
			"name [ params ] := { body }"
		POP-11
			"define __ name ( params ) -> Result; __ body __ enddefine;"
		Z3
			"( define-fun __ name ( params ) __ return_type __ body )"
		Mathematical notation
			"name ( params ) = { body }"
		Chapel
			"proc __ name ( params ) : return_type { body }"
		Prolog
			"name ( params ) __ :- __ body ."
		Picat
			"name ( params ) = to_return => body ."
		Swift
			"func __ name ( params ) -> return_type { body }"
		Maxima
			"name ( params ) := body"
		Rust
			"fn __ name ( params ) -> return_type { body }"
		Clojure
			"( defn name [ params ] body )"
		Octave
			"function __ retval = name ( params ) body __ endfunction"
		Haskell
			"name __ params = \n body"
		Common Lisp
			"(defun __ name ( params ) body )"
		Fortran
			"FUNC __ name __ ( params ) __ RESULT ( retval ) __ return_type :: retval __ body __ END __ FUNCTION __ name"
		Scala
			"def __ name ( params ) : return_type = { body }"
		MiniZinc
			"function __ return_type : name ( params ) = body ;"
		CLIPS
			"( deffunction __ name ( params ) body )"
		Erlang
			"name ( params ) -> body"
		Python
			"def __ name ( params ) -> type : \n #indent \n body \n #unindent"
		Perl
			"sub __ name { params __ body }"
		Perl 6
			"sub __ name ( params ) { body }"
		Pawn
			"name ( params ) { body }"
		JavaScript,PHP
			"function __ name ( params ) { body }"
		Ruby
			"def __ name ( params ) __ body __ end"
		Lua,Julia
			"function __ name ( params ) __ body __ end"
		Java,C#
			"public __ static __ return_type __ name ( params ) { body }"
		C++,Vala,C,Dart,Ceylon,Pike,D
			"return_type __ name ( params ) { body }"
		TypeScript
			"function __ name ( params ) : return_type { body }"
		REBOL
			"name : __ func [ params ] [ body ]"
		Haxe
			"public __ static __ function __ name ( params ) : return_type { body }"
		Hack
			"function __ name ( params ) : return_type { body }"
		R
			"name <- function ( params ) { body }"
		bc
			"define name ( params ) { body }"
		Visual Basic,Visual Basic .NET
			"Function name ( params ) As return_type body End Function"
		Racket,newLisp
			"(define (name params) body )"
		Janus
			"procedure name ( params ) body"
		Wolfram
			"name [ params ] := body"
	inverseFunction(identifier a)
		Wolfram
			"InverseFunction [ a ]"
	ternary_if(expression a, expression b, expression c)
		CoffeeScript,Haskell
			"if __ a __ then __ b __ else __ c"
		Z3
			"( ite __ a __ b __ c )"
		AutoHotKey,JavaScript,Java,Ruby,C#,AWK,Perl,Swift,C,PHP
			"a ? b : c"
		Perl 6
			"a ?? b !! c"
		Python
			"b __ if __ a __ else __ c"
		R
			"if __ a __ b __ else __ c"
		Visual Basic .NET
			"if ( a , b , c )"
		Lua
			"function (  ) __ if __ a __ then __ return __ b __ else __ return __ c __ end __ end"
	null_coalescing_operator(expression possibly_null_value, expression value_if_null)
		Perl
			"possibly_null_value // value_if_null"
		C#,Swift,PHP
			"possibly_null_value ?? value_if_null"
		Kotlin
			"possibly_null_value ?: value_if_null"
		Clojure
			"( or __ possibly_null_value __ value_if_null )"
		Java
			"( possibly_null_value != null ) ? possibly_null_value : value_if_null"
		JavaScript
			"( ( possibly_null_value !== null ) || ( possibly_null_value !== undefined ) ) ? possibly_null_value : value_if_null"
		Visual Basic .NET
			"If ( possibly_null_value , value_if_null )"
	if(expression a, series_of_statements b, elif_or_else c)
		Erlang
			"if __ a -> b __ c __ end"
		REBOL
			"case [ a [ b ] c ]"
		Julia
			"if __ a __ b __ c __ end"
		Lua,Ruby,Picat
			"if __ a __ then __ b __ c __ end"
		Octave
			"if __ a __ b __ c __ endif"
		Haskell,Pascal,Maxima
			"if __ a __ then __ b __ c"
		Java,Perl 6,Chapel,Katahdin,Pawn,PowerShell,D,Ceylon,TypeScript,ActionScript,Hack,AutoHotKey,Gosu,Nemerle,Swift,Nemerle,Pike,Groovy,Scala,Dart,JavaScript,C#,C,C++,Perl,Haxe,PHP,R,AWK,Vala,bc,Squirrel
			"if ( a ) { b } c"
		Rust,Go
			"if __ a { b } c"
		Visual Basic,Visual Basic .NET
			"If __ a __ b __ c"
		CLIPS
			"( if __ a __ then __ b __ c )"
		Z3
			"( ite __ a __ b __ c )"
		MiniZinc
			"if __ a __ then __ b __ c __ endif"
		Python,Cython
			"if __ a : \n #indent \n b \n #unindent \n c"
		Prolog
			"( a -> b ; c )"
		Visual Basic
			"If __ a __ Then __ b __ c __ End __ If"
		Fortran
			"IF __ a __ THEN __ b __ c __ END __ IF"
		Common Lisp
			"( cond ( a __ b ) __ c )"
		Wolfram
			"If [ a , b , c ]"
	unless(expression a, series_of_statements b)
		Perl,Perl 6
			"unless ( a ) { b }"
		Ruby
			"unless __ a __ b __ end"
		Java,JavaScript,C,C++,C#,Haxe
			"if(! a ) { b }"
	elif(expression a, series_of_statements b, elif_or_else c)
		D,Chapel,Pawn,Ceylon,Scala,TypeScript,AutoHotKey,AWK,R,Groovy,Gosu,Katahdin,Java,Swift,Nemerle,C,Dart,Vala,JavaScript,C#,C++,Haxe
			"else __ if ( a ) { b } c"
		Z3
			"( ite __ a __ b __ c )"
		Rust,Go
			"else __ if __ a { b } c"
		PHP,Hack,Perl
			"elseif ( a ) { b } c"
		Julia,Octave,Lua
			"elseif __ a __ b __ c"
		Ruby
			"elsif __ a __ then __ b __ c"
		Picat
			"elseif __ a __ then __ b __ c"
		Haskell,Pascal,Maxima
			"else __ if __ a __ then __ b __ c"
		Erlang
			"a -> b __ c"
		R,F#
			"a <- b __ c"
		CLIPS
			"( if __ a __ then __ ( b __ c ) )"
		MiniZinc
			"else __ if __ a __ then __ b __ c"
		Python,Cython
			"elif __ a : \n #indent \n b \n #unindent __ c"
		Prolog
			"a -> b ; __ c"
		Visual Basic .NET
			"ElseIf __ a __ Then __ b __ c"
		Fortran
			"ELSE __ IF __ a __ THEN __ b __ c"
		REBOL
			"a [ b ] __ c"
		Common Lisp
			"( a __ b ) __ c"
		English
			"otherwise __ if __ a __ then __ b __ c"
		Wolfram
			"If [ a , b , c ]"
	plus_equals(expression a, expression b)
		Janus,Python,Lua,Java,C,C++,C#,JavaScript,Haxe,PHP,Chapel
			"a += b"
		Ruby,Picat
			"a = a + b"
	minus_equals(expression a, expression b)
		Janus,Python,Ruby,Lua,Java,C,C++,C#,JavaScript,PHP,Haxe,Hack
			"a -= b"
	else(series_of_statements a)
		Hack,Dafny,Perl 6,Frink,Chapel,Katahdin,Pawn,PowerShell,Puppet,Ceylon,D,Rust,TypeScript,Scala,AutoHotKey,Gosu,Groovy,Java,Swift,Dart,AWK,JavaScript,Haxe,PHP,C#,Go,Perl,C++,C,Tcl,R,Vala,bc
			"else { a }"
		Ruby,Janus,Lua,Haskell,CLIPS,MiniZinc,Julia,Octave,Picat,Pascal,Maxima
			"else \n a"
		Erlang
			"true -> a"
		Python,Cython
			"else : \n #indent \n b \n #unindent"
		Prolog
			"a"
		Visual Basic .NET
			"Else __ a"
		Fortran
			"ELSE __ a"
		REBOL
			"true [ a ]"
		Common Lisp
			"( t __ a )"
		English
			"otherwise __ a"
		Wolfram,Z3
			"a"
	do_while(boolean_expression a, series_of_statements b)
		JavaScript,C#,C,C++,D,Java,PHP
			"do { b } while (a) ;"
		Ruby
			"begin __ b __ end __ while __ a"
		Swift
			"repeat { b } while __ a"
		Visual Basic .NET
			"Do __ b __ Loop __ While __ a"
	while(boolean_expression a, series_of_statements b)
		Pascal
			"while __ a __ do __ begin __ b __ end;"
		Delphi
			"While __ a __ do __ begin __ b __ end;"
		Rust,Frink,Dafny
			"while __ a { b }"
		C,Perl 6,Katahdin,Chapel,ooc,Processing,Pike,Kotlin,Pawn,PowerShell,Hack,Gosu,AutoHotKey,Ceylon,D,TypeScript,ActionScript,Nemerle,Dart,Swift,Groovy,Scala,Java,JavaScript,PHP,C#,Perl,C++,Haxe,R,AWK,Vala
			"while ( a ) { b }"
		Lua,Ruby,Julia
			"while __ a __ b __ end"
		Picat
			"while __ ( a ) __ b __ end"
		REBOL
			"while [ a ] [ b ]"
		Common Lisp
			"( loop __ while __ a __ do __ b )"
		Hy,newLisp,CLIPS
			"( while __ a __ b )"
		Python,Cython
			"while __ a : \n #indent \n b \n #unindent"
		Visual Basic,Visual Basic .NET
			"While __ a __ b __ End While"
		Fortran
			"WHILE __ ( a ) __ DO __ b __ ENDDO"
		Octave
			"while ( a ) __ endwhile"
		Wolfram
			"While [ a , b ]"
	for_in_range(var_name var_name, arithmetic_expression startWith, arithmetic_expression endWith, series_of_statements body)
		Haxe
			"for ( var __ var_name : int = startWith ; var_name < endWith ; var_name ++ ) { body }"
		Julia
			"for __ var_name = startWith .. endWith __ body __ end"
		Fortran
			"do __ var_name = startWith , endWith __ body __ end __ do"
		C
			"int __ var_name ; for ( var_name = startWith ; var_name < endWith ; var_name ++ ) { body }"
		Perl
			"foreach __ my __ var_name ( startWith .. endWith ) { body }"
		Python,Cython
			"for __ var_name __ in __ range ( startWith , endWith ) : \n #indent \n body \n #unindent"
		Visual Basic,Visual Basic .NET
			"For __ var_name __ As __ Integer = startWith __ To __ endWith __ body __ Next"
		Java,C#,C++
			"for ( int __ var_name = startWith ; var_name < endWith ; var_name ++ ) { body }"
		JavaScript,TypeScript,PHP
			"for ( var __ var_name = startWith ; var_name < endWith ; var_name ++ ) { body }"
		R
			"for ( var_name __ in __ startWith : endWith ) { body }"
		REBOL
			"for __ var_name __ startWith __ endWith __ 1 [ body ]"
		Rust
			"for __ var_name __ in __ range ( startWith , endWith ) { body }"
		Scala
			"for ( var_name <- startWith to endWith ) { body }"
		Lua
			"for __ var_name = startWith , endWith , 1 do __ body __ end"
		Swift
			"for __ var_name __ in __ startWith ... endWith { body }"
		Ruby
			"for __ var_name __ in __ startWith .. endWith __ body __ end"
		Groovy
			"for ( var_name __ in __ startWith .. endWith ) { body }"
		CoffeeScript
			"for $var_name in [$startWith... endWith ] \n #indent \n body \n #unindent"
	listComprehension(expression result, var_name variable, array_expression array, boolean_expression condition)
		crosslanguage
			"( listComprehension __ result __ variable __ array __ condition )"
		Python,Cython
			"[ result __ for __ variable __ in __ array __ if __ condition ]"
		JavaScript
			"[ result __ for ( variable __ of __ array ) if __ condition ]"
		CoffeeScript
            "( result __ for __ variable __ in __ array __ when __ condition )"
        MiniZinc
            "[ result | variable __ in __ array __ where __ condition ]"
        Haxe
            "[ for ( variable __ in __ array ) if ( condition ) result ]"
        C#
            "( from __ variable __ in __ array __ where __ condition __ select __ result )"
        Haskell
            "[ result | variable <- array , condition ]"
        Erlang
            "[ result || variable <- array , condition ]"
        Ruby
            "array . select { | variable | condition } . collect { | variable | result }"
        Scala
            "( for ( variable <- array __ if __ condition ) yield __ result )"
        Groovy
            "array.grep { variable -> condition }.collect { variable -> result }"
        Dart
            "array . where ( variable => condition ) . map ( variable => result )"
		Picat
			"[ result : variable __ in __ array , condition ]"
	import(expression a)
		crosslanguage
			"(import __ a )"
		Fortran
			"USE __ a"
		Visual Basic .NET
			"Imports __ a"
		REBOL
			"a : __ load __ % a .r"
		Prolog
			":- consult( a ) ."
		MiniZinc
			"include __ ' a .mzn' ;"
		PHP
			"include __ \' a .php\' ;"
		C,C++
			"#include __ \" a .h\""
		C#
			"using __ a ;"
		Julia
			"using __ a"
		Haskell,EngScript,Python,Scala,Go,Groovy,Picat,Elm,Swift
			"import __ a"
		Java,D,Haxe
			"import __ a ;"
		Ruby,Lua
			"require __ ' a '"
		Perl,Perl 6,Chapel
			"use a ;"
	default_parameter(type type, var_name name, expression value)
		Python,AutoHotKey,Julia,Nemerle,PHP
			"name = value"
		C#,D,Groovy
			"type __ name = value"
		Ruby
			"name : value"
		Scala,Swift,Python
			"name : type = value"
		Haxe
			"? name = value"
		Visual Basic .NET
			"Optional __ name __ As __ type = value"
	print(expression a)
		Erlang
			"io : fwrite ( a )"
		C++
			"cout << a"
		Haxe
			"trace ( a )"
		Prolog
			"write ( a )"
		C#
			"Console . WriteLine ( a )"
		REBOL,Fortran,Perl,PHP
			"print __ a"
		Ruby
			"puts ( a )"
		Visual Basic .NET
			"System . Console . WriteLine ( a )"
		Scala,Julia,Swift
			"println ( a )"
		JavaScript,TypeScript
			"console . log ( a )"
		Python,Cython,Ceylon,R,Gosu,Dart,Vala,Perl,PHP,Hack,AWK
			"print ( a )"
		Java
			"System . out . println ( a )"
		C
			"printf ( a )"
		Haskell
			"( putStrLn __ a )"
		Hy,Common Lisp,crosslanguage
			"( print __ a )"
		Rust
			"println!( a )"
		Octave
			"disp ( a )"
		Chapel,D
			"writeln ( a )"
		Frink
			"print [ a ]"
		Wolfram
			"Print [ a ]"
	comment(_comment a)
		OCaml,Standard ML,ML
			"(*{ a }*)"
		Wolfram
			"(* a *)"
		REBOL
			"comment [ a ]"
		Java,Dafny,Janus,Chapel,Rust,Frink,D,Genie,Ceylon,Hack,Maxima,Kotlin,Delphi,Dart,TypeScript,Swift,Vala,C#,JavaScript,Haxe,Scala,Go,C,C++,Pike,PHP,F#,Nemerle,crosslanguage,Gosu,Groovy
			"// a"
		Gambas,Visual Basic,Visual Basic .NET
			"' a"
		Bash,Perl 6,PowerShell,Seed7,Cobra,Icon,EngScript,Nimrod,CoffeeScript,Julia,AWK,Ruby,Perl,R,Tcl,bc,Python,Cython
			"# a"
		Lua,Haskell,Ada
			"-- a"
		MATLAB,MiniZinc,Octave,Erlang,Prolog,Picat
			"% a"
		Racket,CLIPS,AutoIt,AutoHotKey,Common Lisp,Clojure,newLisp,Z3
			"; a"
		Fortran
			"! a"
		Pascal
			"{ a }"
		crosslanguage
			"( comment __ a )"
	mod(arithmetic_expression a, arithmetic_expression b)
		Java,D,Frink,ooc,Genie,Pike,Ceylon,Pawn,PowerShell,CoffeeScript,Gosu,Janus,Groovy,EngScript,AWK,Julia,Scala,F#,Swift,R,Perl,Nemerle,Haxe,PHP,Hack,Vala,Lua,Tcl,Go,Dart,JavaScript,Python,C,C++,C#,Ruby
			"a % b"
		REBOL
			"mod __ a __ b"
		Haskell,MiniZinc,OCaml,Delphi,Pascal,Picat
			"a __ mod __ b"
		Prolog,Octave,MATLAB,AutoHotKey,Fortran
			"mod ( a , b )"
		Erlang
			"a __ rem __ b"
		CLIPS,Clojure,Common Lisp,crosslanguage
			"( mod __ a __ b )"
		Visual Basic,Visual Basic .NET
			"a __ Mod __ b"
		Wolfram
			"Mod [ a , b ]"
	semicolon(lang a)
		C,Dafny,Chapel,Katahdin,Frink,MiniZinc,Falcon,Aldor,IDP,Processing,Maxima,Seed7,Drools,EBNF,ANTLR,EngScript,OpenOffice Basic,Ada,ALGOL 68,D,Ceylon,Rust,TypeScript,Octave,AutoHotKey,Pascal,Delphi,JavaScript,Pike,Objective-C,OCaml,Java,Scala,Dart,PHP,C#,C++,Haxe,AWK,bc,Haskell,Perl,Perl 6,Go,Nemerle,Vala
			";"
		Python,Z3,Swift,Wolfram,Gambas,Pascal,Delphi,AutoHotKey,REBOL,Octave,Janus,Cython,Mathematical notation,Picat,Lua,Ruby,Haskell,Erlang,Prolog,Scala,Visual Basic .NET,Fortran,Julia,R
			"_"
	set_var(expression name, expression value, type type)
		JavaScript,Perl 6,Wolfram,Chapel,Katahdin,Frink,MiniZinc,Picat,ooc,D,Genie,Janus,Ceylon,IDP,Sympy,Prolog,Processing,Java,EBNF,Boo,Gosu,Pike,Kotlin,Icon,PowerShell,EngScript,Pawn,FreeBASIC,Hack,Nimrod,OpenOffice Basic,Groovy,TypeScript,Rust,CoffeeScript,Fortran,AWK,Go,Swift,Vala,C,Julia,Scala,Cobra,Erlang,AutoIt,Dart,Java,OCaml,Haxe,C#,MATLAB,C++,PHP,Perl,Python,Lua,Ruby,Gambas,Octave,Visual Basic,Visual Basic .NET,bc
			"name = value"
		REBOL,Self,Maxima
			"name : __ value"
		MiniZinc
			"type : name = value"
		Pascal,Dafny,Delphi,AutoHotKey,Occam,Aldor
			"name := value"
		Common Lisp
			"( setf __ name __ value )"
		crosslanguage
			"( set_var __ name __ value )"
		R,F#
			"name <- value"
	parameter(type type, var_name name)
		crosslanguage
			"( parameter __ type __ name )"
		C#,Java,Ceylon,ALGOL 68,Groovy,D,C++,Pawn,Pike,Vala,C,Janus
			"type __ name"
		Haxe,Dafny,Chapel,Pascal,Rust,Genie,Hack,Nimrod,TypeScript,Gosu,Delphi,Nemerle,Scala,Swift
			"name : type"
		Go
			"name __ type"
		MiniZinc
			"var __ type : name"
		Haskell,Scheme,Python,Mathematical notation,LispyScript,CLIPS,Clojure,F#,ML,Racket,OCaml,Tcl,Common Lisp,newLisp,Python,Cython,Frink,Picat,IDP,PowerShell,Maxima,Icon,CoffeeScript,Fortran,Octave,AutoHotKey,Julia,Prolog,AWK,Kotlin,Dart,JavaScript,Nemerle,Erlang,PHP,AutoIt,Lua,Ruby,R,bc
			"name"
		REBOL
			"type [ name ]"
		OpenOffice Basic,Gambas
			"name __ As __ type"
		Visual Basic,Visual Basic .NET
			"name __ as __ type"
		Perl
			"name = push;"
		Wolfram
			"name \_"
		Z3
			"( name __ type )"
	instanceof(expression exp, type type)
		Java,JavaScript,PHP
			"exp __ instanceof __ type"
		C#
			"exp __ as __ type"
		Python
			"isinstance ( exp , type )"
	_dot_notation(lang a)
		Java,JavaScript,D,Haxe,C#,Perl 6
			"."
		PHP,C
			"->"
	initialize_empty_var(type type, var_name name)
		Java,C#,C++,C,D,Janus
			"type __ name"
		PHP
			"name"
		MiniZinc
			"type : name"
		Python,JavaScript,Lua,REBOL
			"_"
		Z3
			"( declare-const __ name __ type )"
		
	boolean(type t1)
                TypeScript,Python,Hy,Java,JavaScript,Lua,Perl
                    "boolean"
                Visual Basic,OpenOffice Basic,Ceylon,Delphi,Pascal,Scala,Visual Basic .NET
                    "Boolean"
                C++,Dafny,Chapel,C,crosslanguage,Rust,MiniZinc,EngScript,Dart,D,Vala,crosslanguage,Go,Cobra,C#,F#,PHP,Hack
                    "bool"
                Fortran
                    "LOGICAL"
                Haxe,Haskell,Swift,Julia,Perl 6,Z3
                    "Bool"
                REBOL
                    "logic!"
				Prolog
					"atom"
	int(type t1)
		        Hack,Dafny,Janus,Chapel,MiniZinc,EngScript,Cython,ALGOL 68,D,Octave,Tcl,crosslanguage,ML,AWK,Julia,Gosu,OCaml,F#,Pike,Objective-C,Go,Cobra,Dart,Groovy,Python,Hy,Java,C#,C,C++,Vala,Nemerle,crosslanguage
                    "int"
                PHP,Prolog,Common Lisp,Picat
                    "integer"
                Fortran
                    "INTEGER"
                REBOL
                    "integer!"
                Ceylon,Gambas,OpenOffice Basic,Pascal,Erlang,Delphi,Visual Basic,Visual Basic .NET
                    "Integer"
                Haxe,ooc,Swift,Scala,Perl 6,Z3
                    "Int"
                JavaScript,TypeScript,CoffeeScript,Lua,Perl
                    "number"
                Haskell
                    "Num"
                Ruby
                    "fixnum"
	string(type t1)
                Python,EngScript,Hy,crosslanguage
                    "str"
                Vala,D,crosslanguage,Chapel,Prolog,MiniZinc,Genie,Hack,Nimrod,ALGOL 68,TypeScript,CoffeeScript,Octave,Tcl,AWK,Julia,C#,F#,Perl,Lua,JavaScript,Go,PHP,C++,Nemerle,Erlang
                    "string"
                REBOL
                    "string!"
                C,Cython
                    "char*"
                Java,Ceylon,Gambas,Dart,Gosu,Groovy,Scala,Pascal,Swift,Ruby,Haxe,Haskell,Visual Basic,Visual Basic .NET
                    "String"
                Fortran
					"CHARACTER"
				Rust
					"&str"
	function_call_statement(function_call a, semicolon b)
		crosslanguage
			"( function_call_statement __ a )"
		Picat,Wolfram,Erlang,Octave,Scheme,COBOL,Genie,ooc,Janus,REXX,Z3,pyparsing,Moony Parser,Standard ML,Icon,Kotlin,CLIPS,Pawn,FreeBASIC,MATLAB,newLisp,Boo,PowerShell,Hy,Puppet,Fortran,LispyScript,Sibilant,Nimrod,Oz,Gambas,Cython,CoffeeScript,Swift,Clojure,Prolog,Gosu,Groovy,Polish notation,Reverse Polish notation,Ruby,ML,AutoIt,Tcl,F#,REBOL,Red,R,Python,Cython,Cobra,Bash,Visual Basic,Visual Basic .NET,Hack,Lua,Racket,Common Lisp,Julia,C,Chapel,Perl 6,Haxe,Katahdin,Frink,MiniZinc,Falcon,Aldor,IDP,Processing,Maxima,Seed7,Drools,EBNF,ANTLR,EngScript,OpenOffice Basic,Ada,ALGOL 68,D,Ceylon,Rust,TypeScript,AutoHotKey,Pascal,Delphi,JavaScript,Pike,Objective-C,OCaml,Java,Scala,Dart,PHP,C#,C++,AWK,bc,Haskell,Perl,Go,Nemerle,Vala
			"a b"
		Janus
			"call a"
	greater_than_or_equal(arithmetic_expression a, arithmetic_expression b)
		C,Dafny,Perl 6,Wolfram,Chapel,Frink,Mathematical notation,MiniZinc,Picat,ooc,Genie,PL/I,IDP,Processing,EngScript,Maxima,GNU Smalltalk,Pyke,Self,Boo,Cobra,Standard ML,Prolog,Kotlin,Pawn,FreeBASIC,Ada,MATLAB,ALGOL 68,Gambas,Nimrod,Gosu,AutoIt,Ceylon,D,Groovy,Rust,CoffeeScript,TypeScript,Octave,Hack,AutoHotKey,Julia,Scala,Pascal,Delphi,Swift,Visual Basic,F#,Objective-C,Pike,Python,Cython,Oz,ML,Vala,Dart,C++,Java,OCaml,REBOL,Erlang,C#,Nemerle,Ruby,PHP,Lua,Visual Basic .NET,Haskell,Haxe,Perl,JavaScript,R,AWK,crosslanguage,Go,Janus
			"a >= b"
		Fortran
			"a __ .GE. __ b"
		Racket,Z3,crosslanguage,Common Lisp,CLIPS,newLisp,Hy,Scheme,Clojure,Common Lisp,Emacs Lisp,Sibilant,LispyScript
			"( >= __ a __ b )"
	less_than_or_equal(arithmetic_expression a, arithmetic_expression b)
		C,Dafny,Janus,Perl 6,Wolfram,Chapel,Fortran,Elixir,Frink,Mathematical notation,MiniZinc,Picat,ooc,Genie,PL/I,IDP,Processing,EngScript,Maxima,GNU Smalltalk,Pyke,Self,Boo,Cobra,Standard ML,Prolog,Kotlin,Pawn,FreeBASIC,Ada,MATLAB,ALGOL 68,Gambas,Nimrod,Gosu,AutoIt,Ceylon,D,Groovy,Rust,CoffeeScript,TypeScript,Octave,Hack,AutoHotKey,Julia,Scala,Pascal,Delphi,Swift,Visual Basic,F#,Objective-C,Pike,Python,Cython,Oz,ML,Vala,Dart,C++,Java,OCaml,REBOL,Erlang,C#,Nemerle,Ruby,PHP,Lua,Visual Basic .NET,Haskell,Haxe,Perl,JavaScript,R,AWK,crosslanguage,Go
			"a <= b"
		Racket,Z3,CLIPS,newLisp,Hy,Sibilant,LispyScript,Scheme,Clojure,Common Lisp,Emacs Lisp,crosslanguage
			"( <= __ a __ b )"
		English
			"a __ is __ less __ than __ or __ equal __ to __ b"
	switch(expression a, case_statements b, default c)
		crosslanguage
			"( switch __ a __ b __ c )"
		Rust
			"match __ a { b __ c }"
		Elixir
			"case __ a __ do __ b __ c __ end"
		Scala
			"a __ match { b __ c }"
		Octave
			"switch ( a ) b __ endswitch"
		JavaScript,D,PowerShell,Nemerle,D,TypeScript,Hack,Swift,Groovy,Dart,AWK,C#,Java,C++,PHP,C,Go,Haxe,Vala
			"switch ( a ) { b __ c }"
		Ruby
			"case __ a __ b __ c __ end"
		Haskell,Erlang
			"case __ a __ of __ b __ c __ end"
		Delphi,Pascal
			"Case __ a __ of __ b __ c __ end;"
		CLIPS
			"( switch __ a __ b __ c )"
		Visual Basic .NET,Visual Basic
			"Select __ Case __ a __ b __ c __ End __ Select"
		REBOL
			"switch/default [ a __ b ]"
		Fortran
			"SELECT __ CASE ( a ) __ b __ c __ END __ SELECT"
		Clojure
			"( case __ a __ b __ c )"
		Chapel
			"select ( a ) { b c }"
		Wolfram
			"Switch [ a , b , c ]"
	case(expression a, series_of_statements b)
		crosslanguage
			"( case __ a __ b )"
		JavaScript,D,Java,C#,C,C++,TypeScript,Dart,PHP,Hack
			"case __ a : b break ;"
		Go,Haxe,Swift
			"case __ a : b"
		Fortran
			"CASE ( a ) __ b"
		Rust
			"a => { b }"
		Ruby
			"when __ a b"
		Haskell,Erlang,Elixir
			"a __ -> \n b"
		CLIPS
			"( case __ a __ then __ b )"
		Scala
			"case __ a => b"
		Visual Basic .NET
			"Case __ a __ b"
		REBOL
			"a [ b ]"
		Octave
			"case __ a __ b"
		Clojure
			"( a __ b )"
		Pascal,Delphi:
			"a : b"
		Chapel
			"when __ a { b }"
		Wolfram
			"a , b"
	typeless_foreach(expression array, var_name var_name, series_of_statements body)
		crosslanguage
			"( foreach __ array __ var_name __ body )"
		POP-11
			"for __ var_name __ in __ array __ do __ body __ endfor;"
		MiniZinc
			"forall ( var_name in array ) ( body )"
		Lua
			"for __ var_name __ in __ array __ do __ body __ end"
		Python,Cython
			"for __ var_name __ in __ array : \n #indent \n body \n #unindent"
		Julia
			"for __ var_name __ in __ array __ body __ end"
		Chapel,Swift
			"for __ var_name __ in __ array { body }"
		Pawn
			"foreach ( new __ var_name : array ) { body }"
		Picat
			"foreach ( var_name __ in __ array ) __ body __ end"
		Picat
			"foreach ( var_name __ in __ array ) ( body ) end"
		AWK,Ceylon
			"for __ ( __ var_name __ in __ array ) { body }"
		Go
			"for __ var_name := range __ array { body }"
		Haxe,Groovy
			"for ( var_name __ in __ array ) { body }"
		Ruby
			"array . each __ do | var_name | __ body __ end"
		PHP,Hack
			"foreach ( array __ as __ var_name ) { body }"
		Nemerle,PowerShell
			"foreach ( var_name __ in __ array ) { body }"
		JavaScript
			"array . forEach ( function ( var_name ) { body  } ) ;"
		Scala
			"for ( var_name -> array ) { body }"
		REBOL
			"foreach __ var_name __ array [ body ]"
		Java
			"for ( Object __ var_name : array ) { body }"
		C#
			"foreach ( object __ var_name __ in __ array ) { body }"
		Perl
			"foreach __ var_name ( array ) { body }"
		D
			"foreach ( var_name , array ) { body }"
		Gambas
			"FOR __ EACH __ var_name __ IN __ array __ body __ NEXT"
		Visual Basic .NET
			"For __ Each __ var_name __ In __ array __ body __ Next"
		Dart
			"for ( var __ var_name __ in __ array ) { body }"
	foreach(expression array, var_name var_name, type typeInArray, series_of_statements body)
		crosslanguage
			"( foreach __ array __ var_name __ typeInArray __ body )"
		Lua
			"for __ var_name __ in __ array __ do __ body __ end"
		Python,Cython
			"for __ var_name __ in __ array : \n #indent \n body \n #unindent"
		Julia
			"for __ var_name __ in __ array __ body __ end"
		Chapel,Swift
			"for __ var_name __ in __ array { body }"
		Pawn
			"foreach ( new __ var_name : array ) { body }"
		Picat
			"foreach ( var_name __ in __ array ) __ body __ end"
		Picat
			"foreach ( var_name __ in __ array ) ( body ) end"
		AWK,Ceylon
			"for __ ( __ var_name __ in __ array ) { body }"
		Go
			"for __ var_name := range __ array { body }"
		Haxe,Groovy
			"for ( var_name __ in __ array ) { body }"
		Ruby
			"array . each __ do | var_name | __ body __ end"
		PHP,Hack
			"foreach ( array __ as __ var_name ) { body }"
		Nemerle,PowerShell
			"foreach ( var_name __ in __ array ) { body }"
		JavaScript
			"array . forEach ( function ( var_name ) { body  } ) ;"
		Scala
			"for ( var_name -> array ) { body }"
		REBOL
			"foreach __ var_name __ array [ body ]"
		Java
			"for ( typeInArray __ var_name : array ) { body }"
		C#,Vala
			"foreach ( typeInArray __ var_name __ in __ array ) { body }"
		C++
			"for ( typeInArray __ & __ var_name : array ){ body }"
		Perl
			"foreach __ var_name ( array ) { body }"
		D
			"foreach ( var_name , array ) { body }"
		Gambas
			"FOR __ EACH __ var_name __ IN __ array __ body __ NEXT"
		Visual Basic .NET
			"For __ Each __ var_name __ As __ typeInArray __ In __ array __ body __ Next"
	default(series_of_statements a)
		crosslanguage
			"( default __ a )"
		JavaScript,D,C,Java,C#,C++,TypeScript,Dart,Ruby,PHP,Haxe,Hack,Go,Swift
			"default : a"
		Ruby,Pascal,Delphi
			"else __ a"
		Haskell
			"\_ -> \n __ a"
		Rust
			"\_ => a"
		Python,Cython,Lua,MiniZinc,Prolog
			"_"
		CLIPS
			"( default __ a )"
		Scala
			"case __ \_ => a"
		Visual Basic .NET
			"Case __ Else __ a"
		REBOL
			"][ a"
		Fortran
			"CASE __ DEFAULT __ a"
		Octave
			"otherwise __ a"
		Chapel
			"otherwise { a }"
		Clojure
			"a"
		Wolfram
			"\_ , a"
	substring(string_expression a, arithmetic_expression b, arithmetic_expression c)
		crosslanguage
			"( substring __ a __ b __ c )"
		JavaScript,CoffeeScript,TypeScript,Java,Scala,Dart
			"a . substring ( b , c )"
		C++
			"a . substring ( b , c - b )"
		Python,Cython,Icon,Go
			"a [ b : c ]"
		Julia:
			"a [ b - 1 : c ]"
		Fortran
			"a ( b : c )"
		C
			"_"
		C#,Visual Basic .NET,Nemerle
			"a . Substring ( b , c )"
		Haskell
			"take ( c - b ) . drop b $ a"
		PHP,AWK,Perl,Hack
			"substr ( a , b , c )"
		Haxe
			"a . substr ( b , c )"
		REBOL
			"copy/part __ skip __ a __ b __ c"
		Clojure
			"( subs __ a __ b __ c )"
		Erlang
			"string : sub_string ( a , b , c )"
		Ruby,Pike,Groovy
			"a [ b .. c ]"
		Racket
			"( substring __ a __ b __ c )"
		Common Lisp
			"( subseq __ a __ b __ c )"
		MiniZinc,Prolog
			"_"
		Lua
			"string . sub ( a , start , end )"
	strcmp(string_expression a, string_expression b)
		crosslanguage
			"( strcmp __ a __ b )"
		Visual Basic,Visual Basic .NET,F#,Prolog
			"a = b"
		Python,Chapel,Julia,Fortran,MiniZinc,Picat,Go,Vala,AutoIt,REBOL,Ceylon,Groovy,Scala,CoffeeScript,AWK,Ruby,Haskell,Haxe,Dart,Lua,Swift
			"a == b"
		JavaScript,PHP,TypeScript,Hack
			"a === b"
		C,Octave
			"strcmp ( a , b ) == 0"
		C++
			"a . compare ( b )"
		C#
			"a . Equals ( b )"
		Java
			"a . equals ( b )"
		Common Lisp
			"( equal __ a __ b )"
		CLIPS
			"( str-compare __ a __ b )"
		Hy
			"( = __ a __ b )"
		Perl
			"a __ eq __ b"
		Erlang
			"string:equal ( a , b )"
	array_length(array_expression a)
		crosslanguage
			"( array_length __ a )"
		Lua
			"# a"
		Python,Cython,Go
			"len ( a )"
		Java,Picat,Scala,D,CoffeeScript,TypeScript,Dart,Vala,JavaScript,Ruby,Haxe,Cobra
			"a . length"
		C#,Visual Basic,Visual Basic .NET,PowerShell
			"a . Length"
		MiniZinc,Julia,R
			"length ( a )"
		Common Lisp
			"( list-length __ a )"
		PHP
			"count ( a )"
		Rust
			"a . len ( )"
		Emacs Lisp,Scheme,Racket,Haskell
			"( length __ a )"
		C++,Groovy
			"a . size ( )"
		C
			"sizeof ( a ) / sizeof ( a [ 0 ] )"
		Perl
			"scalar ( a )"
		REBOL
			"length? __ a"
		Swift
			"a . count"
		Clojure
			"( count __ array )"
		Hy
			"( len __ a )"
		Octave
			"length ( a )"
		Fortran,Janus
			"size ( a )"
		Wolfram
			"Length [ a ]"
	strlen(string_expression a)
		crosslanguage
			"( strlen __ a __ b )"
		Python
			"len ( a )"
		R
			"nchar ( a )"
		Erlang
			"string:len ( a )"
		Visual Basic,Visual Basic .NET,Gambas
			"Len ( a )"
		JavaScript,TypeScript,Ruby,Scala,Gosu,Picat,Haxe,OCaml,D
			"a . length"
		REBOL
			"length? __ a"
		Java,C++,Kotlin
			"a . length ( )"
		PHP,C,Pawn,Hack
			"strlen ( a )"
		MiniZinc,Julia
			"length ( a )"
		Haskell
			"( length a )"
		C#
			"a . Length"
		Swift
			"countElements ( a )"
		AutoIt
			"StringLen ( a )"
		Common Lisp
			"( length __ a )"
		Racket,Scheme
			"( string-length __ a )"
		Perl,Octave
			"length ( a )"
		Nemerle
			"a . Length"
		Fortran
			"LEN ( a )"
		Lua
			"string . len ( a )"
		Wolfram
			"StringLength [ a ]"
	parameter_separator(type t1)
		JavaScript,Dafny,Wolfram,Gambas,D,Frink,Chapel,Swift,Perl 6,OCaml,Janus,Mathematical notation,Pascal,Rust,Picat,AutoHotKey,Maxima,Octave,Julia,R,Prolog,Fortran,Go,MiniZinc,Erlang,CoffeeScript,PHP,Hack,Java,C#,C,C++,Lua,TypeScript,Dart,Ruby,Python,Haxe,Scala,Visual Basic,Visual Basic .NET
			","
		Hy,Z3,Scheme,Racket,Common Lisp,CLIPS,REBOL,Haskell,Racket,Clojure
			"__"
		Perl
			"\n"
	not_equal(expression a, expression b)
		JavaScript,PHP
			 "a !== b"
		Java,Wolfram,C,C++,D,C#,Julia,Perl,Ruby,Haxe,Python
			"a != b"
		English
			"a __ does __ not __ equal __ b"
		Prolog
			"not ( a == b )"
		Mathematical notation
			"a ≠ b"
		Lua
			"a ~= b"
		Janus
			"a # b"
	instance_method(identifier name, type type, parameter_list params, series_of_statements body)
		crosslanguage
			"( instance_method __ name __ params __ type __ body)"
		Perl 6
			"method __ name __ ( params ) { body }"
		Chapel
			"def __ name ( params ) : type { body }"
		Python
			"def __ name (  self, params ) : \n #indent \n body \n #unindent"
		JavaScript
			"name ( params ) { body }"
		Java,C#
			"public __ type __ name ( params ) { body }"
		PHP
			"public __ function __ name ( params ) { body }"
		Ruby
			"def __ name ( params ) __ body __ end"
		C++,D
			"type __ name ( params ) { body }"
		Haxe
			"public __ function __ name ( params ) : type { body }"
	typeless_instance_method(identifier name, parameter_list params, series_of_statements body)
		Chapel
			"def __ name ( params ) { body }"
		Python
			"def __ name (  self, params ) : \n #indent \n body \n #unindent"
		JavaScript
			"name ( params ) { body }"
		Java
			"public __ Object __ name ( params ) { body }"
		C#
			"public __ object __ name ( params ) { body }"
		PHP
			"public __ function __ name ( params ) { body }"
		Ruby
			"def __ name ( params ) __ body __ end"
		C++,D
			"auto __ name ( params ) { body }"
		Haxe
			"public __ function __ name ( params ) { body }"
	typeless_static_method(identifier name, parameter_list params, series_of_statements body)
		Python
			"@staticmethod \n __ def __ name (  params ) : \n #indent \n body \n #unindent"
		Haxe
			"public __ static __ function __ name ( params ) { body }"
		Lua,Julia
			"function __ name ( params ) __ body __ end"
		Java
			"public __ static __ Object __ name ( params ) { body }"
		C#
			"public __ static __ object __ name ( params ) { body }"
		Dart
			"static __ name ( params ) { body }"
		C++
			"static __ auto __ name ( params ) { body }"
		PHP
			"public __ static __ function __ name ( params ) { body }"
		Ruby
			"def __ self . name ( params ) __ body __ end"
		JavaScript
			"static __ name ( params ) { body }"
	static_method(identifier name, type return_type, parameter_list params, series_of_statements body)
		crosslanguage
			"( staticmethod __ name __ return_type __ params __ body )"
		Python
			"@staticmethod \n __ def __ name (  params ) : \n #indent \n body \n #unindent"
		Haxe
			"public __ static __ function __ name ( params ) { body }"
		Lua,Julia
			"function __ name ( params ) __ body __ end"
		Java,C#
			"public __ static __ return_type __ name ( params ) { body }"
		C++,Dart
			"static __ return_type __ name ( params ) { body }"
		PHP
			"public __ static __ function __ name ( params ) { body }"
		Ruby
			"def __ self . name ( params ) __ body __ end"
		C
			"return_type __ name ( params ) { body }"
		JavaScript
			"static __ name ( params ) { body }"
		Picat
			"_"
	constructor(identifier name, parameter_list params, series_of_statements body)
		crosslanguage
			"(constructor __ name __ params __ body)"
		Python
			"def __ __init__ (  self , params ) : \n #indent \n body \n #unindent"
		Java,C#
			"public __ name ( params ) { body }"
		Swift
			"init ( params ) { body }"
		JavaScript
			"constructor ( params ) { body }"
		Ruby
			"def __ initialize ( params ) __ body __ end"
		PHP
			"function __ construct ( params ) { body }"
		Perl
			"sub __ new { body }"
		Haxe
			"public __ function __ new ( params ) { body }"
		C++,Dart
			"name ( params ) { body }"
		D
			"this ( params ) { body }"
		Chapel
			"proc __ name ( params ) { body }"
	function_call_named_parameter(identifier name, expression value)
		Python,C#,Fortran,Scala
			"name = value"
		Modula-3,Visual Basic .NET
			"name := value"
		Ruby
			"name : value"
	dictionary_type(type input, type output)
		Python
			"dict"
		Java
			"HashMap < input , output >"
		C#
			"Dictionary < input , output >"
		C++
			"std :: map < input , output >"
		PHP
			"array"
	declare_new_object(var_name var_name, identifier class_name, function_call_parameters params)
		Java,C#,D
			"class_name __ var_name = new __ class_name ( params )"
		JavaScript,Haxe,Chapel
			"var __ var_name = new __ class_name ( params )"
		PHP
			"var_name = new __ class_name ( params )"
		Python
			"var_name = class_name ( params )"
		Ruby
			"var_name = class_name . new ( params )"
		Perl
			"my __ var_name = class_name -> new ( params )"
		C++
			"class_name __ var_name ( params )"
		C,Picat,MiniZinc,Prolog,Lua
			"_"
}
'''
#The following expressions are the same in every language.

chunk -> _ (series_of_statements | class | class_extends) _ {%function(d){
	var to_return = d[1][0];
	if(Array.isArray(to_return)){
		return d.join("");
	}
	else{
		return d[1][0];
	}
}%}

series_of_statements -> statement {%function(d){return d[0];}%} | series_of_statements statement_separator __ statement {%function(d){return d[0] + d[1] + "\n" + d[3];}%}

dot_notation -> identifier _dot_notation identifier {%function(d){ return d[0] + d[1] + d[2] }%} | identifier

arithmetic_expression -> expression
boolean_expression -> expression
string_expression -> expression
array_expression -> expression

statement_with_semicolon -> statement_without_semicolon _ semicolon {% function(d){return d[0] + d[2]; }%}

expression -> string_to_regex | constraint | access_array | this | ternary_if | null_coalescing_operator | function_call | var_name | dictionary | declare_new_object | access_dict
| parentheses_expression | pi | natural_logarithm | absolute_value | floor | ceiling | string_to_int | add | subtract | multiply | mod | divide | number | pow | strlen | asin | acos | atan | sin | cos | tan | sqrt | array_length
| String | multiline_string | concatenate_string | substring | int_to_string | split | join | startswith | endswith | global_replace | to_uppercase | to_lowercase | detect_OS
| initializer_list | range
| false | true | instanceof | not_equal | implies | is_implied_by | greater_than | compareInts | strcmp | less_than_or_equal | greater_than_or_equal | less_than | and | or | not | array_contains | string_contains

statement_without_semicolon -> set_var | delocal | assert | increment | decrement | initialize_empty_var | initialize_var | typeless_initialize_var | function_call | exception | return | function_call_statement | plus_equals | minus_equals | declare_constant | initialize_array | print | swap_ints
statement ->  func | reversible_while | reversible_if | if_without_braces | else_without_braces | elseif_without_braces | while_without_braces | anonymous_function | statement_with_semicolon | for_loop | typeless_function | comment | switch | if | unless | while | do_while | for_in_range | foreach | typeless_foreach

class_statement_without_semicolon -> initialize_static_variable_with_value | initialize_instance_variable_with_value | initialize_static_variable | initialize_instance_variable
class_statement_with_semicolon -> class_statement_without_semicolon _ semicolon {% function(d){return d[0] + d[2]; }%}
class_statement -> constructor | instance_method | typeless_instance_method | static_method | typeless_static_method | comment | class_statement_with_semicolon

_class_statements -> class_statements _ class_statement {%function(d){return d[0] +"\n"+ d[2];}%} | class_statement {%function(d){return d[0];}%} | null
class_statements -> class_statement {%function(d){return d[0];}%} | class_statements _ class_statement {%function(d){return d[0] + "\n" + d[2];}%}


type -> boolean | int | double | string | auto | array_type | void | dictionary_type
case_statements -> case_statements _ case {%function(d){return d[0] +"\n"+ d[2];}%} | case
elif_or_else -> else | elif

parameter_list -> _parameter_list | null
_parameter_list -> _parameter_list _ parameter_separator _ ( parameter | default_parameter ) {%function(d){return d[0]+d[2]+d[4]}%}
| (parameter | default_parameter )

typeless_parameters -> _typeless_parameters | null
_typeless_parameters -> _typeless_parameters _ parameter_separator _ typeless_parameter {%function(d){return d[0]+d[2]+d[4]}%}
| typeless_parameter

function_call_parameters -> function_call_parameters _ function_call_parameter_separator _ ( expression | function_call_named_parameter) {% function(d) {return d.join(""); } %} | (expression | function_call_named_parameter) | null

key_value_list -> _key_value_list
_key_value_list -> _key_value_list _ key_value_separator _ key_value {%function(d){return d[0]+d[2]+d[4]}%}
| key_value

array_access_list -> array_access_index | array_access_list array_access_separator array_access_index {%function(d){return d[0]+d[1]+d[2]}%}

# Primitives
# ==========

identifier -> _name {% function(d, location, reject) {
	if(d[0] === "public" || d[0] === "return" || d[0] === "and" || d[0] === "or" || d[0] === "iff" || d[0] === "implies" || d[0] === "assert" || d[0] === "throw"){
		return reject;
	}
	else{
		console.log(d[0]);
		return d[0];
	}
} %}

_name -> [a-zA-Z_] {% id %}
	| _name [\w_] {% function(d) {return d[0] + d[1]; } %}

# Numbers

number -> _number {% function(d) {return parseFloat(d[0])} %}

_posint ->
	[0-9] {% id %}
	| _posint [0-9] {% function(d) {return d[0] + d[1]} %}

_int ->
	"-" _posint {% function(d) {return d[0] + d[1]; }%}
	| _posint {% id %}

_float ->
	_int {% id %}
	| _int "." _posint {% function(d) {return d[0] + d[1] + d[2]; }%}

_number ->
	_float {% id %}
	| _float "e" _int {% function(d){return d[0] + d[1] + d[2]; } %}


#Strings

String -> "\"" _string "\"" {% function(d) {return '"' + d[1] + '"'; } %}

_string ->
	null {% function() {return ""; } %}
	| _string _stringchar {% function(d) {return d[0] + d[1];} %}

_stringchar ->
	[^"\n] {% id %}
	| "\\\""  {% function(d) {return d[0]; } %}
	
_multiline_string -> _string {% function(d) {return d[0]; } %} | _multiline_string multiline_string_separator _string {% function(d) {return d[0] + d[1] + d[2]; } %}

_comment ->
	null {% function() {return ""; } %}
	| _comment _commentchar {% function(d) {return d[0] + d[1];} %}

_commentchar ->
	[^\n] {% id %}

# Whitespace
_ -> null | _ [\s] {% function() {} %}
__ -> [\s] | __ [\s] {% function() {} %}


#The next two lines are the languages for the translator.
'''
