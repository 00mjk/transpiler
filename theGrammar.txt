Java,Common Lisp
{
	initializeArray(identifier identifier, arrayType arrayType, array_expression expression)
		Java,C,C#
			"arrayType __ identifier = expression ;"
		Python,Ruby,Haskell,Picat,Prolog
			"identifier = expression \n"
		JavaScript,Haxe
			"var __ identifier = expression ;"
		Perl
			"my __ @ identifier = expression ;"
		Lua
			"local identifier = expression \n"
		REBOL
			"identifier : expression \n"
	accessArray(identifier a, arithmetic_expression b)
		Python,MiniZinc,Picat,Nimrod,AutoIt,Cython,CoffeeScript,Dart,TypeScript,AWK,Vala,Perl,Java,JavaScript,Ruby,Go,C++,PHP,Haxe,C,C#
			"a [ b ]"
		Scala
			"a ( b )"
		Lua,Visual Basic, Visual Basic .NET
			"a ( b + 1 )"
		Haskell
			"(a !! b)"
		Prolog
			"_"
	arrayType(type a)
		Lua
			"table"
		Java,C,C#
			"a []"
		Python
			"list"
		MiniZinc
			"array [ a ] of a"
		JavaScript,Ruby
			"Array"
		Haxe
			"Array< a >"
		Prolog
			"_"
	initializerListSeparator(lang a)
		Python,Pascal,Delphi,Prolog,MiniZinc,EngScript,Cython,Groovy,Dart,TypeScript,CoffeeScript,Nemerle,JavaScript,Haxe,Haskell,Ruby,REBOL,Polish notation,Swift,Java,Picat,C#,Go,Lua,C++,C,Visual Basic .NET,Visual Basic,PHP,Scala,Perl
			","
		REBOL
			"_"
	initializerList(_initializerList a)
		Java,Picat,C#,Go,Lua,C++,C,Visual Basic .NET,Visual Basic
			"{ a }"
		Python,Prolog,MiniZinc,EngScript,Cython,Groovy,Dart,TypeScript,CoffeeScript,Nemerle,JavaScript,Haxe,Haskell,Ruby,REBOL,Polish notation,Swift
			"[ a ]"
		PHP
			"array ( a )"
		Scala
			"Array ( a )"
		REBOL
			"[ a ]"
		Perl
			"( a )"
	keyValue(identifier a, expression b)
		Groovy,Dart,JavaScript,CoffeeScript
			"a : b"
		Python
			"' a ' : b"
		Ruby,PHP,Haxe,Perl
			"a => b"
		REBOL
			"a __ b"
		Lua
			"a = b"
		Java,C#,C,Prolog
			"_"
	dictionary(keyValueList a)
		Python,JavaScript,Lua,Ruby
			"{ a }"
		Java,C#,C,Prolog
			"_"
		Perl
			"( a )"
	keyValueSeparator(lang a)
		Python,JavaScript,PHP,Perl,Lua,Ruby,Prolog
			","
		Java,C#,C
			"_"
	true(lang a)
		Java,Pascal,MiniZinc,EngScript,Picat,Rust,Clojure,Nimrod,Hack,Ceylon,D,Groovy,CoffeeScript,TypeScript,Octave,Prolog,Julia,F#,Swift,Nemerle,Vala,C++,Dart,JavaScript,Ruby,Erlang,C#,Haxe,Go,OCaml,Lua,Scala,PHP,REBOL
			"true"
		Python,Hy,Cython,AutoIt,Haskell,Visual Basic .NET,Visual Basic
			"True"
		Perl,AWK,Tcl,C
			"1"
		Racket
			"#t"
		Common Lisp
			"t"
		Fortran
			".TRUE."
	false(lang a)
		Java,Pascal,Rust,MiniZinc,EngScript,Picat,Clojure,Nimrod,Groovy,D,Ceylon,TypeScript,CoffeeScript,Octave,Prolog,Julia,Vala,F#,Swift,C++,Nemerle,Dart,JavaScript,Ruby,Erlang,C#,Haxe,Go,OCaml,Lua,Scala,PHP,REBOL,Hack
			"false"
		Python,Hy,Cython,AutoIt,Haskell,Visual Basic .NET,Visual Basic
			"False"
		Perl,AWK,Tcl,C
			"0"
		Common Lisp
			"nil"
		Racket
			"#f"
		Fortran
			".FALSE."
	compareInts(arithmetic_expression a, arithmetic_expression b)
		Lua,Rust,R,MiniZinc,Frink,Picat,Pike,Pawn,Processing,C++,Ceylon,CoffeeScript,Octave,Swift,AWK,Julia,Perl,Groovy,Erlang,Haxe,Scala,Java,Vala,Dart,Python,C#,C,Go,Haskell,Ruby
			"a == b"
		JavaScript,PHP,TypeScript,Hack
			"a === b"
		Maxima,REBOL,F#,AutoIt,Pascal,Delphi,Visual Basic,Visual Basic .NET
			"a = b"
		Prolog
			"a =:= b"
		Fortran
			"a .eq. b"
	parentheses_expression(expression a)
		Racket,Z3,CLIPS,GNU Smalltalk,newLisp,Hy,Common Lisp,Emacs Lisp,Clojure,Sibilant,LispyScript
			"a"
		Pascal,Katahdin,Frink,MiniZinc,Picat,Java,ECLiPSe,D,ooc,Genie,Janus,PL/I,IDP,Processing,Maxima,Seed7,Self,GNU Smalltalk,Drools,Standard ML,Oz,Cobra,Pike,Prolog,EngScript,Kotlin,Pawn,FreeBASIC,MATLAB,Ada,FreeBASIC,Gosu,Gambas,Nimrod,AutoIt,ALGOL 68,Ceylon,Groovy,Rust,CoffeeScript,TypeScript,Fortran,Octave,ML,Hack,AutoHotKey,Scala,Delphi,Tcl,Swift,Vala,C,F#,C++,Dart,JavaScript,REBOL,Julia,Erlang,OCaml,crosslanguage,C#,Nemerle,AWK,Java,Lua,Perl,Haxe,Python,PHP,Haskell,Go,Ruby,R,bc,Visual Basic,Visual Basic .NET
			"( a )"
	greaterThan(arithmetic_expression a, arithmetic_expression b)
		Pascal,Katahdin,Frink,MiniZinc,Picat,Java,ECLiPSe,D,ooc,Genie,Janus,PL/I,IDP,Processing,Maxima,Seed7,Self,GNU Smalltalk,Drools,Standard ML,Oz,Cobra,Pike,Prolog,EngScript,Kotlin,Pawn,FreeBASIC,MATLAB,Ada,FreeBASIC,Gosu,Gambas,Nimrod,AutoIt,ALGOL 68,Ceylon,Groovy,Rust,CoffeeScript,TypeScript,Fortran,Octave,ML,Hack,AutoHotKey,Scala,Delphi,Tcl,Swift,Vala,C,F#,C++,Dart,JavaScript,REBOL,Julia,Erlang,OCaml,crosslanguage,C#,Nemerle,AWK,Java,Lua,Perl,Haxe,Python,PHP,Haskell,Go,Ruby,R,bc,Visual Basic,Visual Basic .NET
			"a > b"
		Racket,Z3,CLIPS,GNU Smalltalk,newLisp,Hy,Common Lisp,Emacs Lisp,Clojure,Sibilant,LispyScript
			"( > a b)"
	lessThan(arithmetic_expression a, arithmetic_expression b)
		Pascal,Katahdin,Frink,MiniZinc,Picat,Java,ECLiPSe,D,ooc,Genie,Janus,PL/I,IDP,Processing,Maxima,Seed7,Self,GNU Smalltalk,Drools,Standard ML,Oz,Cobra,Pike,Prolog,EngScript,Kotlin,Pawn,FreeBASIC,MATLAB,Ada,FreeBASIC,Gosu,Gambas,Nimrod,AutoIt,ALGOL 68,Ceylon,Groovy,Rust,CoffeeScript,TypeScript,Fortran,Octave,ML,Hack,AutoHotKey,Scala,Delphi,Tcl,Swift,Vala,C,F#,C++,Dart,JavaScript,REBOL,Julia,Erlang,OCaml,crosslanguage,C#,Nemerle,AWK,Java,Lua,Perl,Haxe,Python,PHP,Haskell,Go,Ruby,R,bc,Visual Basic,Visual Basic .NET
			"a < b"
		Racket,Z3,CLIPS,GNU Smalltalk,newLisp,Hy,Common Lisp,Emacs Lisp,Clojure,Sibilant,LispyScript
			"( < a b)"
	class(identifier a, series_of_statements b)
		Java,C#
			"public __ class __ a { b }"
		REBOL
			"a: __ make __ object! [ b ]"
		JavaScript,Hack,PHP,Scala
			"class __ a { b }"
		Ruby
			"class __ a __ b __ end"
		C,Erlang,MiniZinc,Lua,Perl,Haskell,Prolog,Fortran
			"b"
		Python
			"class __ name : \n #indent \n b \n #indent \n"
		Visual Basic .NET
			"Public __ Class __ name __ b __ End Class"
	arrayContains(array_expression container, expression contained)
		Python
			"container __ in __ contained"
		Lua
			"container [ contained ] ~= nil"
		REBOL
			"not __ none? __ find __ container __ contained"
		JavaScript,CoffeeScript
            "container . indexOf ( contained ) !== -1"
        CoffeeScript
            "container . indexOf ( contained ) != -1"
        Ruby
            "container . include? ( contained )"
        Haxe
            "Lambda . has ( container, contained )"
        PHP
            "in_array ( container , container )"
        C#
            "container . Contains ( contained )"
        Java
            "Arrays . asList ( container ) . contains ( contained )"
        Haskell
			"( elem __ contained __ container )"
		C,Prolog
			"_"
	this(varName a)
		Ruby,CoffeeScript
			"@ a"
		Java,EngScript,Dart,Groovy,TypeScript,JavaScript,C#,C++,Haxe
			"this . a"
		Python
			"self . a"
		PHP,Hack
			"$this -> a"
		C,MiniZinc,Prolog,Visual Basic .NET,Fortran
			"_"
		Swift,Scala
			"a"
		REBOL
			"self / a"
		Lua,MiniZinc,Haskell
			"_"
	pow(arithmetic_expression a, arithmetic_expression b)
		Lua
			"math . pow ( a , b )"
		Scala
			"scala.math.pow ( a , b )"
		C#
			"Math . Pow ( a , b )"
		JavaScript,Java,TypeScript
			"Math . pow ( a , b )"
		Python,Haskell,COBOL,Picat,ooc,PL/I,REXX,Maxima,AWK,R,F#,AutoHotKey,Tcl,AutoIt,Groovy,Octave,Ruby,Perl,Fortran
			"a ** b"
		REBOL
			"power __ a __ b"
		C,C++,PHP,Hack,Swift,MiniZinc
			"pow ( a , b )"
		Prolog
			"_"
		Julia,EngScript,Visual Basic,Visual Basic .NET,Gambas,Go,Ceylon
			"a ^ b"
		Rust
			"num::pow ( a , b )"
		Hy,Common Lisp,Racket,Clojure
			"( expt num1 num2 )"
		Erlang
			"math:pow ( a , b )"
	_or(arithmetic_expression a, arithmetic_expression b)
		JavaScript,Frink,ooc,Picat,Janus,Processing,Pike,nools,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,D,Octave,AWK,Julia,Scala,F#,Swift,Nemerle,Vala,Go,Perl,Java,Haskell,Haxe,C,C++,C#,Dart,R
			"a || b"
		Python,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby
			"a __ or __ b"
		Prolog
			"a ; b"
		MiniZinc
			"a \\/ b"
		Common Lisp,Z3,CLIPS,Racket,Sibilant,Clojure,Hy
			"a b"
		Visual Basic,Visual Basic .NET
			"a Or b"
		Fortran
			"a .OR. b"
	or(_or a)
		Python,Fortran,Visual Basic .NET,MiniZinc,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Visual Basic,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby,JavaScript,Hack,PHP,Frink,ooc,Picat,Janus,Processing,Pike,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,Octave,Julia,Scala,F#,Swift,Nemerle,Vala,Dart,C,C++,C#,OCaml,AWK,Java,Haskell,Haxe,Bash,Haxe,Go,Perl,R,Prolog
			"a"
		Common Lisp,Z3,CLIPS,Racket,Sibilant,Clojure,Hy
			"( or a )"
	_and(boolean_expression a, boolean_expression b)
		JavaScript,Hack,PHP,Frink,ooc,Picat,Janus,Processing,Pike,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,Octave,Julia,Scala,F#,Swift,Nemerle,Vala,Dart,C,C++,C#,OCaml,AWK,Java,Haskell,Haxe,Bash,Haxe,Go,Perl,R
			"a && b"
		Visual Basic,Visual Basic .NET,OpenOffice Basic
			"a And b"
		Python,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby
			"a __ and __ b"
		Prolog
			"a , b"
		MiniZinc
			"a /\\ b"
		Common Lisp,Z3,newLisp,Racket,Clojure,Sibilant,Hy,CLIPS
			"a b"
		Fortran
			"a .AND. b"
	and(_and a)
		Prolog,Fortran,Visual Basic,Visual Basic .NET,OpenOffice Basic,Python,MiniZinc,Genie,IDP,Maxima,EngScript,Ada,newLisp,OCaml,Nimrod,CoffeeScript,Pascal,Delphi,Erlang,REBOL,Lua,PHP,crosslanguage,Ruby,JavaScript,Hack,PHP,Frink,ooc,Picat,Janus,Processing,Pike,Pawn,MATLAB,Hack,Gosu,Rust,AutoIt,AutoHotKey,TypeScript,Ceylon,Groovy,Octave,Julia,Scala,F#,Swift,Nemerle,Vala,Dart,C,C++,C#,OCaml,AWK,Java,Haskell,Haxe,Bash,Haxe,Go,Perl,R
			"a"
		Common Lisp,Z3,newLisp,Racket,Clojure,Sibilant,Hy,CLIPS
			"( and a )"
	not(boolean_expression a)
		Python,MiniZinc,Picat,Genie,Seed7,Z3,IDP,Maxima,CLIPS,EngScript,Hy,OCaml,Clojure,Erlang,Pascal,Delphi,F#,ML,Lua,Racket,Common Lisp,crosslanguage,REBOL,Haskell,Sibilant
			"not a"
		Java,Katahdin,CoffeeScript,Frink,D,ooc,Ceylon,Processing,Pawn,AutoHotKey,Groovy,Scala,Hack,Rust,Octave,TypeScript,Julia,AWK,Swift,Scala,Vala,Nemerle,Pike,Perl,C,C++,Objective-C,Tcl,JavaScript,R,Dart,Java,Go,Ruby,PHP,Haxe,C#
			"! a"
		Prolog
			"\\+ a"
		Visual Basic,Visual Basic .NET,AutoIt
			"Not a"
		Fortran
			".NOT. a"
		Gambas
			"NOT a"
		Rexx
			"\\ a"
		PL/I
			"^ a"
		PowerShell
			"-not a"
	_multiply(arithmetic_expression a, arithmetic_expression b)
		C,Katahdin,Frink,MiniZinc,COBOL,ooc,Genie,B-Prolog,ECLiPSe,Elixir,nools,Pyke,Picat,PL/I,REXX,IDP,Falcon,Processing,Maxima,Sympy,Mercury,Self,GNU Smalltalk,Boo,Drools,Seed7,Occam,Standard ML,EngScript,Prolog,Pike,Oz,Kotlin,Pawn,MATLAB,Ada,PowerShell,Gosu,AWK,Gambas,Nimrod,AutoHotKey,Julia,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,Haxe,Pascal,Delphi,Swift,Nemerle,Vala,R,Red,C++,Erlang,Scala,AutoIt,Cobra,F#,Perl,PHP,Go,Ruby,Lua,Haskell,Hack,Java,OCaml,REBOL,Python,JavaScript,C#,Visual Basic,Visual Basic .NET,Dart
			"a * b"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a b"
	multiply(_multiply a)
		C,Katahdin,Frink,MiniZinc,COBOL,ooc,Genie,B-Prolog,ECLiPSe,Elixir,nools,Pyke,Picat,PL/I,REXX,IDP,Falcon,Processing,Maxima,Sympy,Mercury,Self,GNU Smalltalk,Boo,Drools,Seed7,Occam,Standard ML,EngScript,Prolog,Pike,Oz,Kotlin,Pawn,MATLAB,Ada,PowerShell,Gosu,AWK,Gambas,Nimrod,AutoHotKey,Julia,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,Haxe,Pascal,Delphi,Swift,Nemerle,Vala,R,Red,C++,Erlang,Scala,AutoIt,Cobra,F#,Perl,PHP,Go,Ruby,Lua,Haskell,Hack,Java,OCaml,REBOL,Python,JavaScript,C#,Visual Basic,Visual Basic .NET,Dart
			"a"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"( * a )"
	_divide(arithmetic_expression a, arithmetic_expression b)
		Java,Pascal,Visual Basic .NET,REBOL,Katahdin,Frink,MiniZinc,Aldor,Picat,COBOL,B-Prolog,Genie,ooc,Falcon,Oz,PL/I,IDP,REXX,Processing,Maxima,Sympy,Elixir,nools,Standard ML,Delphi,Pike,Self,GNU Smalltalk,Cobra,Kotlin,Seed7,Drools,Prolog,EngScript,Pawn,MATLAB,FreeBASIC,Ada,PowerShell,Gosu,Gambas,Nimrod,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,AWK,Julia,F#,Visual Basic,Swift,Nemerle,Vala,Go,Dart,R,C,C++,Python,Scala,AutoIt,Perl,Erlang,Hack,Ruby,Haxe,Lua,Haskell,OCaml,JavaScript,C#,PHP
			"a / b"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a b"
	divide(_divide a)
		Java,Pascal,Visual Basic .NET,REBOL,Katahdin,Frink,MiniZinc,Aldor,Picat,COBOL,B-Prolog,Genie,ooc,Falcon,Oz,PL/I,IDP,REXX,Processing,Maxima,Sympy,Elixir,nools,Standard ML,Delphi,Pike,Self,GNU Smalltalk,Cobra,Kotlin,Seed7,Drools,Prolog,EngScript,Pawn,MATLAB,FreeBASIC,Ada,PowerShell,Gosu,Gambas,Nimrod,OpenOffice Basic,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,AWK,Julia,F#,Visual Basic,Swift,Nemerle,Vala,Go,Dart,R,C,C++,Python,Scala,AutoIt,Perl,Erlang,Hack,Ruby,Haxe,Lua,Haskell,OCaml,JavaScript,C#,PHP
			"a"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"( / a )"
	_add(arithmetic_expression a, arithmetic_expression b)
		Java,Katahdin,Frink,MiniZinc,Aldor,COBOL,ooc,Genie,ECLiPSe,nools,B-Prolog,Agda,Picat,PL/I,REXX,IDP,Falcon,Processing,Sympy,Maxima,Pyke,Elixir,GNU Smalltalk,Seed7,Standard ML,Occam,Boo,Drools,Icon,Mercury,EngScript,Pike,Oz,Kotlin,Pawn,FreeBASIC,Ada,PowerShell,Gosu,Nimrod,Cython,OpenOffice Basic,ALGOL 68,D,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,Prolog,Delphi,Pascal,F#,Self,Swift,Nemerle,Dart,C,AutoIt,Cobra,Julia,Groovy,Scala,OCaml,Erlang,Gambas,Hack,C++,MATLAB,REBOL,Red,Lua,Go,AWK,Haskell,Perl,Python,JavaScript,C#,PHP,Ruby,R,Haxe,Visual Basic,Visual Basic .NET,Vala,bc
			"a + b"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a b"
	add(_add a)
		Java,Katahdin,Frink,MiniZinc,Aldor,COBOL,ooc,Genie,ECLiPSe,nools,B-Prolog,Agda,Picat,PL/I,REXX,IDP,Falcon,Processing,Sympy,Maxima,Pyke,Elixir,GNU Smalltalk,Seed7,Standard ML,Occam,Boo,Drools,Icon,Mercury,EngScript,Pike,Oz,Kotlin,Pawn,FreeBASIC,Ada,PowerShell,Gosu,Nimrod,Cython,OpenOffice Basic,ALGOL 68,D,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,Prolog,Delphi,Pascal,F#,Self,Swift,Nemerle,Dart,C,AutoIt,Cobra,Julia,Groovy,Scala,OCaml,Erlang,Gambas,Hack,C++,MATLAB,REBOL,Red,Lua,Go,AWK,Haskell,Perl,Python,JavaScript,C#,PHP,Ruby,R,Haxe,Visual Basic,Visual Basic .NET,Vala,bc
			"a"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"( + a )"
	subtract(arithmetic_expression a, arithmetic_expression b)
		Java,Katahdin,Frink,PyCharm,MiniZinc,Aldor,COBOL,Genie,ooc,Pawn,B-Prolog,nools,ECLiPSe,Elixir,Pyke,Mercury,Picat,PL/I,REXX,IDP,Falcon,Processing,Maxima,Sympy,Self,GNU Smalltalk,Pike,Gambas,Nimrod,Kotlin,Occam,Drools,Gosu,Boo,Oz,Prolog,Seed7,Standard ML,Occam,MATLAB,Cobra,EngScript,PowerShell,OpenOffice Basic,Cython,ALGOL 68,D,Groovy,Ceylon,Rust,CoffeeScript,ActionScript,TypeScript,Fortran,Octave,ML,AutoHotKey,AWK,Julia,Delphi,Pascal,Swift,Nemerle,Vala,R,Go,Dart,C,C++,AutoIt,Scala,Perl,Erlang,F#,Hack,OCaml,Haskell,Python,REBOL,Red,JavaScript,C#,PHP,Visual Basic,Visual Basic .NET,Ruby,Haxe,Lua
			"a - b"
		Racket,Z3,CLIPS,newLisp,Hy,LispyScript,Sibilant,Clojure,Common Lisp,Scheme
			"a b"
	functionCall(identifier a, functionCallParameters b)
		C,Pascal,Rust,Hack,Katahdin,Frink,MiniZinc,Pawn,Aldor,Picat,D,Genie,ooc,PL/I,Delphi,Standard ML,REXX,Falcon,IDP,Processing,Maxima,Swift,Boo,R,MATLAB,AutoIt,Pike,Gosu,AWK,AutoHotKey,Gambas,Kotlin,Nemerle,EngScript,Prolog,Groovy,Scala,CoffeeScript,Julia,TypeScript,Fortran,Octave,C++,Go,Cobra,Ruby,Vala,F#,Java,Ceylon,OCaml,Erlang,Python,C#,Lua,Haxe,JavaScript,Dart,bc,Visual Basic,Visual Basic .NET,PHP,Perl
			"a ( b )"
		Haskell,Z3,CLIPS,Clojure,Common Lisp,CLIPS,Racket,Scheme,crosslanguage
			"( a __ b )"
		REBOL
			"a __ b"
	concatenateString(string_expression a, string_expression b)
		Common Lisp
			"( concatenate __ 'string __ a __ b )"
		Java,Frink,FreeBASIC,Nemerle,D,Cython,Ceylon,CoffeeScript,TypeScript,Dart,Gosu,Groovy,Scala,Swift,F#,Python,JavaScript,C#,Haxe,Ruby,C++,Vala
			"a + b"
		Lua
			"a .. b"
		Fortran
			"a // b"
		PHP,AutoHotKey,Hack,Perl
			"a . b"
		OCaml
			"a ^ b"
		REBOL
			"append __ a __ b"
		Haskell,MiniZinc
			"a ++ b"
		C,Prolog
			"_"
		CLIPS
			"( str-cat a b )"
		Clojure
			"( str a b )"
		Erlang
			"string:concat ( a , b )"
		Julia
			"string ( a , b )"
		Octave
			"strcat ( a , b )"
		Racket
			"( string-append a b )"
		Delphi
			"Concat ( a , b )"
		Visual Basic,Gambas,Nimrod,AutoIt,Visual Basic .NET,OpenOffice Basic
			"a & b"
	initializeVar(varName name, type type, expression value)
		Rust
			"let mut name = value ;"
		Common Lisp
			"( setf __ name __ value )"
		MiniZinc
			"type : name = value ;"
		Scala
			"var __ name : type = value"
		Python,Ruby,Haskell,Erlang,Prolog,Julia
			"name = value"
		JavaScript,TypeScript,PHP,Hack
			"var __ name = value ;"
		Lua
			"local __ name = value"
		Perl
			"my __ name = value ;"
		C,Java,C#,C++
			"type __ name = value ;"
		REBOL
			"name : value"
		Visual Basic,Visual Basic .NET,OpenOffice Basic
			"Dim __ name __ As __ type = value"
		R
			"name <- value"
		Fortran
			"type :: name = value"
	return(expression toReturn)
		Java,Rust,C#,JavaScript,TypeScript,C,C++,Vala,Dart,PHP,Hack,Haxe,Perl
			"return __ toReturn ;"
		Python,Ruby,Lua,REBOL,Scala,R,Julia,CoffeeScript
			"return __ toReturn"
		MiniZinc,Erlang,Maxima,Standard ML,Icon,Oz,CLIPS,newLisp,Hy,Sibilant,LispyScript,ALGOL 68,Clojure,Prolog,Common Lisp,F#,OCaml,Haskell,ML,Racket,Nemerle
			"toReturn"
		Visual Basic,Visual Basic .NET,AutoIt
			"Return a"
		Octave,Fortran
			"retval = a"
		Pascal
			"Exit ( a )"
	varName(identifier name)
		PHP,Perl,Bash,Tcl,AutoIt,Perl 6,Puppet,Hack,AWK,PowerShell
			"$ name"
		EngScript,Pascal,Picat,Prolog,Katahdin,TypeScript,JavaScript,Frink,MiniZinc,Aldor,Flora-2,F-logic,D,Genie,ooc,Janus,Chapel,ABAP,COBOL,PicoLisp,REXX,PL/I,Falcon,IDP,Processing,Sympy,Maxima,Z3,Shen,Ceylon,nools,Pyke,Self,GNU Smalltalk,Elixir,LispyScript,Standard ML,Nimrod,Occam,ANTLR,Boo,Seed7,pyparsing,EBNF,Agda,Icon,Octave,Cobra,Kotlin,C++,Drools,Oz,Pike,Delphi,Racket,ML,Java,Pawn,Fortran,Ada,FreeBASIC,MATLAB,newLisp,Hy,OCaml,Julia,AutoIt,C#,Gosu,AutoHotKey,Groovy,Rust,R,Swift,Vala,Go,Scala,Nemerle,Visual Basic,Visual Basic .NET,Clojure,Haxe,CoffeeScript,Dart,JavaScript,C#,Python,Ruby,Haskell,C,Lua,Gambas,Common Lisp,Scheme,REBOL,F#
			"name"
		CLIPS
			"? name"
	func(identifier name, parameterList params, series_of_statements body, type returnType)
		Rust
			"fn __ name ( params ) -> returnType { body }"
		Clojure
			"( defn name [ params ] body )"
		Octave
			"function __ retval = name ( params ) body __ endfunction"
		Haskell
			"name __ params = \n body"
		Common Lisp
			"(defun __ name ( params ) body )"
		Fortran
			"FUNC __ name __ ( params ) __ RESULT ( retval ) __ returnType :: retval __ body __ END __ FUNCTION __ name"
		Scala
			"def __ name ( params ) : returnType = { body }"
		MiniZinc
			"function __ returnType : name ( params ) = body ;"
		CLIPS
			"( deffunction __ name ( params ) body )"
		Erlang
			"name ( params ) -> body"
		Python
			"def __ name ( params ) : \n #indent \n body \n #indent \n"
		Perl
			"sub __ name { params __ body }"
		Pawn
			"name ( params ) { body }"
		JavaScript,PHP
			"function __ name ( params ) { body }"
		Ruby
			"def __ name ( params ) __ body __ end"
		Lua,Julia
			"function __ name ( params ) __ body __ end"
		Java,C#
			"public __ static __ returnType __ name ( params ) { body }"
		C++,Vala,C,Dart,Ceylon,Pike,D
			"returnType __ name ( params ) { body }"
		TypeScript
			"function __ name ( params ) : returnType { body }"
		REBOL
			"name : __ func [ params ] [ body ]"
		Prolog
			"name ( params ) :- body ."
		Haxe
			"public __ static __ function __ name ( params ) { body }"
		Hack
			"function __ name ( params ) : returnType { body }"
		R
			"name <- function ( params ) { body }"
		bc
			"define name ( params ) { body }"
		Visual Basic,Visual Basic .NET
			"Function name ( params ) As returnType body End Function"
		Racket,newLisp
			"(define (name params) body )"
	if(boolean_expression a, series_of_statements b, elifOrElse c)
		Erlang
			"if __ a -> b __ c __ end"
		REBOL
			"case [ a [ b ] c ]"
		Julia
			"if __ a __ b __ c __ end"
		Lua,Ruby,Picat
			"if __ a __ then __ b __ c __ end"
		Octave
			"if __ a __ b __ c __ endif"
		Haskell,Pascal
			"if __ a __ then __ b __ c"
		Java,Katahdin,Pawn,PowerShell,D,Ceylon,TypeScript,ActionScript,Hack,AutoHotKey,Gosu,Nemerle,Swift,Nemerle,Pike,Groovy,Scala,Dart,JavaScript,C#,C,C++,Perl,Haxe,PHP,R,AWK,Vala,bc,Squirrel
			"if ( a ) { b } c"
		Rust,Go
			"if __ a { b } c"
		Visual Basic,Visual Basic .NET
			"If __ a __ b __ c"
		CLIPS
			"(if __ a __ then __ b __ c)"
		MiniZinc
			"if __ a __ then __ b __ c __ endif"
		Python
			"if __ a : \n #indent \n b \n #indent \n c"
		Prolog
			"( a -> b ; c )"
		Visual Basic
			"If __ a __ Then __ b __ c __ End __ If"
		Fortran
			"IF __ a __ THEN __ b __ c __ END __ IF"
		Common Lisp
			"( cond ( a __ b ) __ c )"
			
	elif(boolean_expression a, series_of_statements b)
		D,Pawn,Ceylon,Scala,TypeScript,AutoHotKey,AWK,R,Groovy,Gosu,Katahdin,Java,Swift,Nemerle,C,Dart,Vala,JavaScript,C#,C++,Haxe
			"else __ if ( a ) { b }"
		Rust,Go
			"else __ if __ a { b }"
		PHP,Hack,Perl
			"elseif ( a ) { b }"
		Julia,Octave
			"elseif __ a __ b"
		Ruby,Lua
			"elsif __ a __ then __ b"
		Picat
			"elseif __ a __ then __ b"
		Haskell,Pascal
			"else __ if __ a __ then __ b __ c"
		Erlang
			"a -> b"
		R,F#
			"a <- b"
		CLIPS
			"(if __ a __ then __ b)"
		MiniZinc
			"else __ if __ a __ then __ b"
		Python
			"elif __ a : \n #indent \n b \n #indent \n"
		Prolog
			"a -> b ;"
		Visual Basic .NET
			"ElseIf __ a __ Then __ b"
		Fortran
			"ELSE __ IF __ a __ THEN __ b"
		REBOL
			"a [ b ]"
		Common Lisp
			"( a __ b )"
	else(series_of_statements a)
		Hack,Katahdin,Pawn,PowerShell,Puppet,Ceylon,D,Rust,TypeScript,Scala,AutoHotKey,Gosu,Groovy,Java,Swift,Dart,AWK,JavaScript,Haxe,PHP,C#,Go,Perl,C++,C,Tcl,R,Vala,bc
			"else { a }"
		Ruby,Lua,Haskell,CLIPS,MiniZinc,Julia,Octave,Picat,Pascal
			"else __ a"
		Erlang
			"true -> a"
		Python
			"else : \n #indent \n b \n #indent \n"
		Prolog
			"a"
		Visual Basic .NET
			"Else __ a"
		Fortran
			"ELSE __ a"
		REBOL
			"true [ a ]"
		Common Lisp
			"( t __ a )"
	while(boolean_expression a, series_of_statements b)
		Pascal
			"while __ a __ do __ begin __ b __ end;"
		Rust
			"while __ a { b }"
		C,Katahdin,ooc,Processing,Pike,Kotlin,Pawn,PowerShell,Hack,Gosu,AutoHotKey,Ceylon,D,TypeScript,ActionScript,Nemerle,Dart,Swift,Groovy,Scala,Java,JavaScript,PHP,C#,Perl,C++,Haxe,R,AWK,Vala
			"while ( a ) { b }"
		Lua,Ruby,Julia
			"while __ a __ b __ end"
		Picat
			"while __ ( a ) __ b __ end"
		REBOL
			"while [ a ] [ b ]"
		Haskell,Erlang,MiniZinc,Prolog
			"_"
		Common Lisp
			"( loop __ while __ a __ do __ b )"
		Hy,newLisp,CLIPS
			"( while __ a __ b )"
		Python
			"while __ a : \n #indent \n b \n #indent \n"
		Visual Basic,Visual Basic .NET
			"While __ a __ b __ End While"
		Fortran
			"WHILE __ ( a ) __ DO __ b __ ENDDO"
		Octave
			"while ( a ) __ endwhile"
	forInRange(varName varName, arithmetic_expression startWith, arithmetic_expression finalValue, series_of_statements body)
		Fortran
			"do __ varName = startWith , finalValue __ body __ end __ do"
		C
			"int __ varName ; for ( varName = startWith ; varName < endWith ; varName ++ ) { body }"
		Perl
			"foreach my varName ( startWith .. endWith ) { body }"
		Python
			"for __ varName __ in __ range( startWith , endWith ) : \n #indent \n body \n #indent \n"
		Visual Basic,Visual Basic .NET
			"For __ varName __ As __ Integer = startWith __ To __ endWith __ body __ Next"
		Java,C#
			"for ( int __ varName = startWith ; varName < endWith ; varName ++ ) { body }"
		JavaScript,TypeScript
			"for ( var __ varName = startWith ; varName < endWith ; varName ++ ) { body }"
		R
			"for ( varName __ in __ startWith : endWith ) { body }"
		Haskell,MiniZinc,Erlang,Prolog
			"_"
		REBOL
			"for __ varName __ startWith __ endWith __ 1 [ body ]"
		Rust
			"for __ varName __ in __ range ( startWith , endWith ) { body }"
		Scala
			"for ( varName <- startWith to endWith ) { body }"
		Lua
			"for __ varName = startWith , endWith , 1 do __ body __ end"
		Swift
			"for __ varName __ in __ startWith ... endWith { body }"
		Ruby
			"for __ varName __ in __ startWith .. endWith __ body __ end"
		Groovy
			"for ( varName __ in __ startWith .. endWith ) { body }"
		CoffeeScript
			"for $varName in [$startWith... endWith ] \n #indent \n body \n #unindent \n"
	listComprehension(expression result, varName variable, array_expression array, boolean_expression condition)
		Python
			"[ result __ for __ variable __ in __ array __ if __ condition ]"
		JavaScript
			"[ result __ for ( variable __ of __ array ) if __ condition ]"
		CoffeeScript
            "( result __ for __ variable __ in __ array __ when __ condition )"
        MiniZinc
            "[ result | variable __ in __ array __ where __ condition ]"
        Haxe
            "[ for ( variable __ in __ array ) if ( condition ) result ]"
        C#
            "( from __ variable __ in __ array __ where __ condition __ select __ result )"
        Haskell
            "[ result | variable <- array , condition ]"
        Erlang
            "[ result || variable <- array , condition ]"
        Ruby
            "array . select { | variable | condition } . collect { | variable | result }"
        Scala
            "( for ( variable <- array __ if __ condition ) yield __ result )"
        Groovy
            "array.grep { variable -> condition }.collect { variable -> result }"
        Dart
            "array . where ( variable => condition ) . map ( variable => result )"
        C,Lua,Java,Prolog,Visual Basic .NET,Visual Basic,Fortran,REBOL
			"_"
	import(expression a)
		Fortran
			"USE __ a"
		Visual Basic .NET
			"Imports __ a"
		REBOL
			"a : __ load __ % a .r"
		Prolog
			":- consult( a ) ."
		MiniZinc
			"include __ \' a .mzn\' ;"
		PHP
			"include __ \' a .php\' ;"
		C
			"#include __ 'a .h'"
		C#
			"using __ a ;"
		Haskell,EngScript,Java,Python,Haxe,Scala,Go,Groovy,Picat
			"import __ a"
		Java
			"import __ a ;"
		Ruby,Lua
			"require __ ' a '"
		JavaScript
			"_"
		Perl
			"use a ;"
	print(expression a)
		Prolog
			"write ( a )"
		C#
			"Console . WriteLine ( a ) ;"
		Perl,PHP
			"print __ a ;"
		REBOL,Fortran
			"print __ a"
		Ruby
			"puts ( a )"
		Visual Basic .NET
			"System . Console . WriteLine ( a )"
		Scala
			"println ( a )"
		JavaScript,TypeScript
			"console . log ( a ) ;"
		Python,Lua
			"print ( a ) \n" 
		Hack,PHP
			"print ( a ) ;" 
		Java
			"System . out . println ( a ) ;"
		C
			"printf ( a ) ;"
		Haskell
			"( putStrLn __ a )"
		Hy
			"( print __ a )"
		Rust
			"println!( a ) ;"
		MiniZinc
			"_"
	comment(_string a)
		OCaml,Standard ML,ML
			"(*{ a }*)"
		REBOL
			"comment [ a ]"
		Java,Rust,Frink,D,Genie,Ceylon,Hack,Maxima,Kotlin,Delphi,Dart,TypeScript,Swift,Vala,C#,JavaScript,Haxe,Scala,Go,C,C++,Pike,PHP,F#,Nemerle,crosslanguage,Gosu,Groovy
			"// a \n"
		Gambas,Visual Basic,Visual Basic .NET
			"' a \n"
		Bash,PowerShell,Seed7,Cobra,Icon,EngScript,Nimrod,CoffeeScript,Julia,AWK,Ruby,Perl,R,Tcl,bc,Python
			"# a \n"
		Lua,Haskell,Ada
			"-- a \n"
		MATLAB,MiniZinc,Octave,Erlang,Prolog,Picat
			"% a \n"
		Racket,CLIPS,AutoIt,AutoHotKey,Common Lisp,Clojure,newLisp
			"; a \n"
		Fortran
			"! a \n"
		Pascal
			"{ a }"
	mod(arithmetic_expression a, arithmetic_expression b)
		Java,Frink,ooc,Genie,Pike,Ceylon,Pawn,PowerShell,CoffeeScript,Gosu,Groovy,EngScript,AWK,Julia,Scala,F#,Swift,R,Perl,Nemerle,Haxe,PHP,Hack,Vala,Lua,Tcl,Go,Dart,JavaScript,Python,C,C++,C#,Ruby
			"a % b"
		REBOL
			"mod __ a __ b"
		Haskell,MiniZinc,OCaml,Delphi,Pascal,Picat
			"a __ mod __ b"
		Prolog,Octave,MATLAB,AutoHotKey,Fortran
			"mod ( a , b )"
		Erlang
			"a __ rem __ b"
		CLIPS,Clojure,Common Lisp
			"( mod __ a __ b )"
		Visual Basic,Visual Basic .NET
			"a __ Mod __ b"
	setVar(varName name, expression value, type type)
		Python,Picat,Lua,Ruby,Haskell,Erlang,Prolog,Scala,Visual Basic .NET,Fortran,Julia
			"name = value"
		Java,JavaScript,C#,C,PHP,Hack,Vala,TypeScript,Haxe,PHP,Perl
			"name = value ;"
		REBOL
			"name : __ value"
		MiniZinc
			"type : name = value ;"
		Pascal,Delphi,AutoHotKey
			"name := value ;"
	parameter(type type, varName name)
		C#,Java,Ceylon,ALGOL 68,Groovy,D,C++,Pawn,Pike,Vala,C
			"type __ name"
		Haxe,Pascal,Rust,Genie,Hack,Nimrod,TypeScript,Gosu,Delphi,Nemerle,Scala,Swift
			"name : type"
		Go
			"name __ type"
		MiniZinc
			"var __ type : name"
		Haskell,LispyScript,CLIPS,Clojure,F#,ML,Racket,OCaml,Tcl,Common Lisp,newLisp,Python,Frink,Picat,IDP,PowerShell,Maxima,Icon,CoffeeScript,Fortran,Octave,AutoHotKey,Julia,Prolog,AWK,Kotlin,Dart,JavaScript,Nemerle,Erlang,PHP,AutoIt,Lua,Ruby,R,bc
			"name"
		REBOL
			"type [ name ]"
		OpenOffice Basic,Gambas
			"name __ As __ type"
		Visual Basic,Visual Basic .NET
			"name __ as __ type"
		Perl
			"name = push;"
	boolean(type t1)
                TypeScript,Python,Hy,Java,JavaScript,Lua,Perl
                    "boolean"
                Visual Basic,OpenOffice Basic,Ceylon,Delphi,Pascal,Scala,Visual Basic .NET
                    "Boolean"
                C++,Rust,MiniZinc,EngScript,Dart,D,Vala,crosslanguage,Go,Cobra,C#,F#,PHP,Hack
                    "bool"
                C,Cython
                    "int"
                Fortran
                    "LOGICAL"
                Haxe,Haskell,Swift
                    "Bool"
                REBOL
                    "logic!"
                Ruby
					"_"
				Prolog
					"atom"
	int(type t1)
		        Hack,MiniZinc,EngScript,Cython,ALGOL 68,D,Octave,Tcl,ML,AWK,Julia,Gosu,OCaml,F#,Pike,Objective-C,Go,Cobra,Dart,Groovy,Python,Hy,Java,C#,C,C++,Vala,Nemerle,crosslanguage
                    "int"
                PHP,Prolog
                    "integer"
                Fortran
                    "INTEGER"
                REBOL
                    "integer!"
                Ceylon,Gambas,OpenOffice Basic,Pascal,Erlang,Delphi,Visual Basic,Visual Basic .NET
                    "Integer"
                Haxe,ooc,Swift,Scala
                    "Int"
                JavaScript,TypeScript,CoffeeScript,Lua,Perl
                    "number"
                Haskell
                    "Num"
                Ruby
                    "fixnum"
	string(type t1)
                Python,EngScript,Hy,crosslanguage
                    "str"
                Vala,Prolog,MiniZinc,Genie,Hack,Nimrod,ALGOL 68,TypeScript,CoffeeScript,Octave,Tcl,AWK,Julia,C#,F#,Perl,Lua,JavaScript,Go,PHP,C++,Nemerle,Erlang
                    "string"
                REBOL
                    "string!"
                C,Cython
                    "char*"
                Java,Ceylon,Gambas,Dart,Gosu,Groovy,Scala,Pascal,Swift,Ruby,Haxe,Haskell,Visual Basic,Visual Basic .NET
                    "String"
                Fortran
					"CHARACTER"
				Rust
					"&str"
	functionCallStatement(functionCall a)
		C,Katahdin,Frink,MiniZinc,Falcon,Aldor,IDP,Processing,Maxima,Seed7,Drools,EBNF,ANTLR,EngScript,OpenOffice Basic,Ada,ALGOL 68,D,Ceylon,Rust,TypeScript,Octave,AutoHotKey,Pascal,Delphi,JavaScript,Pike,Objective-C,OCaml,Java,Scala,Dart,PHP,C#,C++,Haxe,AWK,bc,Haskell,Perl,Go,Nemerle,Vala
			"a ;"
		Python,Picat,COBOL,Genie,ooc,Janus,REXX,Z3,pyparsing,Moony Parser,Standard ML,Icon,Kotlin,CLIPS,Pawn,FreeBASIC,MATLAB,newLisp,Boo,PowerShell,Hy,Puppet,Fortran,LispyScript,Sibilant,Nimrod,Oz,Gambas,Cython,CoffeeScript,Swift,Clojure,Prolog,Gosu,Groovy,Polish notation,Reverse Polish notation,Ruby,ML,AutoIt,Tcl,F#,REBOL,Red,R,Python,Cobra,Bash,Visual Basic,Visual Basic .NET,Hack,Lua,Racket,Common Lisp,Julia
			"a"
	_greaterThanOrEqual(arithmetic_expression a, arithmetic_expression b)
		C,Frink,MiniZinc,Picat,ooc,Genie,PL/I,IDP,Processing,EngScript,Maxima,GNU Smalltalk,Pyke,Self,Boo,Cobra,Standard ML,Prolog,Kotlin,Pawn,FreeBASIC,Ada,MATLAB,ALGOL 68,Gambas,Nimrod,Gosu,AutoIt,Ceylon,D,Groovy,Rust,CoffeeScript,TypeScript,Octave,Hack,AutoHotKey,Julia,Scala,Pascal,Delphi,Swift,Visual Basic,F#,Objective-C,Pike,Python,Oz,ML,Vala,Dart,C++,Java,OCaml,REBOL,Erlang,C#,Nemerle,Ruby,PHP,Lua,Visual Basic .NET,Haskell,Haxe,Perl,JavaScript,R,AWK,crosslanguage,Go
			"a >= b"
		Fortran
			"a __ .GE. __ b"
		Racket,CLIPS,newLisp,Hy,Scheme,Clojure,Common Lisp,Emacs Lisp,Sibilant,LispyScript
			"( >= a b )"
	greaterThanOrEqual(_greaterThanOrEqual a)
		Fortran,C,Frink,MiniZinc,Picat,ooc,Genie,PL/I,IDP,Processing,EngScript,Maxima,GNU Smalltalk,Pyke,Self,Boo,Cobra,Standard ML,Prolog,Kotlin,Pawn,FreeBASIC,Ada,MATLAB,ALGOL 68,Gambas,Nimrod,Gosu,AutoIt,Ceylon,D,Groovy,Rust,CoffeeScript,TypeScript,Octave,Hack,AutoHotKey,Julia,Scala,Pascal,Delphi,Swift,Visual Basic,F#,Objective-C,Pike,Python,Oz,ML,Vala,Dart,C++,Java,OCaml,REBOL,Erlang,C#,Nemerle,Ruby,PHP,Lua,Visual Basic .NET,Haskell,Haxe,Perl,JavaScript,R,AWK,crosslanguage,Go
			"a"
	_lessThanOrEqual(arithmetic_expression a, arithmetic_expression b)
		C,Frink,MiniZinc,Picat,ooc,Genie,PL/I,IDP,Processing,EngScript,Maxima,GNU Smalltalk,Pyke,Self,Boo,Cobra,Standard ML,Prolog,Kotlin,Pawn,FreeBASIC,Ada,MATLAB,ALGOL 68,Gambas,Nimrod,Gosu,AutoIt,Ceylon,D,Groovy,Rust,CoffeeScript,TypeScript,Octave,Hack,AutoHotKey,Julia,Scala,Pascal,Delphi,Swift,Visual Basic,F#,Objective-C,Pike,Python,Oz,ML,Vala,Dart,C++,Java,OCaml,REBOL,Erlang,C#,Nemerle,Ruby,PHP,Lua,Visual Basic .NET,Haskell,Haxe,Perl,JavaScript,R,AWK,crosslanguage,Go
			"a <= b"
		Racket,Z3,CLIPS,newLisp,Hy,Sibilant,LispyScript,Scheme,Clojure,Common Lisp,Emacs Lisp
			"( <= a b )"
	lessThanOrEqual(_lessThanOrEqual a)
		C,Frink,MiniZinc,Picat,ooc,Genie,PL/I,IDP,Processing,EngScript,Maxima,GNU Smalltalk,Pyke,Self,Boo,Cobra,Standard ML,Prolog,Kotlin,Pawn,FreeBASIC,Ada,MATLAB,ALGOL 68,Gambas,Nimrod,Gosu,AutoIt,Ceylon,D,Groovy,Rust,CoffeeScript,TypeScript,Octave,Hack,AutoHotKey,Julia,Scala,Pascal,Delphi,Swift,Visual Basic,F#,Objective-C,Pike,Python,Oz,ML,Vala,Dart,C++,Java,OCaml,REBOL,Erlang,C#,Nemerle,Ruby,PHP,Lua,Visual Basic .NET,Haskell,Haxe,Perl,JavaScript,R,AWK,crosslanguage,Go
			"a"
	switch(expression a, caseStatements b, default c)
		Rust
			"match __ a { b __ c }"
		Scala
			"a __ match { b __ c }"
		Octave
			"switch ( a ) b __ endswitch"
		JavaScript,PowerShell,Nemerle,D,TypeScript,Hack,Swift,Groovy,Dart,AWK,C#,Java,C++,PHP,C,Go,Haxe,Vala
			"switch ( a ) { b __ c }"
		Ruby
			"case __ a __ b __ c __ end"
		Haskell,Erlang
			"case __ a __ of __ b __ c __ end"
		Delphi,Pascal
			"Case __ a __ of __ b __ c __ end;"
		CLIPS
			"( switch __ a __ b __ c )"
		Visual Basic .NET,Visual Basic
			"Select __ Case __ a __ b __ c __ End __ Select"
		REBOL
			"switch/default [ a __ b ]"
		Fortran
			"SELECT __ CASE ( a ) __ b __ c __ END __ SELECT"
		Clojure
			"( case __ a __ b __ c )"
		Python,Lua,MiniZinc,Prolog,Perl
			"_"
	case(expression a, series_of_statements b)
		JavaScript,Java,C#,C,TypeScript,Dart,PHP,Hack
			"case __ a : b ; break ;"
		Go,Haxe
			"case __ a : b"
		Fortran
			"CASE ( a ) __ b"
		Rust
			"a => { b }"
		Ruby
			"when __ a b"
		Python,Lua,MiniZinc,Prolog
			"_"
		Haskell,Erlang
			"a __ -> \n b"
		CLIPS
			"( case __ a __ then __ b )"
		Scala
			"case __ a => b"
		Visual Basic .NET
			"Case __ a __ b"
		REBOL
			"a [ b ]"
		Octave
			"case __ a __ b"
		Clojure
			"( a __ b )"
		Perl
			"_"
		Pascal,Delphi:
			"a : b"
	foreach(expression array, expression variableName, type typeInArray, series_of_statements body)
		Lua
			"for __ \_ , __ variableName __ in __ array __ do __ body __ end"
		Pawn
			"foreach ( new __ variableName : array ) { body }"
		Picat
			"foreach ( variableName __ in __ array ) __ body __ end"
		AWK,Ceylon
			"for __ ( __ variableName __ in  array ) { body }"
		Go
			"for __ variableName := range __ array { body }"
		Haxe,Groovy
			"for ( variableName __ in __ array ) { body }"
		Ruby
			"array . each __ do | variableName | __ body __ end"
		PHP,Hack
			"foreach ( array __ as __ variableName ) { body }"
		Nemerle,PowerShell
			"foreach ( variableName __ in __ array ) { body }"
		JavaScript
			"array . forEach ( function ( variableName ) { body  } ) ;"
		Scala
			"for ( variableName -> array ) { body }"
		REBOL
			"foreach __ variableName __ array [ body ]"
		Java
			"for ( typeInArray __ variableName : array ) { body }"
		C#,Vala
			"foreach ( typeInArray __ variableName __ in __ array ) { body }"
		C++
			"for ( getCorrespondingType __ typeInArray __ & __ variableName : array ){ body }"
		Perl
			"foreach __ variableName ( array ) { body }"
		C,Prolog,Haskell
			"_"
	default(series_of_statements a)
		JavaScript,Java,C#,C,TypeScript,Dart,Ruby,PHP,Haxe,Hack,Go
			"default : a"
		Ruby,Pascal
			"else __ a"
		Haskell
			"\_ -> \n __ a"
		Rust
			"\_ => a"
		Python,Lua,MiniZinc,Prolog
			"_"
		CLIPS
			"( default __ a )"
		Scala
			"case __ \_ => a"
		Visual Basic .NET
			"Case __ Else __ a"
		REBOL
			"][ a"
		Fortran
			"CASE __ DEFAULT __ a"
		Octave
			"otherwise __ a"
		Clojure
			"a"
		Perl
			"_"
	substring(string_expression a, arithmetic_expression b, arithmetic_expression c)
		JavaScript,CoffeeScript,TypeScript,Java,Scala,Dart
			"a . substring ( b , c )"
		C++
			"a . substring ( b , c - b )"
		Python,Icon,Go
			"a [ b : c ]"
		Fortran
			"a ( b : c )"
		C
			"_"
		C#,Visual Basic .NET,Nemerle
			"a . Substring ( b , c )"
		Haskell
			"take ( c - b ) . drop b $ a"
		PHP,AWK,Perl,Hack
			"substr ( a , b , c )"
		Haxe
			"a . substr ( b , c )"
		REBOL
			"copy/part __ skip __ a __ b __ c"
		Clojure
			"( subs __ a __ b __ c )"
		Erlang
			"string : sub_string ( a , b , c )"
		Ruby,Pike,Groovy
			"a [ b .. c ]"
		Racket
			"( substring __ a __ b __ c )"
		Common Lisp
			"( subseq __ a __ b __ c )"
		MiniZinc,Prolog
			"_"
		Lua
			"string . sub ( a , start , end )"
	strcmp(string_expression a, string_expression b)
		Visual Basic,Visual Basic .NET,F#,Prolog
			"a = b"
		Python,Fortran,MiniZinc,Picat,Go,Vala,AutoIt,REBOL,Ceylon,Groovy,Scala,CoffeeScript,AWK,Ruby,Haskell,Haxe,Dart,Lua,Swift
			"a == b"
		JavaScript,PHP,TypeScript,Hack
			"a === b"
		C,Octave
			"strcmp ( a , b ) == 0"
		C#
			"a . Equals ( b )"
		Java
			"a . equals ( b )"
		Common Lisp
			"( equal __ a __ b )"
		CLIPS
			"( str-compare __ a __ b )"
		Hy
			"( = __ a __ b )"
		Perl
			"a __ eq __ b"
		Erlang
			"string:equal ( a , b )"
	strlen(string_expression a)
		Python
			"len ( a )"
		Visual Basic,Visual Basic .NET,Gambas
			"Len ( a )"
		JavaScript,TypeScript,Ruby,Scala,Gosu,Picat
			"a . length"
		REBOL
			"length? __ a"
		Java,C++,Kotlin
			"a . length ( )"
		PHP,C,Pawn,Hack
			"strlen ( a )"
		MiniZinc,Julia
			"length ( a )"
		Haskell
			"( length a )"
		C#
			"a . Length"
		Swift
			"countElements ( a )"
		AutoIt
			"StringLen ( a )"
		Common Lisp
			"( length a )"
		Racket
			"( string-length a )"
		Perl,Octave
			"length ( a )"
		Nemerle
			"a . Length"
		Fortran
			"LEN ( a )"
		Lua
			"string . len ( a )"
		Prolog
			"_"
	parameter_separator(type t1)
		JavaScript,Pascal,Rust,Picat,AutoHotKey,Maxima,Octave,Julia,R,Prolog,Fortran,Go,MiniZinc,Erlang,CoffeeScript,PHP,Hack,Java,C#,C,C++,Lua,TypeScript,Dart,Ruby,Python,Haxe,Scala,Visual Basic,Visual Basic .NET
			","
		Hy,Scheme,Racket,Common Lisp,CLIPS,REBOL,Haskell,Racket,Clojure
			"__"
		Perl
			"\n"
}
'''
#The following expressions are the same in every language.

chunk -> _ (_series_of_statements | class) _ {%function(d){return d[1][0];}%}
_series_of_statements -> series_of_statements _ statement {%function(d){return d[0] +"\n"+ d[2];}%} | statement {%function(d){return d[0];}%} | null
series_of_statements -> statement {%function(d){return d[0];}%} | series_of_statements _ statement {%function(d){return d[0] + "\n" + d[2];}%}

arithmetic_expression -> expression
boolean_expression -> expression
string_expression -> expression
array_expression -> expression

expression ->  accessArray | this | functionCall | varName | dictionary
| parentheses_expression | add | subtract | multiply | mod | divide | number | pow | strlen
| String | concatenateString
| initializerList
| false | true | greaterThan | compareInts | strcmp | lessThanOrEqual | greaterThanOrEqual | lessThan | and | or | not | arrayContains


statement -> initializeArray | print | comment | switch | setVar | initializeVar | func | functionCallStatement | return | if | while | forInRange
type -> boolean | int | string | arrayType
caseStatements -> caseStatements _ case {%function(d){return d[0] +"\n"+ d[2];}%} | case
elifStatements -> elifStatements _ elif {%function(d){return d[0] +"\n"+ d[2];}%} | elif #Match a series of elif statements
elifOrElse -> else | elifStatements _ else {%function(d){return d[0] +"\n"+ d[2];}%} #Match a series of elif statements followed by else

parameterList -> _parameterList | null
_parameterList -> _parameterList _ parameter_separator _ parameter {%function(d){return d[0]+d[2]+d[4]}%}
| parameter
functionCallParameters -> functionCallParameters _ parameter_separator _ expression | expression | null

keyValueList -> _keyValueList
_keyValueList -> _keyValueList _ keyValueSeparator _ keyValue {%function(d){return d[0]+d[2]+d[4]}%}
| keyValue

_initializerList -> _initializerList _ initializerListSeparator _ expression {%function(d){return d[0]+d[2]+d[4]}%}
| expression

# Primitives
# ==========

identifier -> _name {% function(d) {return d[0]; } %}

_name -> [a-zA-Z_] {% id %}
	| _name [\w_] {% function(d) {return d[0] + d[1]; } %}

# Numbers

number -> _number {% function(d) {return parseFloat(d[0])} %}

_posint ->
	[0-9] {% id %}
	| _posint [0-9] {% function(d) {return d[0] + d[1]} %}

_int ->
	"-" _posint {% function(d) {return d[0] + d[1]; }%}
	| _posint {% id %}

_float ->
	_int {% id %}
	| _int "." _posint {% function(d) {return d[0] + d[1] + d[2]; }%}

_number ->
	_float {% id %}
	| _float "e" _int {% function(d){return d[0] + d[1] + d[2]; } %}


#Strings

String -> "\"" _string "\"" {% function(d) {return '"' + d[1] + '"'; } %}

_string ->
	null {% function() {return ""; } %}
	| _string _stringchar {% function(d) {return d[0] + d[1];} %}

_stringchar ->
	[^\\"] {% id %}
	| "\\" [^] {% function(d) {return JSON.parse("\"" + d[0] + d[1] + "\""); } %}

# Whitespace
_ -> null | _ [\s] {% function() {} %}
__ -> [\s] | __ [\s] {% function() {} %}


#The next two lines are the languages for the translator.
'''
